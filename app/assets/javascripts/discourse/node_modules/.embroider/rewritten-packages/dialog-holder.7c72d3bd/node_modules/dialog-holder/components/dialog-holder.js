import Component from "@glimmer/component";
import { fn } from "@ember/helper";
import { action } from "@ember/object";
import { service } from "@ember/service";
import { htmlSafe } from "@ember/template";
import { notEq, or } from "truth-helpers";
import DButton from "discourse/components/d-button";
import { precompileTemplate } from "@ember/template-compilation";
import { setComponentTemplate } from "@ember/component";
export default class DialogHolder extends Component {
  static {
    dt7948.g(this.prototype, "dialog", [service]);
  }
  #dialog = (dt7948.i(this, "dialog"), void 0);
  async handleButtonAction(btn) {
    if (typeof btn.action === "function") {
      await btn.action();
    }
    this.dialog.cancel();
  }
  static {
    dt7948.n(this.prototype, "handleButtonAction", [action]);
  }
  static {
    setComponentTemplate(precompileTemplate("\n    <div aria-labelledby={{this.dialog.titleElementId}} aria-hidden=\"true\" id=\"dialog-holder\" class=\"dialog-container {{this.dialog.class}}\">\n      <div class=\"dialog-overlay\" data-a11y-dialog-hide></div>\n\n      {{#if this.dialog.type}}\n        <div class=\"dialog-content\" role=\"document\">\n          {{#if this.dialog.title}}\n            <div class=\"dialog-header\">\n              <h3 id={{this.dialog.titleElementId}}>{{this.dialog.title}}</h3>\n              <DButton @action={{this.dialog.cancel}} @title=\"modal.close\" @icon=\"xmark\" class=\"btn-flat dialog-close close\" />\n            </div>\n          {{/if}}\n\n          {{#if (or this.dialog.message this.dialog.bodyComponent)}}\n            <div class=\"dialog-body\">\n              {{#if this.dialog.bodyComponent}}\n                <this.dialog.bodyComponent @model={{this.dialog.bodyComponentModel}} />\n              {{else if this.dialog.message}}\n                <p>{{htmlSafe this.dialog.message}}</p>\n              {{/if}}\n            </div>\n          {{/if}}\n\n          {{#if (notEq this.dialog.type \"notice\")}}\n            <div class=\"dialog-footer\">\n              {{#each this.dialog.buttons as |button|}}\n                <DButton @action={{fn this.handleButtonAction button}} @translatedLabel={{button.label}} @icon={{button.icon}} class={{button.class}} />\n              {{else}}\n                <DButton @action={{this.dialog.didConfirmWrapped}} @icon={{this.dialog.confirmButtonIcon}} @label={{this.dialog.confirmButtonLabel}} @disabled={{this.dialog.confirmButtonDisabled}} class={{this.dialog.confirmButtonClass}} />\n                {{#if this.dialog.shouldDisplayCancel}}\n                  <DButton @action={{this.dialog.cancel}} @label={{this.dialog.cancelButtonLabel}} class={{this.dialog.cancelButtonClass}} />\n                {{/if}}\n              {{/each}}\n            </div>\n          {{/if}}\n        </div>\n      {{/if}}\n    </div>\n  ", {
      strictMode: true,
      scope: () => ({
        DButton,
        or,
        htmlSafe,
        notEq,
        fn
      })
    }), this);
  }
}