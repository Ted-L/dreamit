import Component from "@glimmer/component";
import { concat } from "@ember/helper";
import { getOwner } from "@ember/owner";
import { service } from "@ember/service";
import { modifier } from "ember-modifier";
import { and } from "truth-helpers";
import concatClass from "discourse/helpers/concat-class";
import icon from "discourse/helpers/d-icon";
import DFloatBody from "float-kit/components/d-float-body";
import { TOOLTIP } from "float-kit/lib/constants";
import DTooltipInstance from "float-kit/lib/d-tooltip-instance";
import { precompileTemplate } from "@ember/template-compilation";
import { setComponentTemplate } from "@ember/component";
export default class DTooltip extends Component {
  static {
    dt7948.g(this.prototype, "tooltip", [service]);
  }
  #tooltip = (dt7948.i(this, "tooltip"), void 0);
  static {
    dt7948.g(this.prototype, "internalTooltip", [service]);
  }
  #internalTooltip = (dt7948.i(this, "internalTooltip"), void 0);
  tooltipInstance = new DTooltipInstance(getOwner(this), {
    ...this.allowedProperties,
    autoUpdate: true,
    listeners: true
  });
  registerTrigger = modifier(element => {
    this.tooltipInstance.trigger = element;
    this.options.onRegisterApi?.(this.tooltipInstance);
    return () => {
      this.tooltipInstance.destroy();
    };
  });
  get options() {
    return this.tooltipInstance?.options;
  }
  get componentArgs() {
    return {
      close: this.tooltip.close,
      data: this.options.data
    };
  }
  get allowedProperties() {
    const properties = {};
    for (const [key, value] of Object.entries(TOOLTIP.options)) {
      properties[key] = this.args[key] ?? value;
    }
    return properties;
  }
  static {
    setComponentTemplate(precompileTemplate("\n    <span {{this.registerTrigger this.allowedProperties}} class={{concatClass \"fk-d-tooltip__trigger\" (if this.tooltipInstance.expanded \"-expanded\")}} role=\"button\" id={{this.tooltipInstance.id}} data-identifier={{this.options.identifier}} data-trigger aria-expanded={{if this.tooltipInstance.expanded \"true\" \"false\"}} ...attributes>\n      <span class=\"fk-d-tooltip__trigger-container\">\n        {{#if (has-block \"trigger\")}}\n          {{yield this.componentArgs to=\"trigger\"}}\n        {{else}}\n          {{#if @icon}}\n            <span class=\"fk-d-tooltip__icon\">\n              {{~icon @icon~}}\n            </span>\n          {{/if}}\n          {{#if @label}}\n            <span class=\"fk-d-tooltip__label\">{{@label}}</span>\n          {{/if}}\n        {{/if}}\n      </span>\n    </span>\n\n    {{#if this.tooltipInstance.expanded}}\n      <DFloatBody @instance={{this.tooltipInstance}} @trapTab={{and this.options.interactive this.options.trapTab}} @mainClass={{concatClass \"fk-d-tooltip__content\" (concat this.options.identifier \"-content\")}} @innerClass=\"fk-d-tooltip__inner-content\" @role=\"tooltip\" @inline={{this.options.inline}}>\n        {{#if (has-block)}}\n          {{yield this.componentArgs}}\n        {{else if (has-block \"content\")}}\n          {{yield this.componentArgs to=\"content\"}}\n        {{else if this.options.component}}\n          <this.options.component @data={{this.options.data}} @close={{this.tooltipInstance.close}} />\n        {{else if this.options.content}}\n          {{this.options.content}}\n        {{/if}}\n      </DFloatBody>\n    {{/if}}\n  ", {
      strictMode: true,
      scope: () => ({
        concatClass,
        icon,
        DFloatBody,
        and,
        concat
      })
    }), this);
  }
}