import Component from "@glimmer/component";
import { tracked } from "@glimmer/tracking";
import { action } from "@ember/object";
import { service } from "@ember/service";
import { and } from "truth-helpers";
import concatClass from "discourse/helpers/concat-class";
import { getMaxAnimationTimeMs } from "discourse/lib/swipe-events";
import swipe from "discourse/modifiers/swipe";
import autoCloseToast from "float-kit/modifiers/auto-close-toast";
import { precompileTemplate } from "@ember/template-compilation";
import { setComponentTemplate } from "@ember/component";
const VELOCITY_THRESHOLD = -1.2;
export default class DToast extends Component {
  static {
    dt7948.g(this.prototype, "site", [service]);
  }
  #site = (dt7948.i(this, "site"), void 0);
  static {
    dt7948.g(this.prototype, "progressBar", [tracked]);
  }
  #progressBar = (dt7948.i(this, "progressBar"), void 0);
  registerProgressBar(element) {
    this.progressBar = element;
  }
  static {
    dt7948.n(this.prototype, "registerProgressBar", [action]);
  }
  async didSwipe(state) {
    if (state.deltaY >= 0) {
      this.#animateWrapperPosition(state.element, 0);
      return;
    }
    if (state.velocityY < VELOCITY_THRESHOLD) {
      await this.#close(state.element);
    } else {
      await this.#animateWrapperPosition(state.element, state.deltaY);
    }
  }
  static {
    dt7948.n(this.prototype, "didSwipe", [action]);
  }
  async didEndSwipe(state) {
    if (state.velocityY < VELOCITY_THRESHOLD) {
      await this.#close(state.element);
    } else {
      await this.#animateWrapperPosition(state.element, 0);
    }
  }
  static {
    dt7948.n(this.prototype, "didEndSwipe", [action]);
  }
  async #close(element) {
    await this.#closeWrapperAnimation(element);
    this.args.toast.close();
  }
  async #closeWrapperAnimation(element) {
    await element.animate([{
      transform: "translateY(-150px)"
    }], {
      fill: "forwards",
      duration: getMaxAnimationTimeMs()
    }).finished;
  }
  async #animateWrapperPosition(element, position) {
    await element.animate([{
      transform: `translateY(${position}px)`
    }], {
      fill: "forwards"
    }).finished;
  }
  static {
    setComponentTemplate(precompileTemplate("\n    <output role={{if @toast.options.autoClose \"status\" \"log\"}} key={{@toast.id}} class={{concatClass \"fk-d-toast\" @toast.options.class}} {{autoCloseToast close=@toast.close duration=@toast.options.duration progressBar=this.progressBar enabled=@toast.options.autoClose}} {{swipe onDidSwipe=this.didSwipe onDidEndSwipe=this.didEndSwipe}}>\n      <@toast.options.component @data={{@toast.options.data}} @close={{@toast.close}} @showProgressBar={{and @toast.options.showProgressBar @toast.options.autoClose}} @onRegisterProgressBar={{this.registerProgressBar}} />\n    </output>\n  ", {
      strictMode: true,
      scope: () => ({
        concatClass,
        autoCloseToast,
        swipe,
        and
      })
    }), this);
  }
}