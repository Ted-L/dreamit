import { tracked } from "@glimmer/tracking";
import { action } from "@ember/object";
import { guidFor } from "@ember/object/internals";
import { getOwner, setOwner } from "@ember/owner";
import { service } from "@ember/service";
import { MENU } from "float-kit/lib/constants";
import FloatKitInstance from "float-kit/lib/float-kit-instance";
export default class DMenuInstance extends FloatKitInstance {
  static {
    dt7948.g(this.prototype, "menu", [service]);
  }
  #menu = (dt7948.i(this, "menu"), void 0);
  static {
    dt7948.g(this.prototype, "site", [service]);
  }
  #site = (dt7948.i(this, "site"), void 0);
  static {
    dt7948.g(this.prototype, "modal", [service]);
  }
  #modal = (dt7948.i(this, "modal"), void 0);
  static {
    dt7948.g(this.prototype, "expanded", [tracked], function () {
      return false;
    });
  }
  #expanded = (dt7948.i(this, "expanded"), void 0);
  /**
   * Indicates whether the menu is expanded or not.
   * @property {boolean} expanded - Tracks the state of menu expansion, initially set to false.
   */
  static {
    dt7948.g(this.prototype, "detachedTrigger", [tracked], function () {
      return false;
    });
  }
  #detachedTrigger = (dt7948.i(this, "detachedTrigger"), void 0);
  /**
   * Specifies whether the trigger for opening/closing the menu is detached from the menu itself.
   * This is the case when a menu is trigger programmatically instead of through the <DMenu /> component.
   * @property {boolean} detachedTrigger - Tracks whether the trigger is detached, initially set to false.
   */
  static {
    dt7948.g(this.prototype, "options", [tracked]);
  }
  #options = (dt7948.i(this, "options"), void 0);
  /**
   * Configuration options for the DMenuInstance.
   * @property {Object} options - Options object that configures the menu behavior and display.
   */
  static {
    dt7948.g(this.prototype, "_trigger", [tracked]);
  }
  #_trigger = (dt7948.i(this, "_trigger"), void 0);
  constructor(owner, options = {}) {
    super(...arguments);
    setOwner(this, owner);
    this.options = {
      ...MENU.options,
      ...options
    };
  }
  get portalOutletElement() {
    return document.getElementById("d-menu-portals");
  }
  get trigger() {
    return this._trigger;
  }
  set trigger(element) {
    this._trigger = element;
    this.id = element.id || guidFor(element);
    this.setupListeners();
  }
  get shouldTrapPointerDown() {
    return this.expanded;
  }
  async close(options = {
    focusTrigger: true
  }) {
    if (getOwner(this).isDestroying) {
      return;
    }
    await super.close(...arguments);
    if (this.site.mobileView && this.options.modalForMobile && this.expanded) {
      await this.modal.close();
    }
    await this.menu.close(this);
    if (options.focusTrigger) {
      this.trigger?.focus?.();
    }
    await this.options.onClose?.(this);
  }
  static {
    dt7948.n(this.prototype, "close", [action]);
  }
  async show() {
    await super.show(...arguments);
    await this.menu.show(this);
  }
  static {
    dt7948.n(this.prototype, "show", [action]);
  }
  async onPointerMove(event) {
    if (this.expanded && this.trigger.contains(event.target)) {
      return;
    }
    await this.onTrigger(event);
  }
  static {
    dt7948.n(this.prototype, "onPointerMove", [action]);
  }
  async onClick(event) {
    if (this.expanded && this.untriggers.includes("click")) {
      return await this.onUntrigger(event);
    }
    await this.onTrigger(event);
  }
  static {
    dt7948.n(this.prototype, "onClick", [action]);
  }
  async onPointerLeave(event) {
    if (this.untriggers.includes("hover")) {
      await this.onUntrigger(event);
    }
  }
  static {
    dt7948.n(this.prototype, "onPointerLeave", [action]);
  }
  async onTrigger() {
    await this.options.beforeTrigger?.(this);
    await this.show();
  }
  static {
    dt7948.n(this.prototype, "onTrigger", [action]);
  }
  async onUntrigger() {
    await this.close();
  }
  static {
    dt7948.n(this.prototype, "onUntrigger", [action]);
  }
  destroy() {
    this.close();
    this.tearDownListeners();
  }
  static {
    dt7948.n(this.prototype, "destroy", [action]);
  }
}