import Component from "@glimmer/component";
import { concat } from "@ember/helper";
import { on } from "@ember/modifier";
import { action } from "@ember/object";
import { getOwner } from "@ember/owner";
import { service } from "@ember/service";
import curryComponent from "ember-curry-component";
import { modifier } from "ember-modifier";
import { and } from "truth-helpers";
import DButton from "discourse/components/d-button";
import DModal from "discourse/components/d-modal";
import concatClass from "discourse/helpers/concat-class";
import { isTesting } from "discourse/lib/environment";
import DFloatBody from "float-kit/components/d-float-body";
import { MENU } from "float-kit/lib/constants";
import DMenuInstance from "float-kit/lib/d-menu-instance";
import { precompileTemplate } from "@ember/template-compilation";
import { setComponentTemplate } from "@ember/component";
export default class DMenu extends Component {
  static {
    dt7948.g(this.prototype, "menu", [service]);
  }
  #menu = (dt7948.i(this, "menu"), void 0);
  static {
    dt7948.g(this.prototype, "site", [service]);
  }
  #site = (dt7948.i(this, "site"), void 0);
  menuInstance = new DMenuInstance(getOwner(this), {
    ...this.allowedProperties,
    autoUpdate: true,
    listeners: true
  });
  registerTrigger = modifier(domElement => {
    this.menuInstance.trigger = domElement;
    this.options.onRegisterApi?.(this.menuInstance);
    return () => {
      this.menuInstance.destroy();
    };
  });
  registerFloatBody = modifier(domElement => {
    this.body = domElement;
    return () => {
      this.body = null;
    };
  });
  teardownFloatBody() {
    this.body = null;
  }
  static {
    dt7948.n(this.prototype, "teardownFloatBody", [action]);
  }
  forwardTabToContent(event) {
    if (!this.body) {
      return;
    }
    if (event.key === "Tab") {
      event.preventDefault();
      const firstFocusable = this.body.querySelector('button, a, input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])');
      firstFocusable?.focus() || this.body.focus();
    }
  }
  static {
    dt7948.n(this.prototype, "forwardTabToContent", [action]);
  }
  get menuId() {
    return `d-menu-${this.menuInstance.id}`;
  }
  get options() {
    return this.menuInstance?.options ?? {};
  }
  get componentArgs() {
    return {
      close: this.menuInstance.close,
      data: this.options.data
    };
  }
  get triggerComponent() {
    const instance = this;
    const baseArguments = {
      get icon() {
        return instance.args.icon;
      },
      get translatedLabel() {
        return instance.args.label;
      },
      get translatedAriaLabel() {
        return instance.args.ariaLabel;
      },
      get translatedTitle() {
        return instance.args.title;
      },
      get disabled() {
        return instance.args.disabled;
      },
      get isLoading() {
        return instance.args.isLoading;
      }
    };
    return this.args.triggerComponent || curryComponent(DButton, baseArguments, getOwner(this));
  }
  get allowedProperties() {
    const properties = {};
    for (const [key, value] of Object.entries(MENU.options)) {
      properties[key] = this.args[key] ?? value;
    }
    return properties;
  }
  static {
    setComponentTemplate(precompileTemplate("\n    <this.triggerComponent {{this.registerTrigger}} class={{concatClass \"fk-d-menu__trigger\" (if this.menuInstance.expanded \"-expanded\") (concat this.options.identifier \"-trigger\") @triggerClass @class}} id={{this.menuInstance.id}} data-identifier={{this.options.identifier}} data-trigger aria-expanded={{if this.menuInstance.expanded \"true\" \"false\"}} {{on \"keydown\" this.forwardTabToContent}} ...attributes>\n      {{#if (has-block \"trigger\")}}\n        {{yield this.componentArgs to=\"trigger\"}}\n      {{/if}}\n    </this.triggerComponent>\n\n    {{#if this.menuInstance.expanded}}\n      {{#if (and this.site.mobileView this.options.modalForMobile)}}\n        <DModal @closeModal={{this.menuInstance.close}} @hideHeader={{true}} @autofocus={{this.options.autofocus}} class={{concatClass \"fk-d-menu-modal\" (concat this.options.identifier \"-content\") @contentClass @class}} @inline={{(isTesting)}} data-identifier={{this.options.identifier}} data-content>\n          <div class=\"fk-d-menu-modal__grip\" aria-hidden=\"true\"></div>\n          {{#if (has-block)}}\n            {{yield this.componentArgs}}\n          {{else if (has-block \"content\")}}\n            {{yield this.componentArgs to=\"content\"}}\n          {{else if this.options.component}}\n            <this.options.component @data={{this.options.data}} @close={{this.menuInstance.close}} />\n          {{else if this.options.content}}\n            {{this.options.content}}\n          {{/if}}\n        </DModal>\n      {{else}}\n        <DFloatBody @instance={{this.menuInstance}} @trapTab={{this.options.trapTab}} @mainClass={{concatClass \"fk-d-menu\" (concat this.options.identifier \"-content\") @class @contentClass}} @innerClass=\"fk-d-menu__inner-content\" @role=\"dialog\" @inline={{this.options.inline}} {{this.registerFloatBody}}>\n          {{#if (has-block)}}\n            {{yield this.componentArgs}}\n          {{else if (has-block \"content\")}}\n            {{yield this.componentArgs to=\"content\"}}\n          {{else if this.options.component}}\n            <this.options.component @data={{this.options.data}} @close={{this.menuInstance.close}} />\n          {{else if this.options.content}}\n            {{this.options.content}}\n          {{/if}}\n        </DFloatBody>\n      {{/if}}\n    {{/if}}\n  ", {
      strictMode: true,
      scope: () => ({
        concatClass,
        concat,
        on,
        and,
        DModal,
        isTesting,
        DFloatBody
      })
    }), this);
  }
}