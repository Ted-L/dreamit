import { computed } from "@ember/object";
import { classNames } from "@ember-decorators/component";
import { makeArray } from "discourse/lib/helpers";
import MultiSelectComponent from "select-kit/components/multi-select";
import { pluginApiIdentifiers, selectKitOptions } from "select-kit/components/select-kit";
import TagsMixin from "select-kit/mixins/tags";
const TagGroupChooser = dt7948.c(class TagGroupChooser extends MultiSelectComponent.extend(TagsMixin) {
  modifyComponentForRow() {
    return "tag-chooser-row";
  }
  get value() {
    return makeArray(this.tagGroups).uniq();
  }
  static {
    dt7948.n(this.prototype, "value", [computed("tagGroups.[]")]);
  }
  get content() {
    return makeArray(this.tagGroups).uniq().map(t => this.defaultItem(t, t));
  }
  static {
    dt7948.n(this.prototype, "content", [computed("tagGroups.[]")]);
  }
  search(query) {
    const data = {
      q: query,
      limit: this.siteSettings.max_tag_search_results
    };
    return this.searchTags("/tag_groups/filter/search", data, this._transformJson).then(results => {
      if (results && results.length) {
        return results.filter(r => {
          return !makeArray(this.tagGroups).includes(this.getValue(r));
        });
      }
    });
  }
  _transformJson(context, json) {
    return json.results.sort((a, b) => a.name > b.name).map(result => {
      return {
        id: result.name,
        name: result.name,
        count: result.count
      };
    });
  }
}, [pluginApiIdentifiers("tag-group-chooser"), selectKitOptions({
  allowAny: false,
  filterable: true,
  filterPlaceholder: "category.tag_groups_placeholder",
  limit: null
}), classNames("tag-group-chooser", "tag-chooser")]);
export default TagGroupChooser;