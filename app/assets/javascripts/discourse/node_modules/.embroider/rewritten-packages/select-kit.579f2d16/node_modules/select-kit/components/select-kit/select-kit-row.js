/* import __COLOCATED_TEMPLATE__ from './select-kit-row.hbs.js'; */
import Component from "@ember/component";
import { action, computed } from "@ember/object";
import { reads } from "@ember/object/computed";
import { guidFor } from "@ember/object/internals";
import { dasherize } from "@ember/string";
import { attributeBindings, classNameBindings, classNames, tagName } from "@ember-decorators/component";
import { makeArray } from "discourse/lib/helpers";
import { i18n } from "discourse-i18n";
import UtilsMixin from "select-kit/mixins/utils";
const SelectKitRow = dt7948.c(class SelectKitRow extends Component.extend(UtilsMixin) {
  tabIndex = 0;
  index = 0;
  role = "menuitemradio";
  static {
    dt7948.g(this.prototype, "lang", [reads("item.lang")]);
  }
  #lang = (dt7948.i(this, "lang"), void 0);
  didInsertElement() {
    super.didInsertElement(...arguments);
    if (this.site.desktopView) {
      this.element.addEventListener("mouseenter", this.handleMouseEnter);
      this.element.addEventListener("focus", this.handleMouseEnter);
    }
  }
  willDestroyElement() {
    super.willDestroyElement(...arguments);
    if (this.site.desktopView) {
      this.element.removeEventListener("mouseenter", this.handleMouseEnter);
      this.element.removeEventListener("focus", this.handleMouseEnter);
    }
  }
  get isNone() {
    return this.rowValue === this.getValue(this.selectKit.noneItem);
  }
  static {
    dt7948.n(this.prototype, "isNone", [computed("rowValue")]);
  }
  get guid() {
    return guidFor(this.item);
  }
  static {
    dt7948.n(this.prototype, "guid", [computed("item")]);
  }
  get ariaChecked() {
    return this.isSelected ? "true" : "false";
  }
  static {
    dt7948.n(this.prototype, "ariaChecked", [computed("isSelected")]);
  }
  get title() {
    return this.rowTitle || this.getProperty(this.item, "title") || this.rowName;
  }
  static {
    dt7948.n(this.prototype, "title", [computed("rowTitle", "item.title", "rowName")]);
  }
  get dasherizedTitle() {
    return dasherize((this.title || "").replace(".", "-"));
  }
  static {
    dt7948.n(this.prototype, "dasherizedTitle", [computed("title")]);
  }
  get label() {
    const label = this.rowLabel || this.getProperty(this.item, "label") || this.title || this.rowName;
    if (this.selectKit.options.allowAny && this.rowValue === this.selectKit.filter && this.getName(this.selectKit.noneItem) !== this.rowName && this.getName(this.selectKit.newItem) === this.rowName) {
      return i18n("select_kit.create", {
        content: label
      });
    }
    return label;
  }
  static {
    dt7948.n(this.prototype, "label", [computed("rowLabel", "item.label", "title", "rowName")]);
  }
  didReceiveAttrs() {
    super.didReceiveAttrs(...arguments);
    this.setProperties({
      rowName: this.getName(this.item),
      rowValue: this.getValue(this.item),
      rowLabel: this.getProperty(this.item, "labelProperty"),
      rowTitle: this.getProperty(this.item, "titleProperty"),
      rowLang: this.getProperty(this.item, "langProperty")
    });
  }
  get icons() {
    const icon = makeArray(this.getProperty(this.item, "icon"));
    const icons = makeArray(this.getProperty(this.item, "icons"));
    return icon.concat(icons).filter(Boolean);
  }
  static {
    dt7948.n(this.prototype, "icons", [computed("item.{icon,icons}")]);
  }
  get highlightedValue() {
    return this.getValue(this.selectKit.highlighted);
  }
  static {
    dt7948.n(this.prototype, "highlightedValue", [computed("selectKit.highlighted")]);
  }
  get isHighlighted() {
    return this.rowValue === this.highlightedValue;
  }
  static {
    dt7948.n(this.prototype, "isHighlighted", [computed("rowValue", "highlightedValue")]);
  }
  get isSelected() {
    return this.rowValue === this.value;
  }
  static {
    dt7948.n(this.prototype, "isSelected", [computed("rowValue", "value")]);
  }
  handleMouseEnter() {
    if (!this.isDestroying || !this.isDestroyed) {
      this.selectKit.onHover(this.rowValue, this.item);
    }
    return false;
  }
  static {
    dt7948.n(this.prototype, "handleMouseEnter", [action]);
  }
  click(event) {
    event.preventDefault();
    event.stopPropagation();
    this.selectKit.select(this.rowValue, this.item);
    return false;
  }
  mouseDown(event) {
    if (this.selectKit.options.preventHeaderFocus) {
      event.preventDefault();
    }
  }
  focusIn(event) {
    event.stopImmediatePropagation();
  }
  keyDown(event) {
    if (this.selectKit.isExpanded) {
      if (event.key === "Backspace") {
        if (this.selectKit.isFilterExpanded) {
          this.selectKit.set("filter", this.selectKit.filter.slice(0, -1));
          this.selectKit.triggerSearch();
          this.selectKit.focusFilter();
          event.preventDefault();
          event.stopPropagation();
          return false;
        }
      } else if (event.key === "ArrowUp") {
        this.selectKit.highlightPrevious();
        return false;
      } else if (event.key === "ArrowDown") {
        this.selectKit.highlightNext();
        return false;
      } else if (event.key === "Enter") {
        event.stopImmediatePropagation();
        this.selectKit.select(this.getValue(this.selectKit.highlighted), this.selectKit.highlighted);
        return false;
      } else if (event.key === "Escape") {
        this.selectKit.close(event);
        this.selectKit.headerElement().focus();
        event.preventDefault();
        event.stopPropagation();
      } else {
        if (this.isValidInput(event.key)) {
          this.selectKit.set("filter", event.key);
          this.selectKit.triggerSearch();
          this.selectKit.focusFilter();
          event.preventDefault();
          event.stopPropagation();
        }
      }
    }
  }
}, [classNameBindings("isHighlighted", "isSelected", "isNone", "isNone:none", "item.classNames"), attributeBindings("tabIndex", "title", "rowValue:data-value", "rowName:data-name", "index:data-index", "role", "ariaChecked:aria-checked", "guid:data-guid", "rowLang:lang"), tagName("li"), classNames("select-kit-row")]);
export default SelectKitRow;