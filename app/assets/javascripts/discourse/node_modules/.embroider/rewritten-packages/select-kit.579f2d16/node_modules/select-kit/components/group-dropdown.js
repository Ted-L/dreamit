import { action, computed } from "@ember/object";
import { gte, reads } from "@ember/object/computed";
import { classNames } from "@ember-decorators/component";
import { setting } from "discourse/lib/computed";
import DiscourseURL from "discourse/lib/url";
import { i18n } from "discourse-i18n";
import ComboBoxComponent from "select-kit/components/combo-box";
import { pluginApiIdentifiers, selectKitOptions } from "select-kit/components/select-kit";
const GroupDropdown = dt7948.c(class GroupDropdown extends ComboBoxComponent {
  static {
    dt7948.g(this.prototype, "content", [reads("groupsWithShortcut")]);
  }
  #content = (dt7948.i(this, "content"), void 0);
  static {
    dt7948.g(this.prototype, "hasManyGroups", [gte("content.length", 10)]);
  }
  #hasManyGroups = (dt7948.i(this, "hasManyGroups"), void 0);
  static {
    dt7948.g(this.prototype, "enableGroupDirectory", [setting("enable_group_directory")]);
  }
  #enableGroupDirectory = (dt7948.i(this, "enableGroupDirectory"), void 0);
  valueProperty = null;
  nameProperty = null;
  get groupsWithShortcut() {
    const shortcuts = [];
    if (this.enableGroupDirectory || this.get("currentUser.staff")) {
      shortcuts.push(i18n("groups.index.all"));
    }
    return shortcuts.concat(this.groups);
  }
  static {
    dt7948.n(this.prototype, "groupsWithShortcut", [computed("groups.[]")]);
  }
  onChange(groupName) {
    if ((this.groups || []).includes(groupName)) {
      DiscourseURL.routeToUrl(`/g/${groupName}`);
    } else {
      DiscourseURL.routeToUrl(`/g`);
    }
  }
  static {
    dt7948.n(this.prototype, "onChange", [action]);
  }
}, [pluginApiIdentifiers("group-dropdown"), selectKitOptions({
  caretDownIcon: "caret-right",
  caretUpIcon: "caret-down",
  filterable: "hasManyGroups"
}), classNames("group-dropdown")]);
export default GroupDropdown;