import { action, computed } from "@ember/object";
import { service } from "@ember/service";
import { classNames } from "@ember-decorators/component";
import IgnoreDurationModal from "discourse/components/modal/ignore-duration-with-username";
import { popupAjaxError } from "discourse/lib/ajax-error";
import { i18n } from "discourse-i18n";
import DropdownSelectBox from "select-kit/components/dropdown-select-box";
import { selectKitOptions } from "select-kit/components/select-kit";
const UserNotificationsDropdown = dt7948.c(class UserNotificationsDropdown extends DropdownSelectBox {
  static {
    dt7948.g(this.prototype, "modal", [service]);
  }
  #modal = (dt7948.i(this, "modal"), void 0);
  get userNotificationIcon() {
    return this.mainCollection && this.mainCollection.find(row => row.id === this.value).icon;
  }
  static {
    dt7948.n(this.prototype, "userNotificationIcon", [computed("mainCollection.[]", "value")]);
  }
  get content() {
    const content = [];
    content.push({
      icon: "bell",
      id: "changeToNormal",
      description: i18n("user.user_notifications.normal_option_title"),
      name: i18n("user.user_notifications.normal_option")
    });
    content.push({
      icon: "bell-slash",
      id: "changeToMuted",
      description: i18n("user.user_notifications.mute_option_title"),
      name: i18n("user.user_notifications.mute_option")
    });
    if (this.get("user.can_ignore_user")) {
      content.push({
        icon: "far-eye-slash",
        id: "changeToIgnored",
        description: i18n("user.user_notifications.ignore_option_title"),
        name: i18n("user.user_notifications.ignore_option")
      });
    }
    return content;
  }
  static {
    dt7948.n(this.prototype, "content", [computed]);
  }
  changeToNormal() {
    this.updateNotificationLevel({
      level: "normal"
    }).catch(popupAjaxError);
  }
  changeToMuted() {
    this.updateNotificationLevel({
      level: "mute"
    }).catch(popupAjaxError);
  }
  changeToIgnored() {
    this.modal.show(IgnoreDurationModal, {
      model: {
        ignoredUsername: this.user.username,
        enableSelection: false,
        onUserIgnored: username => this.onUserIgnored?.(username)
      }
    });
  }
  onChange(level) {
    this[level]();

    // hack but model.ignored/muted is not
    // getting updated after updateNotificationLevel
    this.set("value", level);
  }
  static {
    dt7948.n(this.prototype, "onChange", [action]);
  }
}, [selectKitOptions({
  headerIcon: "userNotificationIcon",
  showCaret: true
}), classNames("user-notifications", "user-notifications-dropdown")]);
export default UserNotificationsDropdown;