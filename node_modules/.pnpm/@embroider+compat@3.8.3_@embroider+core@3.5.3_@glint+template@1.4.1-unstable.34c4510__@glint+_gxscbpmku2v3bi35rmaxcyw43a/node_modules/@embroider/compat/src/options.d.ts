import type { V1AddonConstructor } from './v1-addon';
import type { Node } from 'broccoli-node-api';
import type { Options as CoreOptions } from '@embroider/core';
import type { PackageRules } from './dependency-rules';
export default interface Options extends CoreOptions {
    /**
     * Controls whether your addon's "addon" trees should be resolved statically
     * at build time.
     *
     * Note: This setting will be removed in the next version of Embroider and
     * will effectively default to true
     *
     *   false (the current default): implies maximum backward compatibility at
     *   the cost of bigger builds. In this mode, we force every file into the
     *   Ember app, which is the legacy behavior.
     *
     *   true: produces smaller builds. The addon files must be imported from
     *   somewhere we can statically see during the build. In this mode, your app
     *   will only include files that are actually imported from somewhere.
     *
     * Commentary: most v1 addons already work well with this set to true, because
     * they tend to either offer Javascript that users are supposed to directly
     * `import` or components / helpers / services that get directly imported and
     * re-exported by code in App Javascript. The exceptions are addons that do
     * runtime shenanigans with `require` or scoped runtime resolutions.
     *
     * To workaround an addon that is preventing you from enabling this flag, you
     * can use addonDependencyRules.
     */
    staticAddonTrees?: boolean;
    staticAddonTestSupportTrees?: boolean;
    /**
     * When true, we will load ember-source as ES modules. This means unused parts
     * of ember-source won't be included. But it also means that addons using old
     * APIs to try to `require()` things from Ember -- particularly from within
     * vendor.js -- cannot do that anymore.
     *
     * When false (the default) we load ember-source the traditional way, which is
     * that a big ol' script gets smooshed into vendor.js, and none of ember's
     * public module API actually exists as modules at build time.
     *
     * Note: This setting will be removed in the next version of Embroider and
     * will effectively default to true
     */
    staticEmberSource?: boolean;
    compatAdapters?: Map<string, V1AddonConstructor | null>;
    extraPublicTrees?: Node[];
    packageRules?: PackageRules[];
    allowUnsafeDynamicComponents?: boolean;
}
export type CompatOptionsType = Required<Omit<Options, 'staticHelpers' | 'staticModifiers' | 'staticComponents' | 'staticInvokables'>> & Pick<Options, 'staticHelpers' | 'staticModifiers' | 'staticComponents' | 'staticInvokables'>;
export declare function optionsWithDefaults(options?: Options): CompatOptionsType;
export declare const recommendedOptions: {
    [name: string]: Options;
};
