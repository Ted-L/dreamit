import { ScriptSnapshot } from './script-snapshot.js';
import { rewriteModule } from '../transform/index.js';
/**
 * A Volar VirtualCode representing .gts/.gjs files, which includes 0+ embedded
 * Handlebars templates within <template> tags.
 */
export class VirtualGtsCode {
    constructor(glintConfig, snapshot, languageId) {
        this.glintConfig = glintConfig;
        this.snapshot = snapshot;
        this.languageId = languageId;
        /**
         * The virtual files embedded in the GTS file. (such as <template>)
         */
        this.embeddedCodes = [];
        /**
         * The id is a unique (within the VirtualCode and its embedded files) id for Volar to identify it. It could be any string.
         */
        this.id = 'gts';
        this.mappings = [];
        this.transformedModule = null;
        this.update(snapshot);
    }
    // This gets called by the constructor and whenever the language server receives a file change event,
    // i.e. the user saved the file.
    update(snapshot) {
        this.snapshot = snapshot;
        const length = snapshot.getLength();
        // Define a single mapping for the root virtual code (the .gts file).
        // The original MDX docs describe the root virtual code mappings are as:
        //
        // > The code mappings of the MDX file. There is always only one mapping.
        //
        // I guess it's some "identity" mapping that describes the whole file? I don't know.
        this.mappings[0] = {
            sourceOffsets: [0],
            generatedOffsets: [0],
            lengths: [length],
            // This controls which language service features are enabled within this root virtual code
            data: {
                completion: true,
                format: true,
                navigation: true,
                semantic: true,
                structure: true,
                verification: true,
            },
        };
        const contents = snapshot.getText(0, length);
        let script = { filename: 'disregard.gts', contents };
        let template = undefined;
        const transformedModule = rewriteModule(this.glintConfig.ts, { script, template }, this.glintConfig.environment);
        this.transformedModule = transformedModule;
        if (transformedModule) {
            const mappings = transformedModule.toVolarMappings();
            this.embeddedCodes = [
                {
                    embeddedCodes: [],
                    id: 'ts',
                    languageId: 'typescript',
                    mappings,
                    snapshot: new ScriptSnapshot(transformedModule.transformedContents),
                    directives: transformedModule.directives,
                },
            ];
        }
        else {
            // Null transformed module means there's no embedded HBS templates,
            // so just return a full "no-op" mapping from source to transformed.
            this.embeddedCodes = [
                {
                    embeddedCodes: [],
                    id: 'ts',
                    languageId: 'typescript',
                    mappings: [
                        {
                            // Hacked hardwired values for now.
                            sourceOffsets: [0],
                            generatedOffsets: [0],
                            lengths: [length],
                            // This controls which language service features are enabled within this root virtual code.
                            // Since this is just .ts, we want all of them enabled.
                            data: {
                                completion: true,
                                format: false,
                                navigation: true,
                                semantic: true,
                                structure: true,
                                verification: true,
                            },
                        },
                    ],
                    snapshot: new ScriptSnapshot(contents),
                    directives: [],
                },
            ];
        }
    }
}
//# sourceMappingURL=gts-virtual-code.js.map