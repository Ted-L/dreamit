{"version":3,"file":"index.js","sources":["../../lib/generation/util.ts","../../lib/generation/printer.ts","../../lib/generation/print.ts","../../lib/keywords.ts","../../../debug-util/lib/present.ts","../../lib/source/location.ts","../../lib/source/loc/kinds.ts","../../lib/source/loc/match.ts","../../lib/source/slice.ts","../../lib/source/loc/span.ts","../../lib/source/loc/offset.ts","../../lib/source/source.ts","../../lib/source/span-list.ts","../../lib/syntax-error.ts","../../lib/v1/visitor-keys.ts","../../lib/traversal/errors.ts","../../lib/traversal/path.ts","../../lib/traversal/traverse.ts","../../lib/traversal/walker.ts","../../lib/utils.ts","../../lib/v1/public-builders.ts","../../lib/v1/parser-builders.ts","../../lib/v1/legacy-interop.ts","../../lib/parser.ts","../../lib/parser/handlebars-node-visitors.ts","../../lib/parser/tokenizer-event-handlers.ts","../../lib/get-template-locals.ts","../../lib/v2/objects/node.ts","../../lib/v2/objects/args.ts","../../lib/v2/objects/attr-block.ts","../../lib/v2/objects/content.ts","../../lib/v2/objects/expr.ts","../../lib/v2/objects/internal-node.ts","../../lib/v2/objects/refs.ts","../../lib/v2/objects/constants.ts","../../lib/v2/objects/resolution.ts","../../lib/symbol-table.ts","../../lib/v2/builders.ts","../../lib/v2/loose-resolution.ts","../../lib/v2/normalize.ts"],"sourcesContent":["import type * as ASTv1 from '../v1/api';\n\nconst Char = {\n  NBSP: 0xa0,\n  QUOT: 0x22,\n  LT: 0x3c,\n  GT: 0x3e,\n  AMP: 0x26,\n};\n\nconst ATTR_VALUE_REGEX_TEST = /[\"&\\xA0]/u;\nconst ATTR_VALUE_REGEX_REPLACE = new RegExp(ATTR_VALUE_REGEX_TEST.source, 'gu');\n\nconst TEXT_REGEX_TEST = /[&<>\\xA0]/u;\nconst TEXT_REGEX_REPLACE = new RegExp(TEXT_REGEX_TEST.source, 'gu');\n\nfunction attrValueReplacer(char: string): string {\n  switch (char.charCodeAt(0)) {\n    case Char.NBSP:\n      return '&nbsp;';\n    case Char.QUOT:\n      return '&quot;';\n    case Char.AMP:\n      return '&amp;';\n    default:\n      return char;\n  }\n}\n\nfunction textReplacer(char: string): string {\n  switch (char.charCodeAt(0)) {\n    case Char.NBSP:\n      return '&nbsp;';\n    case Char.AMP:\n      return '&amp;';\n    case Char.LT:\n      return '&lt;';\n    case Char.GT:\n      return '&gt;';\n    default:\n      return char;\n  }\n}\n\nexport function escapeAttrValue(attrValue: string): string {\n  if (ATTR_VALUE_REGEX_TEST.test(attrValue)) {\n    return attrValue.replace(ATTR_VALUE_REGEX_REPLACE, attrValueReplacer);\n  }\n  return attrValue;\n}\n\nexport function escapeText(text: string): string {\n  if (TEXT_REGEX_TEST.test(text)) {\n    return text.replace(TEXT_REGEX_REPLACE, textReplacer);\n  }\n  return text;\n}\n\nexport function sortByLoc(a: ASTv1.Node, b: ASTv1.Node): -1 | 0 | 1 {\n  // If either is invisible, don't try to order them\n  if (a.loc.isInvisible || b.loc.isInvisible) {\n    return 0;\n  }\n\n  if (a.loc.startPosition.line < b.loc.startPosition.line) {\n    return -1;\n  }\n\n  if (\n    a.loc.startPosition.line === b.loc.startPosition.line &&\n    a.loc.startPosition.column < b.loc.startPosition.column\n  ) {\n    return -1;\n  }\n\n  if (\n    a.loc.startPosition.line === b.loc.startPosition.line &&\n    a.loc.startPosition.column === b.loc.startPosition.column\n  ) {\n    return 0;\n  }\n\n  return 1;\n}\n","import type * as ASTv1 from '../v1/api';\n\nimport { escapeAttrValue, escapeText, sortByLoc } from './util';\n\nexport const voidMap = new Set([\n  'area',\n  'base',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr',\n]);\n\nexport function getVoidTags() {\n  return [...voidMap];\n}\n\nconst NON_WHITESPACE = /^\\S/u;\n\nexport interface PrinterOptions {\n  entityEncoding: ASTv1.EntityEncodingState;\n\n  /**\n   * Used to override the mechanism of printing a given AST.Node.\n   *\n   * This will generally only be useful to source -> source codemods\n   * where you would like to specialize/override the way a given node is\n   * printed (e.g. you would like to preserve as much of the original\n   * formatting as possible).\n   *\n   * When the provided override returns undefined, the default built in printing\n   * will be done for the AST.Node.\n   *\n   * @param ast the ast node to be printed\n   * @param options the options specified during the print() invocation\n   */\n  override?(ast: ASTv1.Node, options: PrinterOptions): void | string;\n}\n\n/**\n * Examples when true:\n *  - link\n *  - liNK\n *\n * Examples when false:\n *  - Link (component)\n */\nexport function isVoidTag(tag: string): boolean {\n  return voidMap.has(tag.toLowerCase()) && tag[0]?.toLowerCase() === tag[0];\n}\n\nexport default class Printer {\n  private buffer = '';\n  private options: PrinterOptions;\n\n  constructor(options: PrinterOptions) {\n    this.options = options;\n  }\n\n  /*\n    This is used by _all_ methods on this Printer class that add to `this.buffer`,\n    it allows consumers of the printer to use alternate string representations for\n    a given node.\n\n    The primary use case for this are things like source -> source codemod utilities.\n    For example, ember-template-recast attempts to always preserve the original string\n    formatting in each AST node if no modifications are made to it.\n  */\n  handledByOverride(node: ASTv1.Node, ensureLeadingWhitespace = false): boolean {\n    if (this.options.override !== undefined) {\n      let result = this.options.override(node, this.options);\n      if (typeof result === 'string') {\n        if (ensureLeadingWhitespace && NON_WHITESPACE.test(result)) {\n          result = ` ${result}`;\n        }\n\n        this.buffer += result;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  Node(node: ASTv1.Node): void {\n    switch (node.type) {\n      case 'MustacheStatement':\n      case 'BlockStatement':\n      case 'MustacheCommentStatement':\n      case 'CommentStatement':\n      case 'TextNode':\n      case 'ElementNode':\n      case 'AttrNode':\n      case 'Block':\n      case 'Template':\n        return this.TopLevelStatement(node);\n      case 'StringLiteral':\n      case 'BooleanLiteral':\n      case 'NumberLiteral':\n      case 'UndefinedLiteral':\n      case 'NullLiteral':\n      case 'PathExpression':\n      case 'SubExpression':\n        return this.Expression(node);\n      case 'ConcatStatement':\n        // should have an AttrNode parent\n        return this.ConcatStatement(node);\n      case 'Hash':\n        return this.Hash(node);\n      case 'HashPair':\n        return this.HashPair(node);\n      case 'ElementModifierStatement':\n        return this.ElementModifierStatement(node);\n    }\n  }\n\n  Expression(expression: ASTv1.Expression): void {\n    switch (expression.type) {\n      case 'StringLiteral':\n      case 'BooleanLiteral':\n      case 'NumberLiteral':\n      case 'UndefinedLiteral':\n      case 'NullLiteral':\n        return this.Literal(expression);\n      case 'PathExpression':\n        return this.PathExpression(expression);\n      case 'SubExpression':\n        return this.SubExpression(expression);\n    }\n  }\n\n  Literal(literal: ASTv1.Literal): void {\n    switch (literal.type) {\n      case 'StringLiteral':\n        return this.StringLiteral(literal);\n      case 'BooleanLiteral':\n        return this.BooleanLiteral(literal);\n      case 'NumberLiteral':\n        return this.NumberLiteral(literal);\n      case 'UndefinedLiteral':\n        return this.UndefinedLiteral(literal);\n      case 'NullLiteral':\n        return this.NullLiteral(literal);\n    }\n  }\n\n  TopLevelStatement(statement: ASTv1.TopLevelStatement | ASTv1.Template | ASTv1.AttrNode): void {\n    switch (statement.type) {\n      case 'MustacheStatement':\n        return this.MustacheStatement(statement);\n      case 'BlockStatement':\n        return this.BlockStatement(statement);\n      case 'MustacheCommentStatement':\n        return this.MustacheCommentStatement(statement);\n      case 'CommentStatement':\n        return this.CommentStatement(statement);\n      case 'TextNode':\n        return this.TextNode(statement);\n      case 'ElementNode':\n        return this.ElementNode(statement);\n      case 'Block':\n        return this.Block(statement);\n      case 'Template':\n        return this.Template(statement);\n      case 'AttrNode':\n        // should have element\n        return this.AttrNode(statement);\n    }\n  }\n\n  Template(template: ASTv1.Template): void {\n    this.TopLevelStatements(template.body);\n  }\n\n  Block(block: ASTv1.Block): void {\n    /*\n      When processing a template like:\n\n      ```hbs\n      {{#if whatever}}\n        whatever\n      {{else if somethingElse}}\n        something else\n      {{else}}\n        fallback\n      {{/if}}\n      ```\n\n      The AST still _effectively_ looks like:\n\n      ```hbs\n      {{#if whatever}}\n        whatever\n      {{else}}{{#if somethingElse}}\n        something else\n      {{else}}\n        fallback\n      {{/if}}{{/if}}\n      ```\n\n      The only way we can tell if that is the case is by checking for\n      `block.chained`, but unfortunately when the actual statements are\n      processed the `block.body[0]` node (which will always be a\n      `BlockStatement`) has no clue that its ancestor `Block` node was\n      chained.\n\n      This \"forwards\" the `chained` setting so that we can check\n      it later when processing the `BlockStatement`.\n    */\n    if (block.chained) {\n      let firstChild = block.body[0] as ASTv1.BlockStatement;\n      firstChild.chained = true;\n    }\n\n    if (this.handledByOverride(block)) {\n      return;\n    }\n\n    this.TopLevelStatements(block.body);\n  }\n\n  TopLevelStatements(statements: ASTv1.TopLevelStatement[]): void {\n    statements.forEach((statement) => this.TopLevelStatement(statement));\n  }\n\n  ElementNode(el: ASTv1.ElementNode): void {\n    if (this.handledByOverride(el)) {\n      return;\n    }\n\n    this.OpenElementNode(el);\n    this.TopLevelStatements(el.children);\n    this.CloseElementNode(el);\n  }\n\n  OpenElementNode(el: ASTv1.ElementNode): void {\n    this.buffer += `<${el.tag}`;\n    const parts = [...el.attributes, ...el.modifiers, ...el.comments].sort(sortByLoc);\n\n    for (const part of parts) {\n      this.buffer += ' ';\n      switch (part.type) {\n        case 'AttrNode':\n          this.AttrNode(part);\n          break;\n        case 'ElementModifierStatement':\n          this.ElementModifierStatement(part);\n          break;\n        case 'MustacheCommentStatement':\n          this.MustacheCommentStatement(part);\n          break;\n      }\n    }\n    if (el.blockParams.length) {\n      this.BlockParams(el.blockParams);\n    }\n    if (el.selfClosing) {\n      this.buffer += ' /';\n    }\n    this.buffer += '>';\n  }\n\n  CloseElementNode(el: ASTv1.ElementNode): void {\n    if (el.selfClosing || isVoidTag(el.tag)) {\n      return;\n    }\n    this.buffer += `</${el.tag}>`;\n  }\n\n  AttrNode(attr: ASTv1.AttrNode): void {\n    if (this.handledByOverride(attr)) {\n      return;\n    }\n\n    let { name, value } = attr;\n\n    this.buffer += name;\n    if (value.type !== 'TextNode' || value.chars.length > 0) {\n      this.buffer += '=';\n      this.AttrNodeValue(value);\n    }\n  }\n\n  AttrNodeValue(value: ASTv1.AttrNode['value']): void {\n    if (value.type === 'TextNode') {\n      this.buffer += '\"';\n      this.TextNode(value, true);\n      this.buffer += '\"';\n    } else {\n      this.Node(value);\n    }\n  }\n\n  TextNode(text: ASTv1.TextNode, isAttr?: boolean): void {\n    if (this.handledByOverride(text)) {\n      return;\n    }\n\n    if (this.options.entityEncoding === 'raw') {\n      this.buffer += text.chars;\n    } else if (isAttr) {\n      this.buffer += escapeAttrValue(text.chars);\n    } else {\n      this.buffer += escapeText(text.chars);\n    }\n  }\n\n  MustacheStatement(mustache: ASTv1.MustacheStatement): void {\n    if (this.handledByOverride(mustache)) {\n      return;\n    }\n\n    this.buffer += mustache.trusting ? '{{{' : '{{';\n\n    if (mustache.strip.open) {\n      this.buffer += '~';\n    }\n\n    this.Expression(mustache.path);\n    this.Params(mustache.params);\n    this.Hash(mustache.hash);\n\n    if (mustache.strip.close) {\n      this.buffer += '~';\n    }\n\n    this.buffer += mustache.trusting ? '}}}' : '}}';\n  }\n\n  BlockStatement(block: ASTv1.BlockStatement): void {\n    if (this.handledByOverride(block)) {\n      return;\n    }\n\n    if (block.chained) {\n      this.buffer += block.inverseStrip.open ? '{{~' : '{{';\n      this.buffer += 'else ';\n    } else {\n      this.buffer += block.openStrip.open ? '{{~#' : '{{#';\n    }\n\n    this.Expression(block.path);\n    this.Params(block.params);\n    this.Hash(block.hash);\n    if (block.program.blockParams.length) {\n      this.BlockParams(block.program.blockParams);\n    }\n\n    if (block.chained) {\n      this.buffer += block.inverseStrip.close ? '~}}' : '}}';\n    } else {\n      this.buffer += block.openStrip.close ? '~}}' : '}}';\n    }\n\n    this.Block(block.program);\n\n    if (block.inverse) {\n      if (!block.inverse.chained) {\n        this.buffer += block.inverseStrip.open ? '{{~' : '{{';\n        this.buffer += 'else';\n        this.buffer += block.inverseStrip.close ? '~}}' : '}}';\n      }\n\n      this.Block(block.inverse);\n    }\n\n    if (!block.chained) {\n      this.buffer += block.closeStrip.open ? '{{~/' : '{{/';\n      this.Expression(block.path);\n      this.buffer += block.closeStrip.close ? '~}}' : '}}';\n    }\n  }\n\n  BlockParams(blockParams: string[]): void {\n    this.buffer += ` as |${blockParams.join(' ')}|`;\n  }\n\n  ConcatStatement(concat: ASTv1.ConcatStatement): void {\n    if (this.handledByOverride(concat)) {\n      return;\n    }\n\n    this.buffer += '\"';\n    concat.parts.forEach((part) => {\n      if (part.type === 'TextNode') {\n        this.TextNode(part, true);\n      } else {\n        this.Node(part);\n      }\n    });\n    this.buffer += '\"';\n  }\n\n  MustacheCommentStatement(comment: ASTv1.MustacheCommentStatement): void {\n    if (this.handledByOverride(comment)) {\n      return;\n    }\n\n    this.buffer += `{{!--${comment.value}--}}`;\n  }\n\n  ElementModifierStatement(mod: ASTv1.ElementModifierStatement): void {\n    if (this.handledByOverride(mod)) {\n      return;\n    }\n\n    this.buffer += '{{';\n    this.Expression(mod.path);\n    this.Params(mod.params);\n    this.Hash(mod.hash);\n    this.buffer += '}}';\n  }\n\n  CommentStatement(comment: ASTv1.CommentStatement): void {\n    if (this.handledByOverride(comment)) {\n      return;\n    }\n\n    this.buffer += `<!--${comment.value}-->`;\n  }\n\n  PathExpression(path: ASTv1.PathExpression): void {\n    if (this.handledByOverride(path)) {\n      return;\n    }\n\n    this.buffer += path.original;\n  }\n\n  SubExpression(sexp: ASTv1.SubExpression): void {\n    if (this.handledByOverride(sexp)) {\n      return;\n    }\n\n    this.buffer += '(';\n    this.Expression(sexp.path);\n    this.Params(sexp.params);\n    this.Hash(sexp.hash);\n    this.buffer += ')';\n  }\n\n  Params(params: ASTv1.Expression[]): void {\n    // TODO: implement a top level Params AST node (just like the Hash object)\n    // so that this can also be overridden\n    if (params.length) {\n      params.forEach((param) => {\n        this.buffer += ' ';\n        this.Expression(param);\n      });\n    }\n  }\n\n  Hash(hash: ASTv1.Hash): void {\n    if (this.handledByOverride(hash, true)) {\n      return;\n    }\n\n    hash.pairs.forEach((pair) => {\n      this.buffer += ' ';\n      this.HashPair(pair);\n    });\n  }\n\n  HashPair(pair: ASTv1.HashPair): void {\n    if (this.handledByOverride(pair)) {\n      return;\n    }\n\n    this.buffer += pair.key;\n    this.buffer += '=';\n    this.Node(pair.value);\n  }\n\n  StringLiteral(str: ASTv1.StringLiteral): void {\n    if (this.handledByOverride(str)) {\n      return;\n    }\n\n    this.buffer += JSON.stringify(str.value);\n  }\n\n  BooleanLiteral(bool: ASTv1.BooleanLiteral): void {\n    if (this.handledByOverride(bool)) {\n      return;\n    }\n\n    this.buffer += bool.value;\n  }\n\n  NumberLiteral(number: ASTv1.NumberLiteral): void {\n    if (this.handledByOverride(number)) {\n      return;\n    }\n\n    this.buffer += number.value;\n  }\n\n  UndefinedLiteral(node: ASTv1.UndefinedLiteral): void {\n    if (this.handledByOverride(node)) {\n      return;\n    }\n\n    this.buffer += 'undefined';\n  }\n\n  NullLiteral(node: ASTv1.NullLiteral): void {\n    if (this.handledByOverride(node)) {\n      return;\n    }\n\n    this.buffer += 'null';\n  }\n\n  print(node: ASTv1.Node): string {\n    let { options } = this;\n\n    if (options.override) {\n      let result = options.override(node, options);\n\n      if (result !== undefined) {\n        return result;\n      }\n    }\n\n    this.buffer = '';\n    this.Node(node);\n    return this.buffer;\n  }\n}\n","import type * as ASTv1 from '../v1/api';\nimport type { PrinterOptions } from './printer';\n\nimport Printer from './printer';\n\nexport default function build(\n  ast: ASTv1.Node,\n  options: PrinterOptions = { entityEncoding: 'transformed' }\n): string {\n  if (!ast) {\n    return '';\n  }\n\n  let printer = new Printer(options);\n  return printer.print(ast);\n}\n","export type Keywords = keyof typeof KEYWORDS_TYPES;\nexport type KeywordType = 'Call' | 'Modifier' | 'Append' | 'Block';\n\nexport function isKeyword(word: string): word is Keywords;\nexport function isKeyword(word: string, type: KeywordType): boolean;\nexport function isKeyword(word: string, type?: KeywordType): boolean {\n  if (word in KEYWORDS_TYPES) {\n    if (type === undefined) {\n      return true;\n    } else {\n      let types = KEYWORDS_TYPES[word as Keywords];\n      // This seems like a TypeScript bug – it inferred types as never[]?\n      return types.includes(type as never);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n * This includes the full list of keywords currently in use in the template\n * language, and where their valid usages are.\n */\nexport const KEYWORDS_TYPES = {\n  action: ['Call', 'Modifier'],\n  component: ['Call', 'Append', 'Block'],\n  debugger: ['Append'],\n  'each-in': ['Block'],\n  each: ['Block'],\n  'has-block-params': ['Call', 'Append'],\n  'has-block': ['Call', 'Append'],\n  helper: ['Call', 'Append'],\n  if: ['Call', 'Append', 'Block'],\n  'in-element': ['Block'],\n  let: ['Block'],\n  log: ['Call', 'Append'],\n  modifier: ['Call', 'Modifier'],\n  mount: ['Append'],\n  mut: ['Call', 'Append'],\n  outlet: ['Append'],\n  readonly: ['Call', 'Append'],\n  unbound: ['Call', 'Append'],\n  unless: ['Call', 'Append', 'Block'],\n  yield: ['Append'],\n} satisfies Record<string, readonly KeywordType[]>;\n","import type { Nullable, Present, PresentArray } from '@glimmer/interfaces';\nimport { LOCAL_DEBUG } from '@glimmer/local-debug-flags';\n\nexport function isPresent<T>(value: T): value is Present<T> {\n  return value !== null && value !== undefined;\n}\n\nexport function assertPresent<T extends string>(value: T): asserts value is Present<T>;\nexport function assertPresent<T>(value: T, message: string): asserts value is Present<T>;\nexport function assertPresent<T>(value: T, message?: string): asserts value is Present<T> {\n  if (LOCAL_DEBUG && !isPresent(value)) {\n    throw new Error(`Expected present, got ${typeof value === 'string' ? value : message!}`);\n  }\n}\n\nexport function isPresentArray<T>(list: readonly T[]): list is PresentArray<T> {\n  return list.length > 0;\n}\n\nexport function ifPresent<T, U, V>(\n  list: T[],\n  ifPresent: (input: PresentArray<T>) => U,\n  otherwise: () => V\n): U | V {\n  if (isPresentArray(list)) {\n    return ifPresent(list);\n  } else {\n    return otherwise();\n  }\n}\n\nexport function arrayToOption<T>(list: T[]): Nullable<PresentArray<T>> {\n  if (isPresentArray(list)) {\n    return list;\n  } else {\n    return null;\n  }\n}\n\nexport function assertPresentArray<T>(\n  list: T[],\n  message = `unexpected empty list`\n): asserts list is PresentArray<T> {\n  if (LOCAL_DEBUG && !isPresentArray(list)) {\n    throw new Error(message);\n  }\n}\n\nexport function asPresentArray<T>(list: T[], message = `unexpected empty list`): PresentArray<T> {\n  assertPresentArray(list, message);\n  return list;\n}\n\nexport function getLast<T>(list: PresentArray<T>): T;\nexport function getLast<T>(list: T[]): T | undefined;\nexport function getLast<T>(list: T[]): T | undefined {\n  return list.length === 0 ? undefined : (list[list.length - 1] as T);\n}\n\nexport function getFirst<T>(list: PresentArray<T>): T;\nexport function getFirst<T>(list: T[]): T | undefined;\nexport function getFirst<T>(list: T[]): T | undefined {\n  return list.length === 0 ? undefined : (list[0] as T);\n}\n\nexport function mapPresentArray<T, U>(\n  list: PresentArray<T>,\n  mapper: (input: T) => U\n): PresentArray<U>;\nexport function mapPresentArray<T, U>(\n  list: PresentArray<T> | null,\n  mapper: (input: T) => U\n): PresentArray<U> | null;\nexport function mapPresentArray<T, U>(\n  list: PresentArray<T> | null,\n  mapper: (input: T) => U\n): PresentArray<U> | null {\n  if (list === null) {\n    return null;\n  }\n  let out: U[] = [];\n\n  for (let item of list) {\n    out.push(mapper(item));\n  }\n\n  return out as PresentArray<U>;\n}\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { isPresentArray } from '@glimmer/debug-util';\n\nimport type { SourceSpan } from './span';\n\nexport interface SourceLocation {\n  start: SourcePosition;\n  end: SourcePosition;\n}\n\nexport interface SourcePosition {\n  /** >= 1 */\n  line: number;\n  /** >= 0 */\n  column: number;\n}\n\nexport const UNKNOWN_POSITION = Object.freeze({\n  line: 1,\n  column: 0,\n} as const);\n\nexport const SYNTHETIC_LOCATION = Object.freeze({\n  source: '(synthetic)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\n/** @deprecated */\nexport const SYNTHETIC = SYNTHETIC_LOCATION;\n\nexport const TEMPORARY_LOCATION = Object.freeze({\n  source: '(temporary)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\nexport const NON_EXISTENT_LOCATION = Object.freeze({\n  source: '(nonexistent)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\nexport const BROKEN_LOCATION = Object.freeze({\n  source: '(broken)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\nexport type LocatedWithSpan = { offsets: SourceSpan };\nexport type LocatedWithOptionalSpan = { offsets: SourceSpan | null };\n\nexport type LocatedWithPositions = { loc: SourceLocation };\nexport type LocatedWithOptionalPositions = { loc?: SourceLocation };\n\nexport function isLocatedWithPositionsArray(\n  location: LocatedWithOptionalPositions[]\n): location is PresentArray<LocatedWithPositions> {\n  return isPresentArray(location) && location.every(isLocatedWithPositions);\n}\n\nexport function isLocatedWithPositions(\n  location: LocatedWithOptionalPositions\n): location is LocatedWithPositions {\n  return location.loc !== undefined;\n}\n\nexport type HasSourceLocation =\n  | SourceLocation\n  | LocatedWithPositions\n  | PresentArray<LocatedWithPositions>;\n\nexport type MaybeHasSourceLocation =\n  | null\n  | LocatedWithOptionalPositions\n  | LocatedWithOptionalPositions[];\n","/**\n * We have already computed the character position of this offset or span.\n */\nexport type CharOffsetKind = 'CharPosition';\nexport const CHAR_OFFSET_KIND: CharOffsetKind = 'CharPosition';\n/**\n * This offset or span was instantiated with a Handlebars SourcePosition or SourceLocation. Its\n * character position will be computed on demand.\n */\nexport type HbsPositionKind = 'HbsPosition';\nexport const HBS_POSITION_KIND: HbsPositionKind = 'HbsPosition';\n/**\n * for (rare) situations where a node is created but there was no source location (e.g. the name\n * \"default\" in default blocks when the word \"default\" never appeared in source). This is used\n * by the internals when there is a legitimate reason for the internals to synthesize a node\n * with no location.\n */\nexport type InternalSyntheticKind = 'InternalsSynthetic';\nexport const INTERNAL_SYNTHETIC_KIND: InternalSyntheticKind = 'InternalsSynthetic';\n\n/**\n * For situations where a node represents zero parts of the source (for example, empty arguments).\n * In general, we attempt to assign these nodes *some* position (empty arguments can be\n * positioned immediately after the callee), but it's not always possible\n */\nexport type NonExistentKind = 'NonExistent';\nexport const NON_EXISTENT_KIND: NonExistentKind = 'NonExistent';\n\n/**\n * For situations where a source location was expected, but it didn't correspond to the node in\n * the source. This happens if a plugin creates broken locations.\n */\nexport type BrokenKind = 'Broken';\nexport const BROKEN_KIND: BrokenKind = 'Broken';\n\nexport type OffsetKind = CharOffsetKind | HbsPositionKind | InvisibleKind;\n\n/**\n * These kinds  describe spans that don't have a concrete location in the original source.\n */\nexport type InvisibleKind = BrokenKind | InternalSyntheticKind | NonExistentKind;\n\nexport function isInvisible(kind: OffsetKind): kind is InvisibleKind {\n  return kind !== CHAR_OFFSET_KIND && kind !== HBS_POSITION_KIND;\n}\n","import { assert, isPresentArray } from '@glimmer/debug-util';\n\nimport type { CharOffsetKind, HbsPositionKind, OffsetKind } from './kinds';\nimport type { CharPosition, HbsPosition, InvisiblePosition, PositionData } from './offset';\n\nimport { BROKEN_KIND, INTERNAL_SYNTHETIC_KIND, NON_EXISTENT_KIND } from './kinds';\n\n/**\n * This file implements the DSL used by span and offset in places where they need to exhaustively\n * consider all combinations of states (Handlebars offsets, character offsets and invisible/broken\n * offsets).\n *\n * It's probably overkill, but it makes the code that uses it clear. It could be refactored or\n * removed.\n */\n\nexport const MatchAny = 'MATCH_ANY';\nexport type MatchAny = 'MATCH_ANY';\n\ntype Matches =\n  | 'Char,Hbs'\n  | 'Hbs,Char'\n  | 'Hbs,Hbs'\n  | 'Char,Char'\n  | 'Invisible,Any'\n  | 'Any,Invisible';\n\nexport const IsInvisible = 'IS_INVISIBLE';\nexport type IsInvisible = 'IS_INVISIBLE';\n\ntype Pattern = OffsetKind | IsInvisible | MatchAny;\n\nclass WhenList<Out> {\n  _whens: When<Out>[];\n\n  constructor(whens: When<Out>[]) {\n    this._whens = whens;\n  }\n\n  first(kind: OffsetKind): Out | null {\n    for (const when of this._whens) {\n      const value = when.match(kind);\n      if (isPresentArray(value)) {\n        return value[0];\n      }\n    }\n\n    return null;\n  }\n}\n\nclass When<Out> {\n  _map: Map<Pattern, Out> = new Map();\n\n  get(pattern: Pattern, or: () => Out): Out {\n    let value = this._map.get(pattern);\n\n    if (value) {\n      return value;\n    }\n\n    value = or();\n\n    this._map.set(pattern, value);\n\n    return value;\n  }\n\n  add(pattern: Pattern, out: Out): void {\n    this._map.set(pattern, out);\n  }\n\n  match(kind: OffsetKind): Out[] {\n    const pattern = patternFor(kind);\n\n    const out: Out[] = [];\n\n    const exact = this._map.get(pattern);\n    const fallback = this._map.get(MatchAny);\n\n    if (exact) {\n      out.push(exact);\n    }\n\n    if (fallback) {\n      out.push(fallback);\n    }\n\n    return out;\n  }\n}\n\ntype ExhaustiveCheck<Out, In extends Matches, Removed extends Matches> = Exclude<\n  In,\n  Removed\n> extends never\n  ? ExhaustiveMatcher<Out>\n  : Matcher<Out, Exclude<In, Removed>>;\n\nexport type MatchFn<Out> = (left: PositionData, right: PositionData) => Out;\n\ninterface ExhaustiveMatcher<Out> {\n  validate(): MatchFn<Out>;\n}\n\nexport function match<Out>(callback: (m: Matcher<Out>) => ExhaustiveMatcher<Out>): MatchFn<Out> {\n  return callback(new Matcher()).validate();\n}\n\nclass Matcher<Out, M extends Matches = Matches> {\n  _whens: When<When<(left: PositionData, right: PositionData) => Out>> = new When();\n\n  /**\n   * You didn't exhaustively match all possibilities.\n   */\n  protected validate(): MatchFn<Out> {\n    return (left, right) => this.matchFor(left.kind, right.kind)(left, right);\n  }\n\n  private matchFor(\n    left: OffsetKind,\n    right: OffsetKind\n  ): (left: PositionData, right: PositionData) => Out {\n    const nesteds = this._whens.match(left);\n\n    assert(\n      isPresentArray(nesteds),\n      `no match defined for (${left}, ${right}) and no AnyMatch defined either`\n    );\n\n    const callback = new WhenList(nesteds).first(right);\n\n    assert(\n      callback !== null,\n      `no match defined for (${left}, ${right}) and no AnyMatch defined either`\n    );\n\n    return callback;\n  }\n\n  // This big block is the bulk of the heavy lifting in this file. It facilitates exhaustiveness\n  // checking so that matchers can ensure they've actually covered all the cases (and TypeScript\n  // will treat it as an exhaustive match).\n  when(\n    left: CharOffsetKind,\n    right: HbsPositionKind,\n    callback: (left: CharPosition, right: HbsPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Char,Hbs'>;\n  when(\n    left: HbsPositionKind,\n    right: CharOffsetKind,\n    callback: (left: HbsPosition, right: CharPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Hbs,Char'>;\n  when(\n    left: HbsPositionKind,\n    right: HbsPositionKind,\n    callback: (left: HbsPosition, right: HbsPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Hbs,Hbs'>;\n  when(\n    left: CharOffsetKind,\n    right: CharOffsetKind,\n    callback: (left: CharPosition, right: CharPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Char,Char'>;\n  when(\n    left: IsInvisible,\n    right: MatchAny,\n    callback: (left: InvisiblePosition, right: PositionData) => Out\n  ): Matcher<Out, Exclude<M, 'Invisible,Any'>>;\n  when(\n    left: MatchAny,\n    right: IsInvisible,\n    callback: (left: PositionData, right: InvisiblePosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Any,Invisible'>;\n  when(\n    left: MatchAny,\n    right: MatchAny,\n    callback: (left: PositionData, right: PositionData) => Out\n  ): ExhaustiveMatcher<Out>;\n  when(\n    left: Pattern,\n    right: Pattern,\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback: (left: any, right: any) => Out\n  ): Matcher<Out, Matches> | ExhaustiveMatcher<Out> {\n    this._whens.get(left, () => new When()).add(right, callback);\n\n    return this;\n  }\n}\n\nfunction patternFor(kind: OffsetKind): Pattern {\n  switch (kind) {\n    case BROKEN_KIND:\n    case INTERNAL_SYNTHETIC_KIND:\n    case NON_EXISTENT_KIND:\n      return IsInvisible;\n    default:\n      return kind;\n  }\n}\n","import * as src from './api';\n\nexport type SerializedSourceSlice<Chars extends string = string> = [\n  chars: Chars,\n  span: src.SerializedSourceSpan,\n];\n\nexport class SourceSlice<Chars extends string = string> {\n  static synthetic<S extends string>(chars: S): SourceSlice<S> {\n    let offsets = src.SourceSpan.synthetic(chars);\n    return new SourceSlice({ loc: offsets, chars: chars });\n  }\n\n  static load(source: src.Source, slice: SerializedSourceSlice): SourceSlice {\n    return new SourceSlice({\n      loc: src.SourceSpan.load(source, slice[1]),\n      chars: slice[0],\n    });\n  }\n\n  readonly chars: Chars;\n  readonly loc: src.SourceSpan;\n\n  constructor(options: { loc: src.SourceSpan; chars: Chars }) {\n    this.loc = options.loc;\n    this.chars = options.chars;\n  }\n\n  getString(): string {\n    return this.chars;\n  }\n\n  serialize(): SerializedSourceSlice<Chars> {\n    return [this.chars, this.loc.serialize()];\n  }\n}\n","import { LOCAL_DEBUG } from '@glimmer/local-debug-flags';\nimport { assertNever } from '@glimmer/util';\n\nimport type { SourceLocation, SourcePosition } from '../location';\nimport type { Source } from '../source';\nimport type { BrokenKind, InvisibleKind, NonExistentKind, OffsetKind } from './kinds';\nimport type { MatchFn } from './match';\nimport type { AnyPosition, SourceOffset } from './offset';\n\nimport { BROKEN_LOCATION, NON_EXISTENT_LOCATION } from '../location';\nimport { SourceSlice } from '../slice';\nimport {\n  BROKEN_KIND,\n  CHAR_OFFSET_KIND,\n  HBS_POSITION_KIND,\n  INTERNAL_SYNTHETIC_KIND,\n  isInvisible,\n  NON_EXISTENT_KIND,\n} from './kinds';\nimport { IsInvisible, match, MatchAny } from './match';\nimport { BROKEN, CharPosition, HbsPosition, InvisiblePosition } from './offset';\n\n/**\n * All spans have these details in common.\n */\ninterface SpanData {\n  readonly kind: OffsetKind;\n\n  /**\n   * Convert this span into a string. If the span is broken, return `''`.\n   */\n  asString(): string;\n\n  /**\n   * Gets the module the span was located in.\n   */\n  getModule(): string;\n\n  /**\n   * Get the starting position for this span. Try to avoid creating new position objects, as they\n   * cache computations.\n   */\n  getStart(): AnyPosition;\n\n  /**\n   * Get the ending position for this span. Try to avoid creating new position objects, as they\n   * cache computations.\n   */\n  getEnd(): AnyPosition;\n\n  /**\n   * Compute the `SourceLocation` for this span, returned as an instance of `HbsSpan`.\n   */\n  toHbsSpan(): HbsSpan | null;\n\n  /**\n   * For compatibility, whenever the `start` or `end` of a {@see SourceOffset} changes, spans are\n   * notified of the change so they can update themselves. This shouldn't happen outside of AST\n   * plugins.\n   */\n  locDidUpdate(changes: { start?: SourcePosition; end?: SourcePosition }): void;\n\n  /**\n   * Serialize into a {@see SerializedSourceSpan}, which is compact and designed for readability in\n   * context like AST Explorer. If you need a {@see SourceLocation}, use {@see toJSON}.\n   */\n  serialize(): SerializedSourceSpan;\n}\n\n/**\n * A `SourceSpan` object represents a span of characters inside of a template source.\n *\n * There are three kinds of `SourceSpan` objects:\n *\n * - `ConcreteSourceSpan`, which contains byte offsets\n * - `LazySourceSpan`, which contains `SourceLocation`s from the Handlebars AST, which can be\n *   converted to byte offsets on demand.\n * - `InvisibleSourceSpan`, which represent source strings that aren't present in the source,\n *   because:\n *     - they were created synthetically\n *     - their location is nonsensical (the span is broken)\n *     - they represent nothing in the source (this currently happens only when a bug in the\n *       upstream Handlebars parser fails to assign a location to empty blocks)\n *\n * At a high level, all `SourceSpan` objects provide:\n *\n * - byte offsets\n * - source in column and line format\n *\n * And you can do these operations on `SourceSpan`s:\n *\n * - collapse it to a `SourceSpan` representing its starting or ending position\n * - slice out some characters, optionally skipping some characters at the beginning or end\n * - create a new `SourceSpan` with a different starting or ending offset\n *\n * All SourceSpan objects implement `SourceLocation`, for compatibility. All SourceSpan\n * objects have a `toJSON` that emits `SourceLocation`, also for compatibility.\n *\n * For compatibility, subclasses of `AbstractSourceSpan` must implement `locDidUpdate`, which\n * happens when an AST plugin attempts to modify the `start` or `end` of a span directly.\n *\n * The goal is to avoid creating any problems for use-cases like AST Explorer.\n */\nexport class SourceSpan implements SourceLocation {\n  static get NON_EXISTENT(): SourceSpan {\n    return new InvisibleSpan(NON_EXISTENT_KIND, NON_EXISTENT_LOCATION).wrap();\n  }\n\n  static load(source: Source, serialized: SerializedSourceSpan): SourceSpan {\n    if (typeof serialized === 'number') {\n      return SourceSpan.forCharPositions(source, serialized, serialized);\n    } else if (typeof serialized === 'string') {\n      return SourceSpan.synthetic(serialized);\n    } else if (Array.isArray(serialized)) {\n      return SourceSpan.forCharPositions(source, serialized[0], serialized[1]);\n    } else if (serialized === NON_EXISTENT_KIND) {\n      return SourceSpan.NON_EXISTENT;\n    } else if (serialized === BROKEN_KIND) {\n      return SourceSpan.broken(BROKEN_LOCATION);\n    }\n\n    assertNever(serialized);\n  }\n\n  static forHbsLoc(source: Source, loc: SourceLocation): SourceSpan {\n    const start = new HbsPosition(source, loc.start);\n    const end = new HbsPosition(source, loc.end);\n    return new HbsSpan(source, { start, end }, loc).wrap();\n  }\n\n  static forCharPositions(source: Source, startPos: number, endPos: number): SourceSpan {\n    const start = new CharPosition(source, startPos);\n    const end = new CharPosition(source, endPos);\n\n    return new CharPositionSpan(source, { start, end }).wrap();\n  }\n\n  static synthetic(chars: string): SourceSpan {\n    return new InvisibleSpan(INTERNAL_SYNTHETIC_KIND, NON_EXISTENT_LOCATION, chars).wrap();\n  }\n\n  static broken(pos: SourceLocation = BROKEN_LOCATION): SourceSpan {\n    return new InvisibleSpan(BROKEN_KIND, pos).wrap();\n  }\n\n  readonly isInvisible: boolean;\n\n  constructor(private data: SpanData & AnySpan) {\n    this.isInvisible = isInvisible(data.kind);\n  }\n\n  getStart(): SourceOffset {\n    return this.data.getStart().wrap();\n  }\n\n  getEnd(): SourceOffset {\n    return this.data.getEnd().wrap();\n  }\n\n  get loc(): SourceLocation {\n    const span = this.data.toHbsSpan();\n    return span === null ? BROKEN_LOCATION : span.toHbsLoc();\n  }\n\n  get module(): string {\n    return this.data.getModule();\n  }\n\n  /**\n   * Get the starting `SourcePosition` for this `SourceSpan`, lazily computing it if needed.\n   */\n  get startPosition(): SourcePosition {\n    return this.loc.start;\n  }\n\n  /**\n   * Get the ending `SourcePosition` for this `SourceSpan`, lazily computing it if needed.\n   */\n  get endPosition(): SourcePosition {\n    return this.loc.end;\n  }\n\n  /**\n   * Support converting ASTv1 nodes into a serialized format using JSON.stringify.\n   */\n  toJSON(): SourceLocation {\n    return this.loc;\n  }\n\n  /**\n   * Create a new span with the current span's end and a new beginning.\n   */\n  withStart(other: SourceOffset): SourceSpan {\n    return span(other.data, this.data.getEnd());\n  }\n\n  /**\n   * Create a new span with the current span's beginning and a new ending.\n   */\n  withEnd(other: SourceOffset): SourceSpan {\n    return span(this.data.getStart(), other.data);\n  }\n\n  asString(): string {\n    return this.data.asString();\n  }\n\n  /**\n   * Convert this `SourceSpan` into a `SourceSlice`. In debug mode, this method optionally checks\n   * that the byte offsets represented by this `SourceSpan` actually correspond to the expected\n   * string.\n   */\n  toSlice(expected?: string): SourceSlice {\n    const chars = this.data.asString();\n\n    if (import.meta.env.DEV) {\n      if (expected !== undefined && chars !== expected) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `unexpectedly found ${JSON.stringify(\n            chars\n          )} when slicing source, but expected ${JSON.stringify(expected)}`\n        );\n      }\n    }\n\n    return new SourceSlice({\n      loc: this,\n      chars: expected || chars,\n    });\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use startPosition instead\n   */\n  get start(): SourcePosition {\n    return this.loc.start;\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use withStart instead\n   */\n  set start(position: SourcePosition) {\n    this.data.locDidUpdate({ start: position });\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use endPosition instead\n   */\n  get end(): SourcePosition {\n    return this.loc.end;\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use withEnd instead\n   */\n  set end(position: SourcePosition) {\n    this.data.locDidUpdate({ end: position });\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use module instead\n   */\n  get source(): string {\n    return this.module;\n  }\n\n  collapse(where: 'start' | 'end'): SourceSpan {\n    switch (where) {\n      case 'start':\n        return this.getStart().collapsed();\n      case 'end':\n        return this.getEnd().collapsed();\n    }\n  }\n\n  extend(other: SourceSpan): SourceSpan {\n    return span(this.data.getStart(), other.data.getEnd());\n  }\n\n  serialize(): SerializedSourceSpan {\n    return this.data.serialize();\n  }\n\n  slice({ skipStart = 0, skipEnd = 0 }: { skipStart?: number; skipEnd?: number }): SourceSpan {\n    return span(this.getStart().move(skipStart).data, this.getEnd().move(-skipEnd).data);\n  }\n\n  sliceStartChars({ skipStart = 0, chars }: { skipStart?: number; chars: number }): SourceSpan {\n    return span(this.getStart().move(skipStart).data, this.getStart().move(skipStart + chars).data);\n  }\n\n  sliceEndChars({ skipEnd = 0, chars }: { skipEnd?: number; chars: number }): SourceSpan {\n    return span(this.getEnd().move(skipEnd - chars).data, this.getStart().move(-skipEnd).data);\n  }\n}\n\ntype AnySpan = HbsSpan | CharPositionSpan | InvisibleSpan;\n\nclass CharPositionSpan implements SpanData {\n  readonly kind = CHAR_OFFSET_KIND;\n\n  #locPosSpan: HbsSpan | BROKEN | null = null;\n\n  constructor(\n    readonly source: Source,\n    readonly charPositions: { start: CharPosition; end: CharPosition }\n  ) {}\n\n  wrap(): SourceSpan {\n    return new SourceSpan(this);\n  }\n\n  asString(): string {\n    return this.source.slice(this.charPositions.start.charPos, this.charPositions.end.charPos);\n  }\n\n  getModule(): string {\n    return this.source.module;\n  }\n\n  getStart(): AnyPosition {\n    return this.charPositions.start;\n  }\n\n  getEnd(): AnyPosition {\n    return this.charPositions.end;\n  }\n\n  locDidUpdate() {\n    if (LOCAL_DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `updating a location that came from a CharPosition span doesn't work reliably. Don't try to update locations after the plugin phase`\n      );\n    }\n  }\n\n  toHbsSpan(): HbsSpan | null {\n    let locPosSpan = this.#locPosSpan;\n\n    if (locPosSpan === null) {\n      const start = this.charPositions.start.toHbsPos();\n      const end = this.charPositions.end.toHbsPos();\n\n      if (start === null || end === null) {\n        locPosSpan = this.#locPosSpan = BROKEN;\n      } else {\n        locPosSpan = this.#locPosSpan = new HbsSpan(this.source, {\n          start,\n          end,\n        });\n      }\n    }\n\n    return locPosSpan === BROKEN ? null : locPosSpan;\n  }\n\n  serialize(): SerializedSourceSpan {\n    const {\n      start: { charPos: start },\n      end: { charPos: end },\n    } = this.charPositions;\n\n    if (start === end) {\n      return start;\n    } else {\n      return [start, end];\n    }\n  }\n\n  toCharPosSpan(): CharPositionSpan {\n    return this;\n  }\n}\n\nexport class HbsSpan implements SpanData {\n  readonly kind = HBS_POSITION_KIND;\n\n  #charPosSpan: CharPositionSpan | BROKEN | null = null;\n\n  // the source location from Handlebars + AST Plugins -- could be wrong\n  #providedHbsLoc: SourceLocation | null;\n\n  constructor(\n    readonly source: Source,\n    readonly hbsPositions: { start: HbsPosition; end: HbsPosition },\n    providedHbsLoc: SourceLocation | null = null\n  ) {\n    this.#providedHbsLoc = providedHbsLoc;\n  }\n\n  serialize(): SerializedConcreteSourceSpan {\n    const charPos = this.toCharPosSpan();\n    return charPos === null ? BROKEN_KIND : charPos.wrap().serialize();\n  }\n\n  wrap(): SourceSpan {\n    return new SourceSpan(this);\n  }\n\n  private updateProvided(pos: SourcePosition, edge: 'start' | 'end') {\n    if (this.#providedHbsLoc) {\n      this.#providedHbsLoc[edge] = pos;\n    }\n\n    // invalidate computed character offsets\n    this.#charPosSpan = null;\n    this.#providedHbsLoc = {\n      start: pos,\n      end: pos,\n    };\n  }\n\n  locDidUpdate({ start, end }: { start?: SourcePosition; end?: SourcePosition }): void {\n    if (start !== undefined) {\n      this.updateProvided(start, 'start');\n      this.hbsPositions.start = new HbsPosition(this.source, start, null);\n    }\n\n    if (end !== undefined) {\n      this.updateProvided(end, 'end');\n      this.hbsPositions.end = new HbsPosition(this.source, end, null);\n    }\n  }\n\n  asString(): string {\n    const span = this.toCharPosSpan();\n    return span === null ? '' : span.asString();\n  }\n\n  getModule(): string {\n    return this.source.module;\n  }\n\n  getStart(): AnyPosition {\n    return this.hbsPositions.start;\n  }\n\n  getEnd(): AnyPosition {\n    return this.hbsPositions.end;\n  }\n\n  toHbsLoc(): SourceLocation {\n    return {\n      start: this.hbsPositions.start.hbsPos,\n      end: this.hbsPositions.end.hbsPos,\n    };\n  }\n\n  toHbsSpan(): HbsSpan {\n    return this;\n  }\n\n  toCharPosSpan(): CharPositionSpan | null {\n    let charPosSpan = this.#charPosSpan;\n\n    if (charPosSpan === null) {\n      const start = this.hbsPositions.start.toCharPos();\n      const end = this.hbsPositions.end.toCharPos();\n\n      if (start && end) {\n        charPosSpan = this.#charPosSpan = new CharPositionSpan(this.source, {\n          start,\n          end,\n        });\n      } else {\n        charPosSpan = this.#charPosSpan = BROKEN;\n        return null;\n      }\n    }\n\n    return charPosSpan === BROKEN ? null : charPosSpan;\n  }\n}\n\nclass InvisibleSpan implements SpanData {\n  constructor(\n    readonly kind: InvisibleKind,\n    // whatever was provided, possibly broken\n    readonly loc: SourceLocation,\n    // if the span represents a synthetic string\n    readonly string: string | null = null\n  ) {}\n\n  serialize(): SerializedConcreteSourceSpan {\n    switch (this.kind) {\n      case BROKEN_KIND:\n      case NON_EXISTENT_KIND:\n        return this.kind;\n      case INTERNAL_SYNTHETIC_KIND:\n        return this.string || '';\n    }\n  }\n\n  wrap(): SourceSpan {\n    return new SourceSpan(this);\n  }\n\n  asString(): string {\n    return this.string || '';\n  }\n\n  locDidUpdate({ start, end }: { start?: SourcePosition; end?: SourcePosition }) {\n    if (start !== undefined) {\n      this.loc.start = start;\n    }\n\n    if (end !== undefined) {\n      this.loc.end = end;\n    }\n  }\n\n  getModule(): string {\n    // TODO: Make this reflect the actual module this span originated from\n    return 'an unknown module';\n  }\n\n  getStart(): AnyPosition {\n    return new InvisiblePosition(this.kind, this.loc.start);\n  }\n\n  getEnd(): AnyPosition {\n    return new InvisiblePosition(this.kind, this.loc.end);\n  }\n\n  toCharPosSpan(): InvisibleSpan {\n    return this;\n  }\n\n  toHbsSpan(): null {\n    return null;\n  }\n\n  toHbsLoc(): SourceLocation {\n    return BROKEN_LOCATION;\n  }\n}\n\nexport const span: MatchFn<SourceSpan> = match((m) =>\n  m\n    .when(HBS_POSITION_KIND, HBS_POSITION_KIND, (left, right) =>\n      new HbsSpan(left.source, {\n        start: left,\n        end: right,\n      }).wrap()\n    )\n    .when(CHAR_OFFSET_KIND, CHAR_OFFSET_KIND, (left, right) =>\n      new CharPositionSpan(left.source, {\n        start: left,\n        end: right,\n      }).wrap()\n    )\n    .when(CHAR_OFFSET_KIND, HBS_POSITION_KIND, (left, right) => {\n      const rightCharPos = right.toCharPos();\n\n      if (rightCharPos === null) {\n        return new InvisibleSpan(BROKEN_KIND, BROKEN_LOCATION).wrap();\n      } else {\n        return span(left, rightCharPos);\n      }\n    })\n    .when(HBS_POSITION_KIND, CHAR_OFFSET_KIND, (left, right) => {\n      const leftCharPos = left.toCharPos();\n\n      if (leftCharPos === null) {\n        return new InvisibleSpan(BROKEN_KIND, BROKEN_LOCATION).wrap();\n      } else {\n        return span(leftCharPos, right);\n      }\n    })\n    .when(IsInvisible, MatchAny, (left) => new InvisibleSpan(left.kind, BROKEN_LOCATION).wrap())\n    .when(MatchAny, IsInvisible, (_, right) =>\n      new InvisibleSpan(right.kind, BROKEN_LOCATION).wrap()\n    )\n);\n\nexport type SerializedConcreteSourceSpan =\n  | /** collapsed */ number\n  | /** normal */ [start: number, size: number]\n  | /** synthetic */ string;\n\nexport type SerializedSourceSpan = SerializedConcreteSourceSpan | NonExistentKind | BrokenKind;\n","import type { SourcePosition } from '../location';\nimport type { Source } from '../source';\nimport type { BrokenKind, InternalSyntheticKind, NonExistentKind, OffsetKind } from './kinds';\nimport type { SourceSpan } from './span';\n\nimport { UNKNOWN_POSITION } from '../location';\nimport { BROKEN_KIND, CHAR_OFFSET_KIND, HBS_POSITION_KIND } from './kinds';\nimport { match, MatchAny } from './match';\nimport { span } from './span';\n\n/**\n * All positions have these details in common. Most notably, all three kinds of positions can\n * must be able to attempt to convert themselves into {@see CharPosition}.\n */\nexport interface PositionData {\n  readonly kind: OffsetKind;\n  toCharPos(): CharPosition | null;\n  toJSON(): SourcePosition;\n}\n\n/**\n * Used to indicate that an attempt to convert a `SourcePosition` to a character offset failed. It\n * is separate from `null` so that `null` can be used to indicate that the computation wasn't yet\n * attempted (and therefore to cache the failure)\n */\nexport const BROKEN = 'BROKEN';\nexport type BROKEN = 'BROKEN';\n\nexport type AnyPosition = HbsPosition | CharPosition | InvisiblePosition;\n\n/**\n * A `SourceOffset` represents a single position in the source.\n *\n * There are three kinds of backing data for `SourceOffset` objects:\n *\n * - `CharPosition`, which contains a character offset into the raw source string\n * - `HbsPosition`, which contains a `SourcePosition` from the Handlebars AST, which can be\n *   converted to a `CharPosition` on demand.\n * - `InvisiblePosition`, which represents a position not in source (@see {InvisiblePosition})\n */\nexport class SourceOffset {\n  /**\n   * Create a `SourceOffset` from a Handlebars `SourcePosition`. It's stored as-is, and converted\n   * into a character offset on demand, which avoids unnecessarily computing the offset of every\n   * `SourceLocation`, but also means that broken `SourcePosition`s are not always detected.\n   */\n  static forHbsPos(source: Source, pos: SourcePosition): SourceOffset {\n    return new HbsPosition(source, pos, null).wrap();\n  }\n\n  /**\n   * Create a `SourceOffset` that corresponds to a broken `SourcePosition`. This means that the\n   * calling code determined (or knows) that the `SourceLocation` doesn't correspond correctly to\n   * any part of the source.\n   */\n  static broken(pos: SourcePosition = UNKNOWN_POSITION): SourceOffset {\n    return new InvisiblePosition(BROKEN_KIND, pos).wrap();\n  }\n\n  constructor(readonly data: PositionData & AnyPosition) {}\n\n  /**\n   * Get the character offset for this `SourceOffset`, if possible.\n   */\n  get offset(): number | null {\n    const charPos = this.data.toCharPos();\n    return charPos === null ? null : charPos.offset;\n  }\n\n  /**\n   * Compare this offset with another one.\n   *\n   * If both offsets are `HbsPosition`s, they're equivalent as long as their lines and columns are\n   * the same. This avoids computing offsets unnecessarily.\n   *\n   * Otherwise, two `SourceOffset`s are equivalent if their successfully computed character offsets\n   * are the same.\n   */\n  eql(right: SourceOffset): boolean {\n    return eql(this.data, right.data);\n  }\n\n  /**\n   * Create a span that starts from this source offset and ends with another source offset. Avoid\n   * computing character offsets if both `SourceOffset`s are still lazy.\n   */\n  until(other: SourceOffset): SourceSpan {\n    return span(this.data, other.data);\n  }\n\n  /**\n   * Create a `SourceOffset` by moving the character position represented by this source offset\n   * forward or backward (if `by` is negative), if possible.\n   *\n   * If this `SourceOffset` can't compute a valid character offset, `move` returns a broken offset.\n   *\n   * If the resulting character offset is less than 0 or greater than the size of the source, `move`\n   * returns a broken offset.\n   */\n  move(by: number): SourceOffset {\n    const charPos = this.data.toCharPos();\n\n    if (charPos === null) {\n      return SourceOffset.broken();\n    } else {\n      const result = charPos.offset + by;\n\n      if (charPos.source.validate(result)) {\n        return new CharPosition(charPos.source, result).wrap();\n      } else {\n        return SourceOffset.broken();\n      }\n    }\n  }\n\n  /**\n   * Create a new `SourceSpan` that represents a collapsed range at this source offset. Avoid\n   * computing the character offset if it has not already been computed.\n   */\n  collapsed(): SourceSpan {\n    return span(this.data, this.data);\n  }\n\n  /**\n   * Convert this `SourceOffset` into a Handlebars {@see SourcePosition} for compatibility with\n   * existing plugins.\n   */\n  toJSON(): SourcePosition {\n    return this.data.toJSON();\n  }\n}\n\nexport class CharPosition implements PositionData {\n  readonly kind = CHAR_OFFSET_KIND;\n\n  /** Computed from char offset */\n  _locPos: HbsPosition | BROKEN | null = null;\n\n  constructor(\n    readonly source: Source,\n    readonly charPos: number\n  ) {}\n\n  /**\n   * This is already a `CharPosition`.\n   *\n   * {@see HbsPosition} for the alternative.\n   */\n  toCharPos(): CharPosition {\n    return this;\n  }\n\n  /**\n   * Produce a Handlebars {@see SourcePosition} for this `CharPosition`. If this `CharPosition` was\n   * computed using {@see SourceOffset#move}, this will compute the `SourcePosition` for the offset.\n   */\n  toJSON(): SourcePosition {\n    const hbs = this.toHbsPos();\n    return hbs === null ? UNKNOWN_POSITION : hbs.toJSON();\n  }\n\n  wrap(): SourceOffset {\n    return new SourceOffset(this);\n  }\n\n  /**\n   * A `CharPosition` always has an offset it can produce without any additional computation.\n   */\n  get offset(): number {\n    return this.charPos;\n  }\n\n  /**\n   * Convert the current character offset to an `HbsPosition`, if it was not already computed. Once\n   * a `CharPosition` has computed its `HbsPosition`, it will not need to do compute it again, and\n   * the same `CharPosition` is retained when used as one of the ends of a `SourceSpan`, so\n   * computing the `HbsPosition` should be a one-time operation.\n   */\n  toHbsPos(): HbsPosition | null {\n    let locPos = this._locPos;\n\n    if (locPos === null) {\n      const hbsPos = this.source.hbsPosFor(this.charPos);\n\n      if (hbsPos === null) {\n        this._locPos = locPos = BROKEN;\n      } else {\n        this._locPos = locPos = new HbsPosition(this.source, hbsPos, this.charPos);\n      }\n    }\n\n    return locPos === BROKEN ? null : locPos;\n  }\n}\n\nexport class HbsPosition implements PositionData {\n  readonly kind = HBS_POSITION_KIND;\n\n  _charPos: CharPosition | BROKEN | null;\n\n  constructor(\n    readonly source: Source,\n    readonly hbsPos: SourcePosition,\n    charPos: number | null = null\n  ) {\n    this._charPos = charPos === null ? null : new CharPosition(source, charPos);\n  }\n\n  /**\n   * Lazily compute the character offset from the {@see SourcePosition}. Once an `HbsPosition` has\n   * computed its `CharPosition`, it will not need to do compute it again, and the same\n   * `HbsPosition` is retained when used as one of the ends of a `SourceSpan`, so computing the\n   * `CharPosition` should be a one-time operation.\n   */\n  toCharPos(): CharPosition | null {\n    let charPos = this._charPos;\n\n    if (charPos === null) {\n      const charPosNumber = this.source.charPosFor(this.hbsPos);\n\n      if (charPosNumber === null) {\n        this._charPos = charPos = BROKEN;\n      } else {\n        this._charPos = charPos = new CharPosition(this.source, charPosNumber);\n      }\n    }\n\n    return charPos === BROKEN ? null : charPos;\n  }\n\n  /**\n   * Return the {@see SourcePosition} that this `HbsPosition` was instantiated with. This operation\n   * does not need to compute anything.\n   */\n  toJSON(): SourcePosition {\n    return this.hbsPos;\n  }\n\n  wrap(): SourceOffset {\n    return new SourceOffset(this);\n  }\n\n  /**\n   * This is already an `HbsPosition`.\n   *\n   * {@see CharPosition} for the alternative.\n   */\n  toHbsPos(): HbsPosition {\n    return this;\n  }\n}\n\nexport class InvisiblePosition implements PositionData {\n  constructor(\n    readonly kind: BrokenKind | InternalSyntheticKind | NonExistentKind,\n    // whatever was provided, possibly broken\n    readonly pos: SourcePosition\n  ) {}\n\n  /**\n   * A broken position cannot be turned into a {@see CharacterPosition}.\n   */\n  toCharPos(): null {\n    return null;\n  }\n\n  /**\n   * The serialization of an `InvisiblePosition is whatever Handlebars {@see SourcePosition} was\n   * originally identified as broken, non-existent or synthetic.\n   *\n   * If an `InvisiblePosition` never had an source offset at all, this method returns\n   * {@see UNKNOWN_POSITION} for compatibility.\n   */\n  toJSON(): SourcePosition {\n    return this.pos;\n  }\n\n  wrap(): SourceOffset {\n    return new SourceOffset(this);\n  }\n\n  get offset(): null {\n    return null;\n  }\n}\n\n/**\n * Compare two {@see AnyPosition} and determine whether they are equal.\n *\n * @see {SourceOffset#eql}\n */\nconst eql = match<boolean>((m) =>\n  m\n    .when(\n      HBS_POSITION_KIND,\n      HBS_POSITION_KIND,\n      ({ hbsPos: left }, { hbsPos: right }) =>\n        left.column === right.column && left.line === right.line\n    )\n    .when(\n      CHAR_OFFSET_KIND,\n      CHAR_OFFSET_KIND,\n      ({ charPos: left }, { charPos: right }) => left === right\n    )\n    .when(\n      CHAR_OFFSET_KIND,\n      HBS_POSITION_KIND,\n      ({ offset: left }, right) => left === right.toCharPos()?.offset\n    )\n    .when(\n      HBS_POSITION_KIND,\n      CHAR_OFFSET_KIND,\n      (left, { offset: right }) => left.toCharPos()?.offset === right\n    )\n    .when(MatchAny, MatchAny, () => false)\n);\n","import type { Nullable } from '@glimmer/interfaces';\nimport { assert, setLocalDebugType } from '@glimmer/debug-util';\n\nimport type { PrecompileOptions } from '../parser/tokenizer-event-handlers';\nimport type { SourceLocation, SourcePosition } from './location';\n\nimport { SourceOffset, SourceSpan } from './span';\n\nexport class Source {\n  static from(source: string, options: PrecompileOptions = {}): Source {\n    return new Source(source, options.meta?.moduleName);\n  }\n\n  constructor(\n    readonly source: string,\n    readonly module = 'an unknown module'\n  ) {\n    setLocalDebugType('syntax:source', this);\n  }\n\n  /**\n   * Validate that the character offset represents a position in the source string.\n   */\n  validate(offset: number): boolean {\n    return offset >= 0 && offset <= this.source.length;\n  }\n\n  slice(start: number, end: number): string {\n    return this.source.slice(start, end);\n  }\n\n  offsetFor(line: number, column: number): SourceOffset {\n    return SourceOffset.forHbsPos(this, { line, column });\n  }\n\n  spanFor({ start, end }: Readonly<SourceLocation>): SourceSpan {\n    return SourceSpan.forHbsLoc(this, {\n      start: { line: start.line, column: start.column },\n      end: { line: end.line, column: end.column },\n    });\n  }\n\n  hbsPosFor(offset: number): Nullable<SourcePosition> {\n    let seenLines = 0;\n    let seenChars = 0;\n\n    if (offset > this.source.length) {\n      return null;\n    }\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      let nextLine = this.source.indexOf('\\n', seenChars);\n\n      if (offset <= nextLine || nextLine === -1) {\n        return {\n          line: seenLines + 1,\n          column: offset - seenChars,\n        };\n      } else {\n        seenLines += 1;\n        seenChars = nextLine + 1;\n      }\n    }\n  }\n\n  charPosFor(position: SourcePosition): number | null {\n    let { line, column } = position;\n    let sourceString = this.source;\n    let sourceLength = sourceString.length;\n    let seenLines = 0;\n    let seenChars = 0;\n\n    while (seenChars < sourceLength) {\n      let nextLine = this.source.indexOf('\\n', seenChars);\n      if (nextLine === -1) nextLine = this.source.length;\n\n      if (seenLines === line - 1) {\n        if (seenChars + column > nextLine) return nextLine;\n\n        if (import.meta.env.DEV) {\n          let roundTrip = this.hbsPosFor(seenChars + column);\n          assert(roundTrip !== null, `the returned offset failed to round-trip`);\n          assert(roundTrip.line === line, `the round-tripped line didn't match the original line`);\n          assert(\n            roundTrip.column === column,\n            `the round-tripped column didn't match the original column`\n          );\n        }\n\n        return seenChars + column;\n      } else if (nextLine === -1) {\n        return 0;\n      } else {\n        seenLines += 1;\n        seenChars = nextLine + 1;\n      }\n    }\n\n    return sourceLength;\n  }\n}\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { getFirst, getLast, isPresentArray } from '@glimmer/debug-util';\n\nimport type { LocatedWithOptionalSpan, LocatedWithSpan } from './location';\nimport type { SourceOffset } from './span';\n\nimport { SourceSpan } from './span';\n\nexport type HasSpan = SourceSpan | LocatedWithSpan | PresentArray<LocatedWithSpan>;\nexport type MaybeHasSpan = SourceSpan | LocatedWithOptionalSpan | LocatedWithOptionalSpan[] | null;\n\nexport type ToSourceOffset = number | SourceOffset;\n\nexport class SpanList {\n  static range(span: PresentArray<HasSourceSpan>): SourceSpan;\n  static range(span: HasSourceSpan[], fallback: SourceSpan): SourceSpan;\n  static range(span: HasSourceSpan[], fallback: SourceSpan = SourceSpan.NON_EXISTENT): SourceSpan {\n    return new SpanList(span.map(loc)).getRangeOffset(fallback);\n  }\n\n  _span: SourceSpan[];\n\n  constructor(span: SourceSpan[] = []) {\n    this._span = span;\n  }\n\n  add(offset: SourceSpan): void {\n    this._span.push(offset);\n  }\n\n  getRangeOffset(fallback: SourceSpan): SourceSpan {\n    if (isPresentArray(this._span)) {\n      let first = getFirst(this._span);\n      let last = getLast(this._span);\n      return first.extend(last);\n    } else {\n      return fallback;\n    }\n  }\n}\n\nexport type HasSourceSpan = { loc: SourceSpan } | SourceSpan | [HasSourceSpan, ...HasSourceSpan[]];\n\nexport function loc(span: HasSourceSpan): SourceSpan {\n  if (Array.isArray(span)) {\n    let first = getFirst(span);\n    let last = getLast(span);\n    return loc(first).extend(loc(last));\n  } else if (span instanceof SourceSpan) {\n    return span;\n  } else {\n    return span.loc;\n  }\n}\n\nexport type MaybeHasSourceSpan = { loc: SourceSpan } | SourceSpan | MaybeHasSourceSpan[];\n\nexport function hasSpan(span: MaybeHasSourceSpan): span is HasSourceSpan {\n  if (Array.isArray(span) && span.length === 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function maybeLoc(location: MaybeHasSourceSpan, fallback: SourceSpan): SourceSpan {\n  if (hasSpan(location)) {\n    return loc(location);\n  } else {\n    return fallback;\n  }\n}\n","import type * as src from './source/api';\n\nexport interface GlimmerSyntaxError extends Error {\n  location: src.SourceSpan | null;\n  code: string | null;\n}\n\nexport function generateSyntaxError(message: string, location: src.SourceSpan): GlimmerSyntaxError {\n  let { module, loc } = location;\n  let { line, column } = loc.start;\n\n  let code = location.asString();\n  let quotedCode = code ? `\\n\\n|\\n|  ${code.split('\\n').join('\\n|  ')}\\n|\\n\\n` : '';\n\n  let error = new Error(\n    `${message}: ${quotedCode}(error occurred in '${module}' @ line ${line} : column ${column})`\n  ) as GlimmerSyntaxError;\n\n  error.name = 'SyntaxError';\n  error.location = location;\n  error.code = code;\n\n  return error;\n}\n","import type * as ASTv1 from './api';\n\n// ensure stays in sync with typing\n// ParentNode and ChildKey types are derived from VisitorKeysMap\nconst visitorKeys = {\n  Template: ['body'],\n  Block: ['body'],\n\n  MustacheStatement: ['path', 'params', 'hash'],\n  BlockStatement: ['path', 'params', 'hash', 'program', 'inverse'],\n  ElementModifierStatement: ['path', 'params', 'hash'],\n  CommentStatement: [],\n  MustacheCommentStatement: [],\n  ElementNode: ['attributes', 'modifiers', 'children', 'comments'],\n  AttrNode: ['value'],\n  TextNode: [],\n\n  ConcatStatement: ['parts'],\n  SubExpression: ['path', 'params', 'hash'],\n  PathExpression: [],\n\n  StringLiteral: [],\n  BooleanLiteral: [],\n  NumberLiteral: [],\n  NullLiteral: [],\n  UndefinedLiteral: [],\n\n  Hash: ['pairs'],\n  HashPair: ['value'],\n} as const;\n\ntype VisitorKeysMap = typeof visitorKeys;\n\nexport type VisitorKeys = { [P in keyof VisitorKeysMap]: VisitorKeysMap[P][number] };\nexport type VisitorKey<N extends ASTv1.Node> = VisitorKeys[N['type']] & keyof N;\n\nexport default visitorKeys;\n","import type { Nullable } from '@glimmer/interfaces';\n\nimport type * as ASTv1 from '../v1/api';\n\nexport interface TraversalError extends Error {\n  constructor: TraversalErrorConstructor;\n  key: string;\n  node: ASTv1.Node;\n  parent: Nullable<ASTv1.Node>;\n  stack?: string;\n}\n\nexport interface TraversalErrorConstructor {\n  new (\n    message: string,\n    node: ASTv1.Node,\n    parent: Nullable<ASTv1.Node>,\n    key: string\n  ): TraversalError;\n  readonly prototype: TraversalError;\n}\n\nconst TraversalError: TraversalErrorConstructor = (function () {\n  TraversalError.prototype = Object.create(Error.prototype);\n  TraversalError.prototype.constructor = TraversalError;\n\n  function TraversalError(\n    this: TraversalError,\n    message: string,\n    node: ASTv1.Node,\n    parent: Nullable<ASTv1.Node>,\n    key: string\n  ) {\n    let error = Error.call(this, message);\n\n    this.key = key;\n    this.message = message;\n    this.node = node;\n    this.parent = parent;\n\n    if (error.stack) {\n      this.stack = error.stack;\n    }\n  }\n\n  return TraversalError as unknown as TraversalErrorConstructor;\n})();\n\nexport default TraversalError;\n\nexport function cannotRemoveNode(\n  node: ASTv1.Node,\n  parent: ASTv1.Node,\n  key: string\n): TraversalError {\n  return new TraversalError(\n    'Cannot remove a node unless it is part of an array',\n    node,\n    parent,\n    key\n  );\n}\n\nexport function cannotReplaceNode(\n  node: ASTv1.Node,\n  parent: ASTv1.Node,\n  key: string\n): TraversalError {\n  return new TraversalError(\n    'Cannot replace a node with multiple nodes unless it is part of an array',\n    node,\n    parent,\n    key\n  );\n}\n\nexport function cannotReplaceOrRemoveInKeyHandlerYet(\n  node: ASTv1.Node,\n  key: string\n): TraversalError {\n  return new TraversalError(\n    'Replacing and removing in key handlers is not yet supported.',\n    node,\n    null,\n    key\n  );\n}\n","import type * as ASTv1 from '../v1/api';\n\nexport default class WalkerPath<N extends ASTv1.Node> {\n  node: N;\n  parent: WalkerPath<ASTv1.Node> | null;\n  parentKey: string | null;\n\n  constructor(\n    node: N,\n    parent: WalkerPath<ASTv1.Node> | null = null,\n    parentKey: string | null = null\n  ) {\n    this.node = node;\n    this.parent = parent;\n    this.parentKey = parentKey;\n  }\n\n  get parentNode(): ASTv1.Node | null {\n    return this.parent ? this.parent.node : null;\n  }\n\n  parents(): Iterable<WalkerPath<ASTv1.Node> | null> {\n    return {\n      [Symbol.iterator]: () => {\n        return new PathParentsIterator(this);\n      },\n    };\n  }\n}\n\nclass PathParentsIterator implements Iterator<WalkerPath<ASTv1.Node> | null> {\n  path: WalkerPath<ASTv1.Node>;\n\n  constructor(path: WalkerPath<ASTv1.Node>) {\n    this.path = path;\n  }\n\n  next() {\n    if (this.path.parent) {\n      this.path = this.path.parent;\n      return { done: false, value: this.path };\n    } else {\n      return { done: true, value: null };\n    }\n  }\n}\n","import { deprecate, unwrap } from '@glimmer/debug-util';\n\nimport type * as ASTv1 from '../v1/api';\nimport type { VisitorKey, VisitorKeys } from '../v1/visitor-keys';\nimport type { KeyHandler, KeyTraversal, NodeHandler, NodeTraversal, NodeVisitor } from './visitor';\n\nimport visitorKeys from '../v1/visitor-keys';\nimport {\n  cannotRemoveNode,\n  cannotReplaceNode,\n  cannotReplaceOrRemoveInKeyHandlerYet,\n} from './errors';\nimport WalkerPath from './path';\n\nfunction getEnterFunction<N extends ASTv1.Node>(\n  handler: NodeTraversal<N>\n): NodeHandler<N> | undefined;\nfunction getEnterFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: KeyTraversal<N, K>\n): KeyHandler<N, K> | undefined;\nfunction getEnterFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: NodeTraversal<N> | KeyTraversal<N, K>\n): NodeHandler<N> | KeyHandler<N, K> | undefined {\n  if (typeof handler === 'function') {\n    return handler;\n  } else {\n    return handler.enter as NodeHandler<N> | KeyHandler<N, K>;\n  }\n}\n\nfunction getExitFunction<N extends ASTv1.Node>(\n  handler: NodeTraversal<N>\n): NodeHandler<N> | undefined;\nfunction getExitFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: KeyTraversal<N, K>\n): KeyHandler<N, K> | undefined;\nfunction getExitFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: NodeTraversal<N> | KeyTraversal<N, K>\n): NodeHandler<N> | KeyHandler<N, K> | undefined {\n  if (typeof handler === 'function') {\n    return undefined;\n  } else {\n    return handler.exit as NodeHandler<N> | KeyHandler<N, K>;\n  }\n}\n\nfunction getKeyHandler<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: NodeTraversal<N>,\n  key: K\n): KeyTraversal<N, K> | KeyTraversal<N, VisitorKey<N>> | undefined {\n  let keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;\n  if (keyVisitor === undefined) return;\n\n  let keyHandler = keyVisitor[key];\n  if (keyHandler !== undefined) {\n    return keyHandler as KeyTraversal<N, K>;\n  }\n  return keyVisitor.All;\n}\n\nfunction getNodeHandler<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  nodeType: N['type']\n): NodeTraversal<N>;\nfunction getNodeHandler(visitor: NodeVisitor, nodeType: 'All'): NodeTraversal<ASTv1.Node>;\nfunction getNodeHandler<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  nodeType: N['type']\n): NodeTraversal<ASTv1.Node> | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  if (visitor.Program) {\n    if (\n      (nodeType === 'Template' && !visitor.Template) ||\n      (nodeType === 'Block' && !visitor.Block)\n    ) {\n      deprecate(\n        `The 'Program' visitor node is deprecated. Use 'Template' or 'Block' instead (node was '${nodeType}') `\n      );\n\n      // eslint-disable-next-line deprecation/deprecation\n      return visitor.Program as NodeTraversal<ASTv1.Node>;\n    }\n  }\n\n  let handler = visitor[nodeType];\n  if (handler !== undefined) {\n    return handler as unknown as NodeTraversal<ASTv1.Node>;\n  }\n  return visitor.All;\n}\n\nfunction visitNode<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  path: WalkerPath<N>\n): ASTv1.Node | ASTv1.Node[] | undefined | null | void {\n  let { node, parent, parentKey } = path;\n\n  let handler: NodeTraversal<N> = getNodeHandler(visitor, node.type);\n  let enter;\n  let exit;\n\n  if (handler !== undefined) {\n    enter = getEnterFunction(handler);\n    exit = getExitFunction(handler);\n  }\n\n  let result: ASTv1.Node | ASTv1.Node[] | undefined | null | void;\n  if (enter !== undefined) {\n    result = enter(node, path);\n  }\n\n  if (result !== undefined && result !== null) {\n    if (JSON.stringify(node) === JSON.stringify(result)) {\n      result = undefined;\n    } else if (Array.isArray(result)) {\n      visitArray(visitor, result, parent, parentKey);\n      return result;\n    } else {\n      let path = new WalkerPath(result, parent, parentKey);\n      return visitNode(visitor, path) || result;\n    }\n  }\n\n  if (result === undefined) {\n    let keys = visitorKeys[node.type];\n\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i] as VisitorKeys[N['type']] & keyof N;\n      // we know if it has child keys we can widen to a ParentNode\n      visitKey(visitor, handler, path, key);\n    }\n\n    if (exit !== undefined) {\n      result = exit(node, path);\n    }\n  }\n\n  return result;\n}\n\nfunction get<N extends ASTv1.Node>(\n  node: N,\n  key: VisitorKeys[N['type']] & keyof N\n): ASTv1.Node | ASTv1.Node[] {\n  return node[key] as unknown as ASTv1.Node | ASTv1.Node[];\n}\n\nfunction set<N extends ASTv1.Node, K extends keyof N>(node: N, key: K, value: N[K]): void {\n  node[key] = value;\n}\n\nfunction visitKey<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  handler: NodeTraversal<N>,\n  path: WalkerPath<N>,\n  key: VisitorKeys[N['type']] & keyof N\n) {\n  let { node } = path;\n\n  let value = get(node, key);\n  if (!value) {\n    return;\n  }\n\n  let keyEnter;\n  let keyExit;\n\n  if (handler !== undefined) {\n    let keyHandler = getKeyHandler(handler, key);\n    if (keyHandler !== undefined) {\n      keyEnter = getEnterFunction(keyHandler);\n      keyExit = getExitFunction(keyHandler);\n    }\n  }\n\n  if (keyEnter !== undefined) {\n    if (keyEnter(node, key) !== undefined) {\n      throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);\n    }\n  }\n\n  if (Array.isArray(value)) {\n    visitArray(visitor, value, path, key);\n  } else {\n    let keyPath = new WalkerPath(value, path, key);\n    let result = visitNode(visitor, keyPath);\n    if (result !== undefined) {\n      // TODO: dynamically check the results by having a table of\n      // expected node types in value space, not just type space\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      assignKey(node, key, value, result as any);\n    }\n  }\n\n  if (keyExit !== undefined) {\n    if (keyExit(node, key) !== undefined) {\n      throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);\n    }\n  }\n}\n\nfunction visitArray(\n  visitor: NodeVisitor,\n  array: ASTv1.Node[],\n  parent: WalkerPath<ASTv1.Node> | null,\n  parentKey: string | null\n) {\n  for (let i = 0; i < array.length; i++) {\n    let node = unwrap(array[i]);\n    let path = new WalkerPath(node, parent, parentKey);\n    let result = visitNode(visitor, path);\n    if (result !== undefined) {\n      i += spliceArray(array, i, result) - 1;\n    }\n  }\n}\n\nfunction assignKey<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  node: N,\n  key: K,\n  value: ASTv1.Node,\n  result: N[K] | [N[K]] | null\n) {\n  if (result === null) {\n    throw cannotRemoveNode(value, node, key);\n  } else if (Array.isArray(result)) {\n    if (result.length === 1) {\n      set(node, key, result[0]);\n    } else {\n      if (result.length === 0) {\n        throw cannotRemoveNode(value, node, key);\n      } else {\n        throw cannotReplaceNode(value, node, key);\n      }\n    }\n  } else {\n    set(node, key, result);\n  }\n}\n\nfunction spliceArray(array: ASTv1.Node[], index: number, result: ASTv1.Node | ASTv1.Node[] | null) {\n  if (result === null) {\n    array.splice(index, 1);\n    return 0;\n  } else if (Array.isArray(result)) {\n    array.splice(index, 1, ...result);\n    return result.length;\n  } else {\n    array.splice(index, 1, result);\n    return 1;\n  }\n}\n\nexport default function traverse(node: ASTv1.Node, visitor: NodeVisitor): void {\n  let path = new WalkerPath(node);\n  visitNode(visitor, path);\n}\n","import type { Nullable } from '@glimmer/interfaces';\n\nimport type * as ASTv1 from '../v1/api';\n\nexport type NodeCallback<N extends ASTv1.Node> = (node: N, walker: Walker) => void;\n\nexport default class Walker {\n  public stack: unknown[] = [];\n  constructor(public order?: unknown) {}\n\n  visit<N extends ASTv1.Node>(node: Nullable<N>, visitor: NodeCallback<N>): void {\n    if (!node) {\n      return;\n    }\n\n    this.stack.push(node);\n\n    if (this.order === 'post') {\n      this.children(node, visitor);\n      visitor(node, this);\n    } else {\n      visitor(node, this);\n      this.children(node, visitor);\n    }\n\n    this.stack.pop();\n  }\n\n  children<N extends ASTv1.Node>(\n    node: N & ASTv1.Node,\n    callback: NodeCallback<N & ASTv1.Node>\n  ): void {\n    switch (node.type) {\n      case 'Block':\n      case 'Template':\n        walkBody(this, node.body, callback);\n        return;\n      case 'ElementNode':\n        walkBody(this, node.children, callback);\n        return;\n      case 'BlockStatement':\n        this.visit(node.program, callback);\n        this.visit(node.inverse || null, callback);\n        return;\n      default:\n        return;\n    }\n  }\n}\n\nfunction walkBody(\n  walker: Walker,\n  body: ASTv1.Statement[],\n  callback: NodeCallback<ASTv1.Statement>\n) {\n  for (const child of body) {\n    walker.visit(child, callback);\n  }\n}\n","import type * as ASTv1 from './v1/api';\nimport type * as HBS from './v1/handlebars-ast';\n\nexport function childrenFor(\n  node: ASTv1.Block | ASTv1.Template | ASTv1.ElementNode\n): ASTv1.TopLevelStatement[] {\n  switch (node.type) {\n    case 'Block':\n    case 'Template':\n      return node.body;\n    case 'ElementNode':\n      return node.children;\n  }\n}\n\nexport function appendChild(\n  parent: ASTv1.Block | ASTv1.Template | ASTv1.ElementNode,\n  node: ASTv1.Statement\n): void {\n  childrenFor(parent).push(node);\n}\n\nexport function isHBSLiteral(path: HBS.Expression): path is HBS.Literal;\nexport function isHBSLiteral(path: ASTv1.Expression): path is ASTv1.Literal;\nexport function isHBSLiteral(\n  path: HBS.Expression | ASTv1.Expression\n): path is HBS.Literal | ASTv1.Literal {\n  return (\n    path.type === 'StringLiteral' ||\n    path.type === 'BooleanLiteral' ||\n    path.type === 'NumberLiteral' ||\n    path.type === 'NullLiteral' ||\n    path.type === 'UndefinedLiteral'\n  );\n}\n\nexport function printLiteral(literal: ASTv1.Literal): string {\n  if (literal.type === 'UndefinedLiteral') {\n    return 'undefined';\n  } else {\n    return JSON.stringify(literal.value);\n  }\n}\n\nexport function isUpperCase(tag: string): boolean {\n  return tag[0] === tag[0]?.toUpperCase() && tag[0] !== tag[0]?.toLowerCase();\n}\n\nexport function isLowerCase(tag: string): boolean {\n  return tag[0] === tag[0]?.toLowerCase() && tag[0] !== tag[0]?.toUpperCase();\n}\n","import type { Dict, Nullable } from '@glimmer/interfaces';\nimport { asPresentArray, assert, deprecate, isPresentArray } from '@glimmer/debug-util';\n\nimport type { SourceLocation, SourcePosition } from '../source/location';\nimport type * as ASTv1 from './api';\n\nimport { isVoidTag } from '../generation/printer';\nimport { SYNTHETIC_LOCATION } from '../source/location';\nimport { Source } from '../source/source';\nimport { SourceSpan } from '../source/span';\nimport b from './parser-builders';\n\nlet _SOURCE: Source | undefined;\n\nfunction SOURCE(): Source {\n  if (!_SOURCE) {\n    _SOURCE = new Source('', '(synthetic)');\n  }\n\n  return _SOURCE;\n}\n\n// const SOURCE = new Source('', '(tests)');\n\n// Statements\n\nexport type BuilderHead = string | ASTv1.CallableExpression;\nexport type TagDescriptor =\n  | string\n  | ASTv1.PathExpression\n  | { path: ASTv1.PathExpression; selfClosing?: boolean }\n  | { name: string; selfClosing?: boolean };\n\nfunction buildMustache(\n  path: BuilderHead | ASTv1.Literal,\n  params: ASTv1.Expression[] = [],\n  hash: ASTv1.Hash = buildHash([]),\n  trusting = false,\n  loc?: SourceLocation,\n  strip?: ASTv1.StripFlags\n): ASTv1.MustacheStatement {\n  return b.mustache({\n    path: buildPath(path),\n    params,\n    hash,\n    trusting,\n    strip,\n    loc: buildLoc(loc || null),\n  });\n}\n\ntype PossiblyDeprecatedBlock = ASTv1.Block | ASTv1.Template;\n\nfunction buildBlock(\n  path: BuilderHead,\n  params: Nullable<ASTv1.Expression[]>,\n  hash: Nullable<ASTv1.Hash>,\n  _defaultBlock: PossiblyDeprecatedBlock,\n  _elseBlock: Nullable<PossiblyDeprecatedBlock> = null,\n  loc?: SourceLocation,\n  openStrip?: ASTv1.StripFlags,\n  inverseStrip?: ASTv1.StripFlags,\n  closeStrip?: ASTv1.StripFlags\n): ASTv1.BlockStatement {\n  let defaultBlock: ASTv1.Block;\n  let elseBlock: Nullable<ASTv1.Block> = null;\n\n  if (_defaultBlock.type === 'Template') {\n    deprecate(`b.program is deprecated. Use b.blockItself instead.`);\n    defaultBlock = b.blockItself({\n      params: buildBlockParams(_defaultBlock.blockParams),\n      body: _defaultBlock.body,\n      loc: _defaultBlock.loc,\n    });\n  } else {\n    defaultBlock = _defaultBlock;\n  }\n\n  if (_elseBlock?.type === 'Template') {\n    deprecate(`b.program is deprecated. Use b.blockItself instead.`);\n    assert(_elseBlock.blockParams.length === 0, '{{else}} block cannot have block params');\n\n    elseBlock = b.blockItself({\n      params: [],\n      body: _elseBlock.body,\n      loc: _elseBlock.loc,\n    });\n  } else {\n    elseBlock = _elseBlock;\n  }\n\n  return b.block({\n    path: buildPath(path),\n    params: params || [],\n    hash: hash || buildHash([]),\n    defaultBlock,\n    elseBlock,\n    loc: buildLoc(loc || null),\n    openStrip,\n    inverseStrip,\n    closeStrip,\n  });\n}\n\nfunction buildElementModifier(\n  path: BuilderHead,\n  params?: ASTv1.Expression[],\n  hash?: ASTv1.Hash,\n  loc?: Nullable<SourceLocation>\n): ASTv1.ElementModifierStatement {\n  return b.elementModifier({\n    path: buildPath(path),\n    params: params || [],\n    hash: hash || buildHash([]),\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildComment(value: string, loc?: SourceLocation): ASTv1.CommentStatement {\n  return b.comment({\n    value: value,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildMustacheComment(value: string, loc?: SourceLocation): ASTv1.MustacheCommentStatement {\n  return b.mustacheComment({\n    value: value,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildConcat(\n  parts: (ASTv1.TextNode | ASTv1.MustacheStatement)[],\n  loc?: SourceLocation\n): ASTv1.ConcatStatement {\n  if (!isPresentArray(parts)) {\n    throw new Error(`b.concat requires at least one part`);\n  }\n\n  return b.concat({\n    parts,\n    loc: buildLoc(loc || null),\n  });\n}\n\n// Nodes\n\nexport type ElementParts =\n  | ['attrs', ...AttrSexp[]]\n  | ['modifiers', ...ModifierSexp[]]\n  | ['body', ...ASTv1.Statement[]]\n  | ['comments', ...ElementComment[]]\n  | ['as', ...string[]]\n  | ['loc', SourceLocation];\n\nexport type PathSexp = string | ['path', string, LocSexp?];\n\nexport type ModifierSexp =\n  | string\n  | [PathSexp, LocSexp?]\n  | [PathSexp, ASTv1.Expression[], LocSexp?]\n  | [PathSexp, ASTv1.Expression[], Dict<ASTv1.Expression>, LocSexp?];\n\nexport type AttrSexp = [string, ASTv1.AttrNode['value'] | string, LocSexp?];\n\nexport type LocSexp = ['loc', SourceLocation];\n\nexport type ElementComment = ASTv1.MustacheCommentStatement | SourceLocation | string;\n\nexport type SexpValue =\n  | string\n  | ASTv1.Expression[]\n  | Dict<ASTv1.Expression>\n  | LocSexp\n  | PathSexp\n  | undefined;\n\nexport interface BuildElementOptions {\n  attrs?: ASTv1.AttrNode[];\n  modifiers?: ASTv1.ElementModifierStatement[];\n  children?: ASTv1.Statement[];\n  comments?: ASTv1.MustacheCommentStatement[];\n  blockParams?: ASTv1.VarHead[] | string[];\n  openTag?: SourceLocation;\n  closeTag?: Nullable<SourceLocation>;\n  loc?: SourceLocation;\n}\n\nfunction buildElement(tag: TagDescriptor, options: BuildElementOptions = {}): ASTv1.ElementNode {\n  let {\n    attrs,\n    blockParams,\n    modifiers,\n    comments,\n    children,\n    openTag,\n    closeTag: _closeTag,\n    loc,\n  } = options;\n\n  // this is used for backwards compat, prior to `selfClosing` being part of the ElementNode AST\n  let path: ASTv1.PathExpression;\n  let selfClosing: boolean | undefined;\n\n  if (typeof tag === 'string') {\n    if (tag.endsWith('/')) {\n      path = buildPath(tag.slice(0, -1));\n      selfClosing = true;\n    } else {\n      path = buildPath(tag);\n    }\n  } else if ('type' in tag) {\n    assert(tag.type === 'PathExpression', `Invalid tag type ${tag.type}`);\n    path = tag;\n  } else if ('path' in tag) {\n    assert(tag.path.type === 'PathExpression', `Invalid tag type ${tag.path.type}`);\n    path = tag.path;\n    selfClosing = tag.selfClosing;\n  } else {\n    path = buildPath(tag.name);\n    selfClosing = tag.selfClosing;\n  }\n\n  if (selfClosing) {\n    assert(\n      _closeTag === null || _closeTag === undefined,\n      'Cannot build a self-closing tag with a closeTag source location'\n    );\n  }\n\n  let params = blockParams?.map((param) => {\n    if (typeof param === 'string') {\n      return buildVar(param);\n    } else {\n      return param;\n    }\n  });\n\n  let closeTag: Nullable<SourceSpan> = null;\n\n  if (_closeTag) {\n    closeTag = buildLoc(_closeTag || null);\n  } else if (_closeTag === undefined) {\n    closeTag = selfClosing || isVoidTag(path.original) ? null : buildLoc(null);\n  }\n\n  return b.element({\n    path,\n    selfClosing: selfClosing || false,\n    attributes: attrs || [],\n    params: params || [],\n    modifiers: modifiers || [],\n    comments: comments || [],\n    children: children || [],\n    openTag: buildLoc(openTag || null),\n    closeTag,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildAttr(name: string, value: ASTv1.AttrValue, loc?: SourceLocation): ASTv1.AttrNode {\n  return b.attr({\n    name: name,\n    value: value,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildText(chars = '', loc?: SourceLocation): ASTv1.TextNode {\n  return b.text({\n    chars,\n    loc: buildLoc(loc || null),\n  });\n}\n\n// Expressions\n\nfunction buildSexpr(\n  path: BuilderHead,\n  params: ASTv1.Expression[] = [],\n  hash: ASTv1.Hash = buildHash([]),\n  loc?: SourceLocation\n): ASTv1.SubExpression {\n  return b.sexpr({\n    path: buildPath(path),\n    params,\n    hash,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildHead(original: string, loc?: SourceLocation): ASTv1.PathExpression {\n  let [head, ...tail] = asPresentArray(original.split('.'));\n  let headNode = b.head({ original: head, loc: buildLoc(loc || null) });\n  return b.path({ head: headNode, tail, loc: buildLoc(loc || null) });\n}\n\nfunction buildThis(loc?: SourceLocation): ASTv1.ThisHead {\n  return b.this({ loc: buildLoc(loc || null) });\n}\n\nfunction buildAtName(name: string, loc?: SourceLocation): ASTv1.AtHead {\n  return b.atName({ name, loc: buildLoc(loc || null) });\n}\n\nfunction buildVar(name: string, loc?: SourceLocation): ASTv1.VarHead {\n  return b.var({ name, loc: buildLoc(loc || null) });\n}\n\nfunction buildHeadFromString(original: string, loc?: SourceLocation): ASTv1.PathHead {\n  return b.head({ original, loc: buildLoc(loc || null) });\n}\n\nfunction buildCleanPath(\n  head: ASTv1.PathHead,\n  tail: string[] = [],\n  loc?: SourceLocation\n): ASTv1.PathExpression {\n  return b.path({ head, tail, loc: buildLoc(loc || null) });\n}\n\nfunction buildPath(\n  path: ASTv1.PathExpression | string | { head: string; tail: string[] },\n  loc?: SourceLocation\n): ASTv1.PathExpression;\nfunction buildPath(path: BuilderHead, loc?: SourceLocation): ASTv1.CallableExpression;\nfunction buildPath(path: BuilderHead | ASTv1.Literal, loc?: SourceLocation): ASTv1.Expression;\nfunction buildPath(path: ASTv1.Expression, loc?: SourceLocation): ASTv1.Expression;\nfunction buildPath(\n  path: BuilderHead | ASTv1.Expression | { head: string; tail: string[] },\n  loc?: SourceLocation\n): ASTv1.Expression {\n  let span = buildLoc(loc || null);\n\n  if (typeof path !== 'string') {\n    if ('type' in path) {\n      return path;\n    } else {\n      assert(\n        path.head.indexOf('.') === -1,\n        `builder.path({ head, tail }) should not be called with a head with dots in it`\n      );\n\n      let { head, tail } = path;\n\n      return b.path({\n        head: b.head({ original: head, loc: span.sliceStartChars({ chars: head.length }) }),\n        tail,\n        loc: buildLoc(loc || null),\n      });\n    }\n  }\n\n  let { head, tail } = buildHead(path, span);\n\n  return b.path({ head, tail, loc: span });\n}\n\nfunction buildLiteral<T extends ASTv1.Literal>(\n  type: T['type'],\n  value: T['value'],\n  loc?: SourceLocation\n): T {\n  return b.literal({\n    type,\n    value,\n    loc: buildLoc(loc || null),\n  });\n}\n\n// Miscellaneous\n\nfunction buildHash(pairs: ASTv1.HashPair[] = [], loc?: SourceLocation): ASTv1.Hash {\n  return b.hash({\n    pairs,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildPair(key: string, value: ASTv1.Expression, loc?: SourceLocation): ASTv1.HashPair {\n  return b.pair({\n    key,\n    value,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildProgram(\n  body?: ASTv1.Statement[],\n  blockParams?: string[],\n  loc?: SourceLocation\n): ASTv1.Template | ASTv1.Block {\n  deprecate(`b.program is deprecated. Use b.template or b.blockItself instead.`);\n\n  if (blockParams && blockParams.length) {\n    return buildBlockItself(body, blockParams, false, loc);\n  } else {\n    return buildTemplate(body, [], loc);\n  }\n}\n\nfunction buildBlockParams(params: ReadonlyArray<ASTv1.VarHead | string>): ASTv1.VarHead[] {\n  return params.map((p) =>\n    typeof p === 'string' ? b.var({ name: p, loc: SourceSpan.synthetic(p) }) : p\n  );\n}\n\nfunction buildBlockItself(\n  body: ASTv1.Statement[] = [],\n  params: Array<ASTv1.VarHead | string> = [],\n  chained = false,\n  loc?: SourceLocation\n): ASTv1.Block {\n  return b.blockItself({\n    body,\n    params: buildBlockParams(params),\n    chained,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildTemplate(\n  body: ASTv1.Statement[] = [],\n  blockParams: string[] = [],\n  loc?: SourceLocation\n): ASTv1.Template {\n  return b.template({\n    body,\n    blockParams,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildPosition(line: number, column: number): SourcePosition {\n  return b.pos({\n    line,\n    column,\n  });\n}\n\nfunction buildLoc(loc: Nullable<SourceLocation>): SourceSpan;\nfunction buildLoc(\n  startLine: number,\n  startColumn: number,\n  endLine?: number,\n  endColumn?: number,\n  source?: string\n): SourceSpan;\nfunction buildLoc(\n  ...args:\n    | [Nullable<SourceLocation>]\n    | [\n        startLine: number,\n        startColumn: number,\n        endLine?: number | undefined,\n        endColumn?: number | undefined,\n        source?: string | undefined,\n      ]\n): SourceSpan {\n  if (args.length === 1) {\n    let loc = args[0];\n\n    if (loc && typeof loc === 'object') {\n      return SourceSpan.forHbsLoc(SOURCE(), loc);\n    } else {\n      return SourceSpan.forHbsLoc(SOURCE(), SYNTHETIC_LOCATION);\n    }\n  } else {\n    let [startLine, startColumn, endLine, endColumn, _source] = args;\n    let source = _source ? new Source('', _source) : SOURCE();\n\n    return SourceSpan.forHbsLoc(source, {\n      start: {\n        line: startLine,\n        column: startColumn,\n      },\n      end: {\n        line: endLine || startLine,\n        column: endColumn || startColumn,\n      },\n    });\n  }\n}\n\nexport default {\n  mustache: buildMustache,\n  block: buildBlock,\n  comment: buildComment,\n  mustacheComment: buildMustacheComment,\n  element: buildElement,\n  elementModifier: buildElementModifier,\n  attr: buildAttr,\n  text: buildText,\n  sexpr: buildSexpr,\n\n  concat: buildConcat,\n  hash: buildHash,\n  pair: buildPair,\n  literal: buildLiteral,\n  program: buildProgram,\n  blockItself: buildBlockItself,\n  template: buildTemplate,\n  loc: buildLoc,\n  pos: buildPosition,\n\n  path: buildPath,\n\n  fullPath: buildCleanPath,\n  head: buildHeadFromString,\n  at: buildAtName,\n  var: buildVar,\n  this: buildThis,\n\n  string: literal('StringLiteral') as (value: string) => ASTv1.StringLiteral,\n  boolean: literal('BooleanLiteral') as (value: boolean) => ASTv1.BooleanLiteral,\n  number: literal('NumberLiteral') as (value: number) => ASTv1.NumberLiteral,\n  undefined(): ASTv1.UndefinedLiteral {\n    return buildLiteral('UndefinedLiteral', undefined);\n  },\n  null(): ASTv1.NullLiteral {\n    return buildLiteral('NullLiteral', null);\n  },\n};\n\ntype BuildLiteral<T extends ASTv1.Literal> = (value: T['value']) => T;\n\nfunction literal<T extends ASTv1.Literal>(type: T['type']): BuildLiteral<T> {\n  return function (value: T['value'], loc?: SourceLocation): T {\n    return buildLiteral(type, value, loc);\n  };\n}\n","import type { Nullable, Optional, PresentArray } from '@glimmer/interfaces';\nimport { assert } from '@glimmer/debug-util';\n\nimport type * as ASTv1 from './api';\n\nimport { SourceSpan } from '../source/span';\nimport { buildLegacyLiteral, buildLegacyMustache, buildLegacyPath } from './legacy-interop';\n\nconst DEFAULT_STRIP = {\n  close: false,\n  open: false,\n};\n\n/**\n * The Parser Builder differentiates from the public builder API by:\n *\n * 1. Offering fewer different ways to instantiate nodes\n * 2. Mandating source locations\n */\nclass Builders {\n  pos({ line, column }: { line: number; column: number }) {\n    return {\n      line,\n      column,\n    };\n  }\n\n  blockItself({\n    body,\n    params,\n    chained = false,\n    loc,\n  }: {\n    body: ASTv1.Statement[];\n    params: ASTv1.VarHead[];\n    chained?: Optional<boolean>;\n    loc: SourceSpan;\n  }): ASTv1.Block {\n    return {\n      type: 'Block',\n      body,\n      params,\n      get blockParams() {\n        return this.params.map((p) => p.name);\n      },\n      set blockParams(params: string[]) {\n        this.params = params.map((name) => {\n          return b.var({ name, loc: SourceSpan.synthetic(name) });\n        });\n      },\n      chained,\n      loc,\n    };\n  }\n\n  template({\n    body,\n    blockParams,\n    loc,\n  }: {\n    body: ASTv1.Statement[];\n    blockParams: string[];\n    loc: SourceSpan;\n  }): ASTv1.Template {\n    return {\n      type: 'Template',\n      body,\n      blockParams,\n      loc,\n    };\n  }\n\n  mustache({\n    path,\n    params,\n    hash,\n    trusting,\n    loc,\n    strip = DEFAULT_STRIP,\n  }: {\n    path: ASTv1.Expression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    trusting: boolean;\n    loc: SourceSpan;\n    strip?: Optional<ASTv1.StripFlags>;\n  }): ASTv1.MustacheStatement {\n    return buildLegacyMustache({\n      path,\n      params,\n      hash,\n      trusting,\n      strip,\n      loc,\n    });\n  }\n\n  block({\n    path,\n    params,\n    hash,\n    defaultBlock,\n    elseBlock = null,\n    loc,\n    openStrip = DEFAULT_STRIP,\n    inverseStrip = DEFAULT_STRIP,\n    closeStrip = DEFAULT_STRIP,\n  }: {\n    path: ASTv1.PathExpression | ASTv1.SubExpression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    defaultBlock: ASTv1.Block;\n    elseBlock: Nullable<ASTv1.Block>;\n    loc: SourceSpan;\n    openStrip?: Optional<ASTv1.StripFlags>;\n    inverseStrip?: Optional<ASTv1.StripFlags>;\n    closeStrip?: Optional<ASTv1.StripFlags>;\n  }): ASTv1.BlockStatement {\n    return {\n      type: 'BlockStatement',\n      path: path,\n      params,\n      hash,\n      program: defaultBlock,\n      inverse: elseBlock,\n      loc,\n      openStrip,\n      inverseStrip,\n      closeStrip,\n    };\n  }\n\n  comment({ value, loc }: { value: string; loc: SourceSpan }): ASTv1.CommentStatement {\n    return {\n      type: 'CommentStatement',\n      value,\n      loc,\n    };\n  }\n\n  mustacheComment({\n    value,\n    loc,\n  }: {\n    value: string;\n    loc: SourceSpan;\n  }): ASTv1.MustacheCommentStatement {\n    return {\n      type: 'MustacheCommentStatement',\n      value,\n      loc,\n    };\n  }\n\n  concat({\n    parts,\n    loc,\n  }: {\n    parts: PresentArray<ASTv1.TextNode | ASTv1.MustacheStatement>;\n    loc: SourceSpan;\n  }): ASTv1.ConcatStatement {\n    return {\n      type: 'ConcatStatement',\n      parts,\n      loc,\n    };\n  }\n\n  element({\n    path,\n    selfClosing,\n    attributes,\n    modifiers,\n    params,\n    comments,\n    children,\n    openTag,\n    closeTag,\n    loc,\n  }: {\n    path: ASTv1.PathExpression;\n    selfClosing: boolean;\n    attributes: ASTv1.AttrNode[];\n    modifiers: ASTv1.ElementModifierStatement[];\n    params: ASTv1.VarHead[];\n    children: ASTv1.Statement[];\n    comments: ASTv1.MustacheCommentStatement[];\n    openTag: SourceSpan;\n    closeTag: Nullable<SourceSpan>;\n    loc: SourceSpan;\n  }): ASTv1.ElementNode {\n    let _selfClosing = selfClosing;\n\n    return {\n      type: 'ElementNode',\n      path,\n      attributes,\n      modifiers,\n      params,\n      comments,\n      children,\n      openTag,\n      closeTag,\n      loc,\n      get tag() {\n        return this.path.original;\n      },\n      set tag(name: string) {\n        this.path.original = name;\n      },\n      get blockParams() {\n        return this.params.map((p) => p.name);\n      },\n      set blockParams(params: string[]) {\n        this.params = params.map((name) => {\n          return b.var({ name, loc: SourceSpan.synthetic(name) });\n        });\n      },\n      get selfClosing() {\n        return _selfClosing;\n      },\n      set selfClosing(selfClosing: boolean) {\n        _selfClosing = selfClosing;\n\n        if (selfClosing) {\n          this.closeTag = null;\n        } else {\n          this.closeTag = SourceSpan.synthetic(`</${this.tag}>`);\n        }\n      },\n    };\n  }\n\n  elementModifier({\n    path,\n    params,\n    hash,\n    loc,\n  }: {\n    path: ASTv1.PathExpression | ASTv1.SubExpression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    loc: SourceSpan;\n  }): ASTv1.ElementModifierStatement {\n    return {\n      type: 'ElementModifierStatement',\n      path,\n      params,\n      hash,\n      loc,\n    };\n  }\n\n  attr({\n    name,\n    value,\n    loc,\n  }: {\n    name: string;\n    value: ASTv1.AttrNode['value'];\n    loc: SourceSpan;\n  }): ASTv1.AttrNode {\n    return {\n      type: 'AttrNode',\n      name: name,\n      value: value,\n      loc,\n    };\n  }\n\n  text({ chars, loc }: { chars: string; loc: SourceSpan }): ASTv1.TextNode {\n    return {\n      type: 'TextNode',\n      chars,\n      loc,\n    };\n  }\n\n  sexpr({\n    path,\n    params,\n    hash,\n    loc,\n  }: {\n    path: ASTv1.PathExpression | ASTv1.SubExpression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    loc: SourceSpan;\n  }): ASTv1.SubExpression {\n    return {\n      type: 'SubExpression',\n      path,\n      params,\n      hash,\n      loc,\n    };\n  }\n\n  path({\n    head,\n    tail,\n    loc,\n  }: {\n    head: ASTv1.PathHead;\n    tail: string[];\n    loc: SourceSpan;\n  }): ASTv1.PathExpression {\n    return buildLegacyPath({ head, tail, loc });\n  }\n\n  head({ original, loc }: { original: string; loc: SourceSpan }): ASTv1.PathHead {\n    if (original === 'this') {\n      return this.this({ loc });\n    }\n    if (original[0] === '@') {\n      return this.atName({ name: original, loc });\n    } else {\n      return this.var({ name: original, loc });\n    }\n  }\n\n  this({ loc }: { loc: SourceSpan }): ASTv1.ThisHead {\n    return {\n      type: 'ThisHead',\n      get original() {\n        return 'this' as const;\n      },\n      loc,\n    };\n  }\n\n  atName({ name, loc }: { name: string; loc: SourceSpan }): ASTv1.AtHead {\n    let _name = '';\n\n    const node = {\n      type: 'AtHead' as const,\n      get name() {\n        return _name;\n      },\n      set name(value) {\n        assert(value[0] === '@', `call builders.at() with a string that starts with '@'`);\n        assert(\n          value.indexOf('.') === -1,\n          `builder.at() should not be called with a name with dots in it`\n        );\n        _name = value;\n      },\n      get original() {\n        return this.name;\n      },\n      set original(value) {\n        this.name = value;\n      },\n      loc,\n    };\n\n    // trigger the assertions\n    node.name = name;\n\n    return node;\n  }\n\n  var({ name, loc }: { name: string; loc: SourceSpan }): ASTv1.VarHead {\n    let _name = '';\n\n    const node = {\n      type: 'VarHead' as const,\n      get name() {\n        return _name;\n      },\n      set name(value) {\n        assert(\n          value !== 'this',\n          `You called builders.var() with 'this'. Call builders.this instead`\n        );\n        assert(\n          value[0] !== '@',\n          `You called builders.var() with '${name}'. Call builders.at('${name}') instead`\n        );\n        assert(\n          value.indexOf('.') === -1,\n          `builder.var() should not be called with a name with dots in it`\n        );\n        _name = value;\n      },\n      get original() {\n        return this.name;\n      },\n      set original(value) {\n        this.name = value;\n      },\n      loc,\n    };\n\n    // trigger the assertions\n    node.name = name;\n\n    return node;\n  }\n\n  hash({ pairs, loc }: { pairs: ASTv1.HashPair[]; loc: SourceSpan }): ASTv1.Hash {\n    return {\n      type: 'Hash',\n      pairs,\n      loc,\n    };\n  }\n\n  pair({\n    key,\n    value,\n    loc,\n  }: {\n    key: string;\n    value: ASTv1.Expression;\n    loc: SourceSpan;\n  }): ASTv1.HashPair {\n    return {\n      type: 'HashPair',\n      key,\n      value,\n      loc,\n    };\n  }\n\n  literal<T extends ASTv1.Literal>({\n    type,\n    value,\n    loc,\n  }: {\n    type: T['type'];\n    value: T['value'];\n    loc: SourceSpan;\n  }): T {\n    return buildLegacyLiteral({ type, value, loc });\n  }\n}\n\nconst b = new Builders();\n\nexport default b;\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { asPresentArray, deprecate } from '@glimmer/debug-util';\n\nimport type * as ASTv1 from './nodes-v1';\n\nimport b from './public-builders';\n\nexport type MustacheStatementParams = Omit<ASTv1.MustacheStatement, 'type' | 'escaped'>;\n\nexport function buildLegacyMustache({\n  path,\n  params,\n  hash,\n  trusting,\n  strip,\n  loc,\n}: MustacheStatementParams): ASTv1.MustacheStatement {\n  const node = {\n    type: 'MustacheStatement',\n    path,\n    params,\n    hash,\n    trusting,\n    strip,\n    loc,\n  };\n\n  Object.defineProperty(node, 'escaped', {\n    enumerable: false,\n    get(this: typeof node): boolean {\n      deprecate(`The escaped property on mustache nodes is deprecated, use trusting instead`);\n      return !this.trusting;\n    },\n    set(this: typeof node, value: boolean) {\n      deprecate(`The escaped property on mustache nodes is deprecated, use trusting instead`);\n      this.trusting = !value;\n    },\n  });\n\n  return node as ASTv1.MustacheStatement;\n}\n\nexport type PathExpressionParams = Omit<ASTv1.MinimalPathExpression, 'type'>;\n\nexport function buildLegacyPath({ head, tail, loc }: PathExpressionParams): ASTv1.PathExpression {\n  const node = {\n    type: 'PathExpression',\n    head,\n    tail,\n    get original() {\n      return [this.head.original, ...this.tail].join('.');\n    },\n    set original(value: string) {\n      let [head, ...tail] = asPresentArray(value.split('.'));\n      this.head = b.head(head, this.head.loc);\n      this.tail = tail;\n    },\n    loc,\n  };\n\n  Object.defineProperty(node, 'parts', {\n    enumerable: false,\n    get(this: { original: string }): readonly string[] {\n      deprecate(`The parts property on path nodes is deprecated, use head and tail instead`);\n      let parts = asPresentArray(this.original.split('.'));\n\n      if (parts[0] === 'this') {\n        // parts does not include `this`\n        parts.shift();\n      } else if (parts[0].startsWith('@')) {\n        // parts does not include leading `@`\n        parts[0] = parts[0].slice(1);\n      }\n\n      return Object.freeze(parts);\n    },\n    set(this: { head: ASTv1.PathHead; original: string }, values: PresentArray<string>) {\n      deprecate(`The parts property on mustache nodes is deprecated, use head and tail instead`);\n\n      let parts = [...values];\n\n      // you are not supposed to already have `this` or `@` in the parts, but since this is\n      // deprecated anyway, we will infer what you meant and allow it\n      if (parts[0] !== 'this' && !parts[0]?.startsWith('@')) {\n        if (this.head.type === 'ThisHead') {\n          parts.unshift('this');\n        } else if (this.head.type === 'AtHead') {\n          parts[0] = `@${parts[0]}`;\n        }\n      }\n\n      this.original = parts.join('.');\n    },\n  });\n\n  Object.defineProperty(node, 'this', {\n    enumerable: false,\n    get(this: typeof node): boolean {\n      deprecate(`The this property on path nodes is deprecated, use head.type instead`);\n      return this.head.type === 'ThisHead';\n    },\n  });\n\n  Object.defineProperty(node, 'data', {\n    enumerable: false,\n    get(this: typeof node): boolean {\n      deprecate(`The data property on path nodes is deprecated, use head.type instead`);\n      return this.head.type === 'AtHead';\n    },\n  });\n\n  return node as ASTv1.PathExpression;\n}\n\nexport function buildLegacyLiteral<T extends ASTv1.Literal>({\n  type,\n  value,\n  loc,\n}: {\n  type: T['type'];\n  value: T['value'];\n  loc: T['loc'];\n}): T {\n  const node = {\n    type,\n    value,\n    loc,\n  };\n\n  Object.defineProperty(node, 'original', {\n    enumerable: false,\n    get(this: typeof node): T['original'] {\n      deprecate(`The original property on literal nodes is deprecated, use value instead`);\n      return this.value;\n    },\n    set(this: typeof node, value: T['original']) {\n      deprecate(`The original property on literal nodes is deprecated, use value instead`);\n      this.value = value;\n    },\n  });\n\n  return node as T;\n}\n","import type { Nullable } from '@glimmer/interfaces';\nimport { asPresentArray, assert, expect, getLast, unwrap } from '@glimmer/debug-util';\nimport { assign } from '@glimmer/util';\nimport {\n  EntityParser,\n  EventedTokenizer,\n  HTML5NamedCharRefs as namedCharRefs,\n} from 'simple-html-tokenizer';\n\nimport type * as src from './source/api';\nimport type * as ASTv1 from './v1/api';\nimport type * as HBS from './v1/handlebars-ast';\n\nexport type ParserNodeBuilder<N extends { loc: src.SourceSpan }> = Omit<N, 'loc'> & {\n  start: src.SourceOffset;\n};\n\nexport interface StartTag {\n  readonly type: 'StartTag';\n  name: string;\n  nameStart: Nullable<src.SourceOffset>;\n  nameEnd: Nullable<src.SourceOffset>;\n  readonly attributes: ASTv1.AttrNode[];\n  readonly modifiers: ASTv1.ElementModifierStatement[];\n  readonly comments: ASTv1.MustacheCommentStatement[];\n  readonly params: ASTv1.VarHead[];\n  selfClosing: boolean;\n  readonly loc: src.SourceSpan;\n}\n\nexport interface EndTag {\n  readonly type: 'EndTag';\n  name: string;\n  readonly loc: src.SourceSpan;\n}\n\nexport interface Attribute {\n  name: string;\n  currentPart: ASTv1.TextNode | null;\n  parts: (ASTv1.MustacheStatement | ASTv1.TextNode)[];\n  isQuoted: boolean;\n  isDynamic: boolean;\n  start: src.SourceOffset;\n  valueSpan: src.SourceSpan;\n}\n\nexport abstract class Parser {\n  protected elementStack: ASTv1.ParentNode[] = [];\n  private lines: string[];\n  readonly source: src.Source;\n  public currentAttribute: Nullable<Attribute> = null;\n  public currentNode: Nullable<\n    Readonly<\n      | ParserNodeBuilder<ASTv1.CommentStatement>\n      | ParserNodeBuilder<ASTv1.TextNode>\n      | ParserNodeBuilder<StartTag>\n      | ParserNodeBuilder<EndTag>\n    >\n  > = null;\n  public tokenizer: EventedTokenizer;\n\n  constructor(\n    source: src.Source,\n    entityParser = new EntityParser(namedCharRefs),\n    mode: 'precompile' | 'codemod' = 'precompile'\n  ) {\n    this.source = source;\n    this.lines = source.source.split(/\\r\\n?|\\n/u);\n    this.tokenizer = new EventedTokenizer(this, entityParser, mode);\n  }\n\n  offset(): src.SourceOffset {\n    let { line, column } = this.tokenizer;\n    return this.source.offsetFor(line, column);\n  }\n\n  pos({ line, column }: src.SourcePosition): src.SourceOffset {\n    return this.source.offsetFor(line, column);\n  }\n\n  finish<T extends { loc: src.SourceSpan }>(node: ParserNodeBuilder<T>): T {\n    return assign({}, node, {\n      loc: node.start.until(this.offset()),\n    } as const) as unknown as T;\n\n    // node.loc = node.loc.withEnd(end);\n  }\n\n  abstract parse(node: HBS.Program, locals: string[]): ASTv1.Template;\n\n  abstract Program(node: HBS.Program): HBS.Output<'Program'>;\n  abstract MustacheStatement(node: HBS.MustacheStatement): HBS.Output<'MustacheStatement'>;\n  abstract Decorator(node: HBS.Decorator): HBS.Output<'Decorator'>;\n  abstract BlockStatement(node: HBS.BlockStatement): HBS.Output<'BlockStatement'>;\n  abstract DecoratorBlock(node: HBS.DecoratorBlock): HBS.Output<'DecoratorBlock'>;\n  abstract PartialStatement(node: HBS.PartialStatement): HBS.Output<'PartialStatement'>;\n  abstract PartialBlockStatement(\n    node: HBS.PartialBlockStatement\n  ): HBS.Output<'PartialBlockStatement'>;\n  abstract ContentStatement(node: HBS.ContentStatement): HBS.Output<'ContentStatement'>;\n  abstract CommentStatement(node: HBS.CommentStatement): HBS.Output<'CommentStatement'>;\n  abstract SubExpression(node: HBS.SubExpression): HBS.Output<'SubExpression'>;\n  abstract PathExpression(node: HBS.PathExpression): HBS.Output<'PathExpression'>;\n  abstract StringLiteral(node: HBS.StringLiteral): HBS.Output<'StringLiteral'>;\n  abstract BooleanLiteral(node: HBS.BooleanLiteral): HBS.Output<'BooleanLiteral'>;\n  abstract NumberLiteral(node: HBS.NumberLiteral): HBS.Output<'NumberLiteral'>;\n  abstract UndefinedLiteral(node: HBS.UndefinedLiteral): HBS.Output<'UndefinedLiteral'>;\n  abstract NullLiteral(node: HBS.NullLiteral): HBS.Output<'NullLiteral'>;\n\n  abstract reset(): void;\n  abstract finishData(): void;\n  abstract tagOpen(): void;\n  abstract beginData(): void;\n  abstract appendToData(char: string): void;\n  abstract beginStartTag(): void;\n  abstract appendToTagName(char: string): void;\n  abstract beginAttribute(): void;\n  abstract appendToAttributeName(char: string): void;\n  abstract beginAttributeValue(quoted: boolean): void;\n  abstract appendToAttributeValue(char: string): void;\n  abstract finishAttributeValue(): void;\n  abstract markTagAsSelfClosing(): void;\n  abstract beginEndTag(): void;\n  abstract finishTag(): void;\n  abstract beginComment(): void;\n  abstract appendToCommentData(char: string): void;\n  abstract finishComment(): void;\n  abstract reportSyntaxError(error: string): void;\n\n  get currentAttr(): Attribute {\n    return expect(this.currentAttribute, 'expected attribute');\n  }\n\n  get currentTag(): ParserNodeBuilder<StartTag> | ParserNodeBuilder<EndTag> {\n    let node = this.currentNode;\n    assert(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag');\n    return node;\n  }\n\n  get currentStartTag(): ParserNodeBuilder<StartTag> {\n    let node = this.currentNode;\n    assert(node && node.type === 'StartTag', 'expected start tag');\n    return node;\n  }\n\n  get currentEndTag(): ParserNodeBuilder<EndTag> {\n    let node = this.currentNode;\n    assert(node && node.type === 'EndTag', 'expected end tag');\n    return node;\n  }\n\n  get currentComment(): ParserNodeBuilder<ASTv1.CommentStatement> {\n    let node = this.currentNode;\n    assert(node && node.type === 'CommentStatement', 'expected a comment');\n    return node;\n  }\n\n  get currentData(): ParserNodeBuilder<ASTv1.TextNode> {\n    let node = this.currentNode;\n    assert(node && node.type === 'TextNode', 'expected a text node');\n    return node;\n  }\n\n  acceptNode<T extends HBS.NodeType>(node: HBS.Node<T>): HBS.Output<T> {\n    return (this[node.type as T] as (node: HBS.Node<T>) => HBS.Output<T>)(node);\n  }\n\n  currentElement(): ASTv1.ParentNode {\n    return getLast(asPresentArray(this.elementStack));\n  }\n\n  sourceForNode(node: HBS.Node, endNode?: { loc: HBS.SourceLocation }): string {\n    let firstLine = node.loc.start.line - 1;\n    let currentLine = firstLine - 1;\n    let firstColumn = node.loc.start.column;\n    let string = [];\n    let line: string;\n\n    let lastLine: number;\n    let lastColumn: number;\n\n    if (endNode) {\n      lastLine = endNode.loc.end.line - 1;\n      lastColumn = endNode.loc.end.column;\n    } else {\n      lastLine = node.loc.end.line - 1;\n      lastColumn = node.loc.end.column;\n    }\n\n    while (currentLine < lastLine) {\n      currentLine++;\n      line = unwrap(this.lines[currentLine]);\n\n      if (currentLine === firstLine) {\n        if (firstLine === lastLine) {\n          string.push(line.slice(firstColumn, lastColumn));\n        } else {\n          string.push(line.slice(firstColumn));\n        }\n      } else if (currentLine === lastLine) {\n        string.push(line.slice(0, lastColumn));\n      } else {\n        string.push(line);\n      }\n    }\n\n    return string.join('\\n');\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\nimport type { Nullable, Recast } from '@glimmer/interfaces';\nimport type { TokenizerState } from 'simple-html-tokenizer';\nimport { assert, getLast, isPresentArray, unwrap } from '@glimmer/debug-util';\n\nimport type { ParserNodeBuilder, StartTag } from '../parser';\nimport type { SourceOffset, SourceSpan } from '../source/span';\nimport type * as ASTv1 from '../v1/api';\nimport type * as HBS from '../v1/handlebars-ast';\n\nimport { Parser } from '../parser';\nimport { NON_EXISTENT_LOCATION } from '../source/location';\nimport { generateSyntaxError } from '../syntax-error';\nimport { appendChild, isHBSLiteral, printLiteral } from '../utils';\nimport b from '../v1/parser-builders';\n\nconst BEFORE_ATTRIBUTE_NAME = 'beforeAttributeName' as TokenizerState.beforeAttributeName;\nconst ATTRIBUTE_VALUE_UNQUOTED = 'attributeValueUnquoted' as TokenizerState.attributeValueUnquoted;\n\nexport interface PendingError {\n  mustache(span: SourceSpan): never;\n  eof(offset: SourceOffset): never;\n}\n\nexport abstract class HandlebarsNodeVisitors extends Parser {\n  // Because we interleave the HTML and HBS parsing, sometimes the HTML\n  // tokenizer can run out of tokens when we switch into {{...}} or reached\n  // EOF. There are positions where neither of these are expected, and it would\n  // like to generate an error, but there is no span to attach the error to.\n  // This allows the HTML tokenization to stash an error message and the next\n  // mustache visitor will attach the message to the appropriate span and throw\n  // the error.\n  protected pendingError: Nullable<PendingError> = null;\n\n  abstract override appendToCommentData(s: string): void;\n  abstract override beginAttributeValue(quoted: boolean): void;\n  abstract override finishAttributeValue(): void;\n\n  parse(program: HBS.Program, blockParams: string[]): ASTv1.Template {\n    let node = b.template({\n      body: [],\n      blockParams,\n      loc: this.source.spanFor(program.loc),\n    });\n\n    let template = this.parseProgram(node, program);\n\n    // TODO: we really need to verify that the tokenizer is in an acceptable\n    // state when we are \"done\" parsing. For example, right now, `<foo` parses\n    // into `Template { body: [] }` which is obviously incorrect\n\n    this.pendingError?.eof(template.loc.getEnd());\n\n    return template;\n  }\n\n  Program(program: HBS.Program, blockParams?: ASTv1.VarHead[]): ASTv1.Block {\n    // The abstract signature doesn't have the blockParams argument, but in\n    // practice we can only come from this.BlockStatement() which adds the\n    // extra argument for us\n    assert(\n      Array.isArray(blockParams),\n      '[BUG] Program in parser unexpectedly called without block params'\n    );\n\n    let node = b.blockItself({\n      body: [],\n      params: blockParams,\n      chained: program.chained,\n      loc: this.source.spanFor(program.loc),\n    });\n\n    return this.parseProgram(node, program);\n  }\n\n  private parseProgram<T extends ASTv1.ParentNode>(node: T, program: HBS.Program): T {\n    if (program.body.length === 0) {\n      return node;\n    }\n\n    let poppedNode;\n\n    try {\n      this.elementStack.push(node);\n\n      for (let child of program.body) {\n        this.acceptNode(child);\n      }\n    } finally {\n      poppedNode = this.elementStack.pop();\n    }\n\n    // Ensure that that the element stack is balanced properly.\n    if (node !== poppedNode) {\n      if (poppedNode?.type === 'ElementNode') {\n        throw generateSyntaxError(`Unclosed element \\`${poppedNode.tag}\\``, poppedNode.loc);\n      } else {\n        // If the stack is not balanced, then it is likely our own bug, because\n        // any unclosed Handlebars blocks should already been caught by now\n        assert(poppedNode !== undefined, '[BUG] empty parser elementStack');\n        assert(false, `[BUG] mismatched parser elementStack node: ${node.type}`);\n      }\n    }\n\n    return node;\n  }\n\n  BlockStatement(block: HBS.BlockStatement): ASTv1.BlockStatement | void {\n    if (this.tokenizer.state === 'comment') {\n      this.appendToCommentData(this.sourceForNode(block));\n      return;\n    }\n\n    if (this.tokenizer.state !== 'data' && this.tokenizer.state !== 'beforeData') {\n      throw generateSyntaxError(\n        'A block may only be used inside an HTML element or another block.',\n        this.source.spanFor(block.loc)\n      );\n    }\n\n    const { path, params, hash } = acceptCallNodes(this, block);\n    const loc = this.source.spanFor(block.loc);\n\n    // Backfill block params loc for the default block\n    let blockParams: ASTv1.VarHead[] = [];\n\n    if (block.program.blockParams?.length) {\n      // Start from right after the hash\n      let span = hash.loc.collapse('end');\n\n      // Extend till the beginning of the block\n      if (block.program.loc) {\n        span = span.withEnd(this.source.spanFor(block.program.loc).getStart());\n      } else if (block.program.body[0]) {\n        span = span.withEnd(this.source.spanFor(block.program.body[0].loc).getStart());\n      } else {\n        // ...or if all else fail, use the end of the block statement\n        // this can only happen if the block statement is empty anyway\n        span = span.withEnd(loc.getEnd());\n      }\n\n      // Now we have a span for something like this:\n      //\n      //   {{#foo bar baz=bat as |wow wat|}}\n      //                     ~~~~~~~~~~~~~~~\n      //\n      // Or, if we are unlucky:\n      //\n      // {{#foo bar baz=bat as |wow wat|}}{{/foo}}\n      //                   ~~~~~~~~~~~~~~~~~~~~~~~\n      //\n      // Either way, within this span, there should be exactly two pipes\n      // fencing our block params, neatly whitespace separated and with\n      // legal identifiers only\n      const content = span.asString();\n      let skipStart = content.indexOf('|') + 1;\n      const limit = content.indexOf('|', skipStart);\n\n      for (const name of block.program.blockParams) {\n        let nameStart: number;\n        let loc: SourceSpan;\n\n        if (skipStart >= limit) {\n          nameStart = -1;\n        } else {\n          nameStart = content.indexOf(name, skipStart);\n        }\n\n        if (nameStart === -1 || nameStart + name.length > limit) {\n          skipStart = limit;\n          loc = this.source.spanFor(NON_EXISTENT_LOCATION);\n        } else {\n          skipStart = nameStart;\n          loc = span.sliceStartChars({ skipStart, chars: name.length });\n          skipStart += name.length;\n        }\n\n        blockParams.push(b.var({ name, loc }));\n      }\n    }\n\n    // These are bugs in Handlebars upstream\n    if (!block.program.loc) {\n      block.program.loc = NON_EXISTENT_LOCATION;\n    }\n\n    if (block.inverse && !block.inverse.loc) {\n      block.inverse.loc = NON_EXISTENT_LOCATION;\n    }\n\n    const program = this.Program(block.program, blockParams);\n    const inverse = block.inverse ? this.Program(block.inverse, []) : null;\n\n    const node = b.block({\n      path,\n      params,\n      hash,\n      defaultBlock: program,\n      elseBlock: inverse,\n      loc: this.source.spanFor(block.loc),\n      openStrip: block.openStrip,\n      inverseStrip: block.inverseStrip,\n      closeStrip: block.closeStrip,\n    });\n\n    const parentProgram = this.currentElement();\n\n    appendChild(parentProgram, node);\n  }\n\n  MustacheStatement(rawMustache: HBS.MustacheStatement): ASTv1.MustacheStatement | void {\n    this.pendingError?.mustache(this.source.spanFor(rawMustache.loc));\n\n    const { tokenizer } = this;\n\n    if (tokenizer.state === 'comment') {\n      this.appendToCommentData(this.sourceForNode(rawMustache));\n      return;\n    }\n\n    let mustache: ASTv1.MustacheStatement;\n    const { escaped, loc, strip } = rawMustache;\n\n    if ('original' in rawMustache.path && rawMustache.path.original === '...attributes') {\n      throw generateSyntaxError(\n        'Illegal use of ...attributes',\n        this.source.spanFor(rawMustache.loc)\n      );\n    }\n\n    if (isHBSLiteral(rawMustache.path)) {\n      mustache = b.mustache({\n        path: this.acceptNode<(typeof rawMustache.path)['type']>(rawMustache.path),\n        params: [],\n        hash: b.hash({ pairs: [], loc: this.source.spanFor(rawMustache.path.loc).collapse('end') }),\n        trusting: !escaped,\n        loc: this.source.spanFor(loc),\n        strip,\n      });\n    } else {\n      const { path, params, hash } = acceptCallNodes(\n        this,\n        rawMustache as HBS.MustacheStatement & {\n          path: HBS.PathExpression | HBS.SubExpression;\n        }\n      );\n      mustache = b.mustache({\n        path,\n        params,\n        hash,\n        trusting: !escaped,\n        loc: this.source.spanFor(loc),\n        strip,\n      });\n    }\n\n    switch (tokenizer.state) {\n      // Tag helpers\n      case 'tagOpen':\n      case 'tagName':\n        throw generateSyntaxError(`Cannot use mustaches in an elements tagname`, mustache.loc);\n\n      case 'beforeAttributeName':\n        addElementModifier(this.currentStartTag, mustache);\n        break;\n      case 'attributeName':\n      case 'afterAttributeName':\n        this.beginAttributeValue(false);\n        this.finishAttributeValue();\n        addElementModifier(this.currentStartTag, mustache);\n        tokenizer.transitionTo(BEFORE_ATTRIBUTE_NAME);\n        break;\n      case 'afterAttributeValueQuoted':\n        addElementModifier(this.currentStartTag, mustache);\n        tokenizer.transitionTo(BEFORE_ATTRIBUTE_NAME);\n        break;\n\n      // Attribute values\n      case 'beforeAttributeValue':\n        this.beginAttributeValue(false);\n        this.appendDynamicAttributeValuePart(mustache);\n        tokenizer.transitionTo(ATTRIBUTE_VALUE_UNQUOTED);\n        break;\n      case 'attributeValueDoubleQuoted':\n      case 'attributeValueSingleQuoted':\n      case 'attributeValueUnquoted':\n        this.appendDynamicAttributeValuePart(mustache);\n        break;\n\n      // TODO: Only append child when the tokenizer state makes\n      // sense to do so, otherwise throw an error.\n      default:\n        appendChild(this.currentElement(), mustache);\n    }\n\n    return mustache;\n  }\n\n  appendDynamicAttributeValuePart(part: ASTv1.MustacheStatement): void {\n    this.finalizeTextPart();\n    const attr = this.currentAttr;\n    attr.isDynamic = true;\n    attr.parts.push(part);\n  }\n\n  finalizeTextPart(): void {\n    const attr = this.currentAttr;\n    const text = attr.currentPart;\n    if (text !== null) {\n      this.currentAttr.parts.push(text);\n      this.startTextPart();\n    }\n  }\n\n  startTextPart(): void {\n    this.currentAttr.currentPart = null;\n  }\n\n  ContentStatement(content: HBS.ContentStatement): void {\n    updateTokenizerLocation(this.tokenizer, content);\n\n    this.tokenizer.tokenizePart(content.value);\n    this.tokenizer.flushData();\n  }\n\n  CommentStatement(rawComment: HBS.CommentStatement): Nullable<ASTv1.MustacheCommentStatement> {\n    const { tokenizer } = this;\n\n    if (tokenizer.state === 'comment') {\n      this.appendToCommentData(this.sourceForNode(rawComment));\n      return null;\n    }\n\n    const { value, loc } = rawComment;\n    const comment = b.mustacheComment({ value, loc: this.source.spanFor(loc) });\n\n    switch (tokenizer.state) {\n      case 'beforeAttributeName':\n      case 'afterAttributeName':\n        this.currentStartTag.comments.push(comment);\n        break;\n\n      case 'beforeData':\n      case 'data':\n        appendChild(this.currentElement(), comment);\n        break;\n\n      default:\n        throw generateSyntaxError(\n          `Using a Handlebars comment when in the \\`${tokenizer['state']}\\` state is not supported`,\n          this.source.spanFor(rawComment.loc)\n        );\n    }\n\n    return comment;\n  }\n\n  PartialStatement(partial: HBS.PartialStatement): never {\n    throw generateSyntaxError(\n      `Handlebars partials are not supported`,\n      this.source.spanFor(partial.loc)\n    );\n  }\n\n  PartialBlockStatement(partialBlock: HBS.PartialBlockStatement): never {\n    throw generateSyntaxError(\n      `Handlebars partial blocks are not supported`,\n      this.source.spanFor(partialBlock.loc)\n    );\n  }\n\n  Decorator(decorator: HBS.Decorator): never {\n    throw generateSyntaxError(\n      `Handlebars decorators are not supported`,\n      this.source.spanFor(decorator.loc)\n    );\n  }\n\n  DecoratorBlock(decoratorBlock: HBS.DecoratorBlock): never {\n    throw generateSyntaxError(\n      `Handlebars decorator blocks are not supported`,\n      this.source.spanFor(decoratorBlock.loc)\n    );\n  }\n\n  SubExpression(sexpr: HBS.SubExpression): ASTv1.SubExpression {\n    const { path, params, hash } = acceptCallNodes(this, sexpr);\n    return b.sexpr({ path, params, hash, loc: this.source.spanFor(sexpr.loc) });\n  }\n\n  PathExpression(path: HBS.PathExpression): ASTv1.PathExpression {\n    const { original } = path;\n    let parts: string[];\n\n    if (original.indexOf('/') !== -1) {\n      if (original.slice(0, 2) === './') {\n        throw generateSyntaxError(\n          `Using \"./\" is not supported in Glimmer and unnecessary`,\n          this.source.spanFor(path.loc)\n        );\n      }\n      if (original.slice(0, 3) === '../') {\n        throw generateSyntaxError(\n          `Changing context using \"../\" is not supported in Glimmer`,\n          this.source.spanFor(path.loc)\n        );\n      }\n      if (original.indexOf('.') !== -1) {\n        throw generateSyntaxError(\n          `Mixing '.' and '/' in paths is not supported in Glimmer; use only '.' to separate property paths`,\n          this.source.spanFor(path.loc)\n        );\n      }\n      parts = [path.parts.join('/')];\n    } else if (original === '.') {\n      throw generateSyntaxError(\n        `'.' is not a supported path in Glimmer; check for a path with a trailing '.'`,\n        this.source.spanFor(path.loc)\n      );\n    } else {\n      parts = path.parts;\n    }\n\n    let thisHead = false;\n\n    // This is to fix a bug in the Handlebars AST where the path expressions in\n    // `{{this.foo}}` (and similarly `{{foo-bar this.foo named=this.foo}}` etc)\n    // are simply turned into `{{foo}}`. The fix is to push it back onto the\n    // parts array and let the runtime see the difference. However, we cannot\n    // simply use the string `this` as it means literally the property called\n    // \"this\" in the current context (it can be expressed in the syntax as\n    // `{{[this]}}`, where the square bracket are generally for this kind of\n    // escaping – such as `{{foo.[\"bar.baz\"]}}` would mean lookup a property\n    // named literally \"bar.baz\" on `this.foo`). By convention, we use `null`\n    // for this purpose.\n    if (/^this(?:\\..+)?$/u.test(original)) {\n      thisHead = true;\n    }\n\n    let pathHead: ASTv1.PathHead;\n    if (thisHead) {\n      pathHead = b.this({\n        loc: this.source.spanFor({\n          start: path.loc.start,\n          end: { line: path.loc.start.line, column: path.loc.start.column + 4 },\n        }),\n      });\n    } else if (path.data) {\n      const head = parts.shift();\n\n      if (head === undefined) {\n        throw generateSyntaxError(\n          `Attempted to parse a path expression, but it was not valid. Paths beginning with @ must start with a-z.`,\n          this.source.spanFor(path.loc)\n        );\n      }\n\n      pathHead = b.atName({\n        name: `@${head}`,\n        loc: this.source.spanFor({\n          start: path.loc.start,\n          end: { line: path.loc.start.line, column: path.loc.start.column + head.length + 1 },\n        }),\n      });\n    } else {\n      const head = parts.shift();\n\n      if (head === undefined) {\n        throw generateSyntaxError(\n          `Attempted to parse a path expression, but it was not valid. Paths must start with a-z or A-Z.`,\n          this.source.spanFor(path.loc)\n        );\n      }\n\n      pathHead = b.var({\n        name: head,\n        loc: this.source.spanFor({\n          start: path.loc.start,\n          end: { line: path.loc.start.line, column: path.loc.start.column + head.length },\n        }),\n      });\n    }\n\n    return b.path({\n      head: pathHead,\n      tail: parts,\n      loc: this.source.spanFor(path.loc),\n    });\n  }\n\n  Hash(hash: HBS.Hash): ASTv1.Hash {\n    const pairs = hash.pairs.map((pair) =>\n      b.pair({\n        key: pair.key,\n        value: this.acceptNode<HBS.Expression['type']>(pair.value),\n        loc: this.source.spanFor(pair.loc),\n      })\n    );\n\n    return b.hash({ pairs, loc: this.source.spanFor(hash.loc) });\n  }\n\n  StringLiteral(string: HBS.StringLiteral): ASTv1.StringLiteral {\n    return b.literal({\n      type: 'StringLiteral',\n      value: string.value,\n      loc: this.source.spanFor(string.loc),\n    });\n  }\n\n  BooleanLiteral(boolean: HBS.BooleanLiteral): ASTv1.BooleanLiteral {\n    return b.literal({\n      type: 'BooleanLiteral',\n      value: boolean.value,\n      loc: this.source.spanFor(boolean.loc),\n    });\n  }\n\n  NumberLiteral(number: HBS.NumberLiteral): ASTv1.NumberLiteral {\n    return b.literal({\n      type: 'NumberLiteral',\n      value: number.value,\n      loc: this.source.spanFor(number.loc),\n    });\n  }\n\n  UndefinedLiteral(undef: HBS.UndefinedLiteral): ASTv1.UndefinedLiteral {\n    return b.literal({\n      type: 'UndefinedLiteral',\n      value: undefined,\n      loc: this.source.spanFor(undef.loc),\n    });\n  }\n\n  NullLiteral(nul: HBS.NullLiteral): ASTv1.NullLiteral {\n    return b.literal({\n      type: 'NullLiteral',\n      value: null,\n      loc: this.source.spanFor(nul.loc),\n    });\n  }\n}\n\nfunction calculateRightStrippedOffsets(original: string, value: string) {\n  if (value === '') {\n    // if it is empty, just return the count of newlines\n    // in original\n    return {\n      lines: original.split('\\n').length - 1,\n      columns: 0,\n    };\n  }\n\n  // otherwise, return the number of newlines prior to\n  // `value`\n  const [difference] = original.split(value) as [string];\n  const lines = difference.split(/\\n/u);\n  const lineCount = lines.length - 1;\n\n  return {\n    lines: lineCount,\n    columns: unwrap(lines[lineCount]).length,\n  };\n}\n\nfunction updateTokenizerLocation(tokenizer: Parser['tokenizer'], content: HBS.ContentStatement) {\n  let line = content.loc.start.line;\n  let column = content.loc.start.column;\n\n  const offsets = calculateRightStrippedOffsets(\n    content.original as Recast<HBS.StripFlags, string>,\n    content.value\n  );\n\n  line = line + offsets.lines;\n  if (offsets.lines) {\n    column = offsets.columns;\n  } else {\n    column = column + offsets.columns;\n  }\n\n  tokenizer.line = line;\n  tokenizer.column = column;\n}\n\nfunction acceptCallNodes(\n  compiler: HandlebarsNodeVisitors,\n  node: {\n    path:\n      | HBS.PathExpression\n      | HBS.SubExpression\n      | HBS.StringLiteral\n      | HBS.UndefinedLiteral\n      | HBS.NullLiteral\n      | HBS.NumberLiteral\n      | HBS.BooleanLiteral;\n    params: HBS.Expression[];\n    hash: HBS.Hash;\n  }\n): {\n  path: ASTv1.PathExpression | ASTv1.SubExpression;\n  params: ASTv1.Expression[];\n  hash: ASTv1.Hash;\n} {\n  let path: ASTv1.PathExpression | ASTv1.SubExpression;\n\n  switch (node.path.type) {\n    case 'PathExpression':\n      path = compiler.PathExpression(node.path);\n      break;\n\n    case 'SubExpression':\n      path = compiler.SubExpression(node.path);\n      break;\n\n    case 'StringLiteral':\n    case 'UndefinedLiteral':\n    case 'NullLiteral':\n    case 'NumberLiteral':\n    case 'BooleanLiteral': {\n      let value: string;\n      if (node.path.type === 'BooleanLiteral') {\n        value = node.path.original.toString();\n      } else if (node.path.type === 'StringLiteral') {\n        value = `\"${node.path.original}\"`;\n      } else if (node.path.type === 'NullLiteral') {\n        value = 'null';\n      } else if (node.path.type === 'NumberLiteral') {\n        value = node.path.value.toString();\n      } else {\n        value = 'undefined';\n      }\n      throw generateSyntaxError(\n        `${node.path.type} \"${\n          node.path.type === 'StringLiteral' ? node.path.original : value\n        }\" cannot be called as a sub-expression, replace (${value}) with ${value}`,\n        compiler.source.spanFor(node.path.loc)\n      );\n    }\n  }\n\n  const params = node.params\n    ? node.params.map((e) => compiler.acceptNode<HBS.Expression['type']>(e))\n    : [];\n\n  // if there is no hash, position it as a collapsed node immediately after the last param (or the\n  // path, if there are also no params)\n  const end = isPresentArray(params) ? getLast(params).loc : path.loc;\n\n  const hash = node.hash\n    ? compiler.Hash(node.hash)\n    : b.hash({\n        pairs: [],\n        loc: compiler.source.spanFor(end).collapse('end'),\n      });\n\n  return { path, params, hash };\n}\n\nfunction addElementModifier(\n  element: ParserNodeBuilder<StartTag>,\n  mustache: ASTv1.MustacheStatement\n) {\n  const { path, params, hash, loc } = mustache;\n\n  if (isHBSLiteral(path)) {\n    const modifier = `{{${printLiteral(path)}}}`;\n    const tag = `<${element.name} ... ${modifier} ...`;\n\n    throw generateSyntaxError(`In ${tag}, ${modifier} is not a valid modifier`, mustache.loc);\n  }\n\n  const modifier = b.elementModifier({ path, params, hash, loc });\n  element.modifiers.push(modifier);\n}\n","import type { Nullable } from '@glimmer/interfaces';\nimport type { TokenizerState } from 'simple-html-tokenizer';\nimport {\n  asPresentArray,\n  assert,\n  assertPresentArray,\n  getFirst,\n  getLast,\n  isPresentArray,\n} from '@glimmer/debug-util';\nimport { assign } from '@glimmer/util';\nimport { parse, parseWithoutProcessing } from '@handlebars/parser';\nimport { EntityParser } from 'simple-html-tokenizer';\n\nimport type { EndTag, StartTag } from '../parser';\nimport type { NodeVisitor } from '../traversal/visitor';\nimport type * as ASTv1 from '../v1/api';\nimport type * as HBS from '../v1/handlebars-ast';\n\nimport print from '../generation/print';\nimport { voidMap } from '../generation/printer';\nimport * as src from '../source/api';\nimport { generateSyntaxError } from '../syntax-error';\nimport traverse from '../traversal/traverse';\nimport Walker from '../traversal/walker';\nimport { appendChild } from '../utils';\nimport b from '../v1/parser-builders';\nimport publicBuilder from '../v1/public-builders';\nimport { HandlebarsNodeVisitors } from './handlebars-node-visitors';\n\n// vendored from simple-html-tokenizer because it's unexported\nfunction isSpace(char: string): boolean {\n  return /[\\t\\n\\f ]/u.test(char);\n}\n\nexport class TokenizerEventHandlers extends HandlebarsNodeVisitors {\n  private tagOpenLine = 0;\n  private tagOpenColumn = 0;\n\n  reset(): void {\n    this.currentNode = null;\n  }\n\n  // Comment\n\n  beginComment(): void {\n    this.currentNode = {\n      type: 'CommentStatement',\n      value: '',\n      start: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn),\n    };\n  }\n\n  appendToCommentData(char: string): void {\n    this.currentComment.value += char;\n  }\n\n  finishComment(): void {\n    appendChild(this.currentElement(), b.comment(this.finish(this.currentComment)));\n  }\n\n  // Data\n\n  beginData(): void {\n    this.currentNode = {\n      type: 'TextNode',\n      chars: '',\n      start: this.offset(),\n    };\n  }\n\n  appendToData(char: string): void {\n    this.currentData.chars += char;\n  }\n\n  finishData(): void {\n    appendChild(this.currentElement(), b.text(this.finish(this.currentData)));\n  }\n\n  // Tags - basic\n\n  tagOpen(): void {\n    this.tagOpenLine = this.tokenizer.line;\n    this.tagOpenColumn = this.tokenizer.column;\n  }\n\n  beginStartTag(): void {\n    this.currentNode = {\n      type: 'StartTag',\n      name: '',\n      nameStart: null,\n      nameEnd: null,\n      attributes: [],\n      modifiers: [],\n      comments: [],\n      params: [],\n      selfClosing: false,\n      start: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn),\n    };\n  }\n\n  beginEndTag(): void {\n    this.currentNode = {\n      type: 'EndTag',\n      name: '',\n      start: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn),\n    };\n  }\n\n  finishTag(): void {\n    let tag = this.finish<StartTag | EndTag>(this.currentTag);\n\n    if (tag.type === 'StartTag') {\n      this.finishStartTag();\n\n      if (tag.name === ':') {\n        throw generateSyntaxError(\n          'Invalid named block named detected, you may have created a named block without a name, or you may have began your name with a number. Named blocks must have names that are at least one character long, and begin with a lower case letter',\n          this.source.spanFor({\n            start: this.currentTag.start.toJSON(),\n            end: this.offset().toJSON(),\n          })\n        );\n      }\n\n      if (voidMap.has(tag.name) || tag.selfClosing) {\n        this.finishEndTag(true);\n      }\n    } else if (tag.type === 'EndTag') {\n      this.finishEndTag(false);\n    }\n  }\n\n  finishStartTag(): void {\n    let { name, nameStart, nameEnd } = this.currentStartTag;\n\n    // <> should probably be a syntax error, but s-h-t is currently broken for that case\n    assert(name !== '', 'tag name cannot be empty');\n    assert(nameStart !== null, 'nameStart unexpectedly null');\n    assert(nameEnd !== null, 'nameEnd unexpectedly null');\n\n    let nameLoc = nameStart.until(nameEnd);\n    let [head, ...tail] = asPresentArray(name.split('.'));\n    let path = b.path({\n      head: b.head({ original: head, loc: nameLoc.sliceStartChars({ chars: head.length }) }),\n      tail,\n      loc: nameLoc,\n    });\n\n    let { attributes, modifiers, comments, params, selfClosing, loc } = this.finish(\n      this.currentStartTag\n    );\n\n    let element = b.element({\n      path,\n      selfClosing,\n      attributes,\n      modifiers,\n      comments,\n      params,\n      children: [],\n      openTag: loc,\n      closeTag: selfClosing ? null : src.SourceSpan.broken(),\n      loc,\n    });\n    this.elementStack.push(element);\n  }\n\n  finishEndTag(isVoid: boolean): void {\n    let { start: closeTagStart } = this.currentTag;\n    let tag = this.finish<StartTag | EndTag>(this.currentTag);\n\n    let element = this.elementStack.pop() as ASTv1.ElementNode;\n\n    this.validateEndTag(tag, element, isVoid);\n    let parent = this.currentElement();\n\n    if (isVoid) {\n      element.closeTag = null;\n    } else if (element.selfClosing) {\n      assert(element.closeTag === null, 'element.closeTag unexpectedly present');\n    } else {\n      element.closeTag = closeTagStart.until(this.offset());\n    }\n\n    element.loc = element.loc.withEnd(this.offset());\n\n    appendChild(parent, b.element(element));\n  }\n\n  markTagAsSelfClosing(): void {\n    let tag = this.currentTag;\n\n    if (tag.type === 'StartTag') {\n      tag.selfClosing = true;\n    } else {\n      throw generateSyntaxError(\n        `Invalid end tag: closing tag must not be self-closing`,\n        this.source.spanFor({ start: tag.start.toJSON(), end: this.offset().toJSON() })\n      );\n    }\n  }\n\n  // Tags - name\n\n  appendToTagName(char: string): void {\n    let tag = this.currentTag;\n    tag.name += char;\n\n    if (tag.type === 'StartTag') {\n      let offset = this.offset();\n\n      if (tag.nameStart === null) {\n        assert(tag.nameEnd === null, 'nameStart and nameEnd must both be null');\n\n        // Note that the tokenizer already consumed the token here\n        tag.nameStart = offset.move(-1);\n      }\n\n      tag.nameEnd = offset;\n    }\n  }\n\n  // Tags - attributes\n\n  beginAttribute(): void {\n    let offset = this.offset();\n\n    this.currentAttribute = {\n      name: '',\n      parts: [],\n      currentPart: null,\n      isQuoted: false,\n      isDynamic: false,\n      start: offset,\n      valueSpan: offset.collapsed(),\n    };\n  }\n\n  appendToAttributeName(char: string): void {\n    this.currentAttr.name += char;\n\n    // The block params parsing code can actually handle peek=non-space just\n    // fine, but this check was added as an optimization, as there is a little\n    // bit of setup overhead for the parsing logic just to immediately bail\n    if (this.currentAttr.name === 'as') {\n      this.parsePossibleBlockParams();\n    }\n  }\n\n  beginAttributeValue(isQuoted: boolean): void {\n    this.currentAttr.isQuoted = isQuoted;\n    this.startTextPart();\n    this.currentAttr.valueSpan = this.offset().collapsed();\n  }\n\n  appendToAttributeValue(char: string): void {\n    let parts = this.currentAttr.parts;\n    let lastPart = parts[parts.length - 1];\n\n    let current = this.currentAttr.currentPart;\n\n    if (current) {\n      current.chars += char;\n\n      // update end location for each added char\n      current.loc = current.loc.withEnd(this.offset());\n    } else {\n      // initially assume the text node is a single char\n      let loc: src.SourceOffset = this.offset();\n\n      // the tokenizer line/column have already been advanced, correct location info\n      if (char === '\\n') {\n        loc = lastPart ? lastPart.loc.getEnd() : this.currentAttr.valueSpan.getStart();\n      } else {\n        loc = loc.move(-1);\n      }\n\n      this.currentAttr.currentPart = b.text({ chars: char, loc: loc.collapsed() });\n    }\n  }\n\n  finishAttributeValue(): void {\n    this.finalizeTextPart();\n\n    let tag = this.currentTag;\n    let tokenizerPos = this.offset();\n\n    if (tag.type === 'EndTag') {\n      throw generateSyntaxError(\n        `Invalid end tag: closing tag must not have attributes`,\n        this.source.spanFor({ start: tag.start.toJSON(), end: tokenizerPos.toJSON() })\n      );\n    }\n\n    let { name, parts, start, isQuoted, isDynamic, valueSpan } = this.currentAttr;\n\n    // Just trying to be helpful with `<Hello |foo|>` rather than letting it through as an attribute\n    if (name.startsWith('|') && parts.length === 0 && !isQuoted && !isDynamic) {\n      throw generateSyntaxError(\n        'Invalid block parameters syntax: block parameters must be preceded by the `as` keyword',\n        start.until(start.move(name.length))\n      );\n    }\n\n    let value = this.assembleAttributeValue(parts, isQuoted, isDynamic, start.until(tokenizerPos));\n    value.loc = valueSpan.withEnd(tokenizerPos);\n\n    let attribute = b.attr({ name, value, loc: start.until(tokenizerPos) });\n\n    this.currentStartTag.attributes.push(attribute);\n  }\n\n  private parsePossibleBlockParams() {\n    // const enums that we can't use directly\n    const BEFORE_ATTRIBUTE_NAME = 'beforeAttributeName' as TokenizerState.beforeAttributeName;\n    const ATTRIBUTE_NAME = 'attributeName' as TokenizerState.attributeName;\n    const AFTER_ATTRIBUTE_NAME = 'afterAttributeName' as TokenizerState.afterAttributeName;\n\n    // Regex to validate the identifier for block parameters.\n    // Based on the ID validation regex in Handlebars.\n    const ID_INVERSE_PATTERN = /[!\"#%&'()*+./;<=>@[\\\\\\]^`{|}~]/u;\n\n    type States = {\n      PossibleAs: { state: 'PossibleAs' };\n      BeforeStartPipe: { state: 'BeforeStartPipe' };\n      BeforeBlockParamName: { state: 'BeforeBlockParamName' };\n      BlockParamName: {\n        state: 'BlockParamName';\n        name: string;\n        start: src.SourceOffset;\n      };\n      AfterEndPipe: { state: 'AfterEndPipe' };\n      Error: {\n        state: 'Error';\n        message: string;\n        start: src.SourceOffset;\n      };\n      Done: { state: 'Done' };\n    };\n\n    type State = States[keyof States];\n\n    type Handler = (next: string) => void;\n\n    assert(this.tokenizer.state === ATTRIBUTE_NAME, 'must be in TokenizerState.attributeName');\n\n    const element = this.currentStartTag;\n    const as = this.currentAttr;\n\n    let state = { state: 'PossibleAs' } as State;\n\n    const handlers = {\n      PossibleAs: (next: string) => {\n        assert(state.state === 'PossibleAs', 'bug in block params parser');\n\n        if (isSpace(next)) {\n          // \" as ...\"\n          state = { state: 'BeforeStartPipe' };\n          this.tokenizer.transitionTo(AFTER_ATTRIBUTE_NAME);\n          this.tokenizer.consume();\n        } else if (next === '|') {\n          // \" as|...\"\n          // Following Handlebars and require a space between \"as\" and the pipe\n          throw generateSyntaxError(\n            `Invalid block parameters syntax: expecting at least one space character between \"as\" and \"|\"`,\n            as.start.until(this.offset().move(1))\n          );\n        } else {\n          // \" as{{...\", \" async...\", \" as=...\", \" as>...\", \" as/>...\"\n          // Don't consume, let the normal tokenizer code handle the next steps\n          state = { state: 'Done' };\n        }\n      },\n\n      BeforeStartPipe: (next: string) => {\n        assert(state.state === 'BeforeStartPipe', 'bug in block params parser');\n\n        if (isSpace(next)) {\n          this.tokenizer.consume();\n        } else if (next === '|') {\n          state = { state: 'BeforeBlockParamName' };\n          this.tokenizer.transitionTo(BEFORE_ATTRIBUTE_NAME);\n          this.tokenizer.consume();\n        } else {\n          // \" as {{...\", \" as bs...\", \" as =...\", \" as ...\", \" as/>...\"\n          // Don't consume, let the normal tokenizer code handle the next steps\n          state = { state: 'Done' };\n        }\n      },\n\n      BeforeBlockParamName: (next: string) => {\n        assert(state.state === 'BeforeBlockParamName', 'bug in block params parser');\n\n        if (isSpace(next)) {\n          this.tokenizer.consume();\n        } else if (next === '') {\n          // The HTML tokenizer ran out of characters, so we are either\n          // encountering mustache or <EOF>\n          state = { state: 'Done' };\n          this.pendingError = {\n            mustache(loc: src.SourceSpan) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: mustaches cannot be used inside parameters list`,\n                loc\n              );\n            },\n            eof(loc: src.SourceOffset) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: expecting the tag to be closed with \">\" or \"/>\" after parameters list`,\n                as.start.until(loc)\n              );\n            },\n          };\n        } else if (next === '|') {\n          if (element.params.length === 0) {\n            // Following Handlebars and treat empty block params a syntax error\n            throw generateSyntaxError(\n              `Invalid block parameters syntax: empty parameters list, expecting at least one identifier`,\n              as.start.until(this.offset().move(1))\n            );\n          } else {\n            state = { state: 'AfterEndPipe' };\n            this.tokenizer.consume();\n          }\n        } else if (next === '>' || next === '/') {\n          throw generateSyntaxError(\n            `Invalid block parameters syntax: incomplete parameters list, expecting \"|\" but the tag was closed prematurely`,\n            as.start.until(this.offset().move(1))\n          );\n        } else {\n          // slurp up anything else into the name, validate later\n          state = {\n            state: 'BlockParamName',\n            name: next,\n            start: this.offset(),\n          };\n          this.tokenizer.consume();\n        }\n      },\n\n      BlockParamName: (next: string) => {\n        assert(state.state === 'BlockParamName', 'bug in block params parser');\n\n        if (next === '') {\n          // The HTML tokenizer ran out of characters, so we are either\n          // encountering mustache or <EOF>, HBS side will attach the error\n          // to the next span\n          state = { state: 'Done' };\n          this.pendingError = {\n            mustache(loc: src.SourceSpan) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: mustaches cannot be used inside parameters list`,\n                loc\n              );\n            },\n            eof(loc: src.SourceOffset) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: expecting the tag to be closed with \">\" or \"/>\" after parameters list`,\n                as.start.until(loc)\n              );\n            },\n          };\n        } else if (next === '|' || isSpace(next)) {\n          let loc = state.start.until(this.offset());\n\n          if (state.name === 'this' || ID_INVERSE_PATTERN.test(state.name)) {\n            throw generateSyntaxError(\n              `Invalid block parameters syntax: invalid identifier name \\`${state.name}\\``,\n              loc\n            );\n          }\n\n          element.params.push(b.var({ name: state.name, loc }));\n\n          state = next === '|' ? { state: 'AfterEndPipe' } : { state: 'BeforeBlockParamName' };\n          this.tokenizer.consume();\n        } else if (next === '>' || next === '/') {\n          throw generateSyntaxError(\n            `Invalid block parameters syntax: expecting \"|\" but the tag was closed prematurely`,\n            as.start.until(this.offset().move(1))\n          );\n        } else {\n          // slurp up anything else into the name, validate later\n          state.name += next;\n          this.tokenizer.consume();\n        }\n      },\n\n      AfterEndPipe: (next: string) => {\n        assert(state.state === 'AfterEndPipe', 'bug in block params parser');\n\n        if (isSpace(next)) {\n          this.tokenizer.consume();\n        } else if (next === '') {\n          // The HTML tokenizer ran out of characters, so we are either\n          // encountering mustache or <EOF>, HBS side will attach the error\n          // to the next span\n          state = { state: 'Done' };\n          this.pendingError = {\n            mustache(loc: src.SourceSpan) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: modifiers cannot follow parameters list`,\n                loc\n              );\n            },\n            eof(loc: src.SourceOffset) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: expecting the tag to be closed with \">\" or \"/>\" after parameters list`,\n                as.start.until(loc)\n              );\n            },\n          };\n        } else if (next === '>' || next === '/') {\n          // Don't consume, let the normal tokenizer code handle the next steps\n          state = { state: 'Done' };\n        } else {\n          // Slurp up the next \"token\" for the error span\n          state = {\n            state: 'Error',\n            message:\n              'Invalid block parameters syntax: expecting the tag to be closed with \">\" or \"/>\" after parameters list',\n            start: this.offset(),\n          };\n          this.tokenizer.consume();\n        }\n      },\n\n      Error: (next: string) => {\n        assert(state.state === 'Error', 'bug in block params parser');\n\n        if (next === '' || next === '/' || next === '>' || isSpace(next)) {\n          throw generateSyntaxError(state.message, state.start.until(this.offset()));\n        } else {\n          // Slurp up the next \"token\" for the error span\n          this.tokenizer.consume();\n        }\n      },\n\n      Done: () => {\n        assert(false, 'This should never be called');\n      },\n    } as const satisfies {\n      [S in keyof States]: Handler;\n    };\n\n    let next: string;\n\n    do {\n      next = this.tokenizer.peek();\n      handlers[state.state](next);\n    } while (state.state !== 'Done' && next !== '');\n\n    assert(state.state === 'Done', 'bug in block params parser');\n  }\n\n  reportSyntaxError(message: string): void {\n    throw generateSyntaxError(message, this.offset().collapsed());\n  }\n\n  assembleConcatenatedValue(\n    parts: (ASTv1.MustacheStatement | ASTv1.TextNode)[]\n  ): ASTv1.ConcatStatement {\n    for (const part of parts) {\n      if (part.type !== 'MustacheStatement' && part.type !== 'TextNode') {\n        throw generateSyntaxError(\n          `Unsupported node in quoted attribute value: ${part['type'] as string}`,\n          (part as ASTv1.BaseNode).loc\n        );\n      }\n    }\n\n    assertPresentArray(parts, `the concatenation parts of an element should not be empty`);\n\n    let first = getFirst(parts);\n    let last = getLast(parts);\n\n    return b.concat({\n      parts,\n      loc: this.source.spanFor(first.loc).extend(this.source.spanFor(last.loc)),\n    });\n  }\n\n  validateEndTag(tag: StartTag | EndTag, element: ASTv1.ElementNode, selfClosing: boolean): void {\n    if (voidMap.has(tag.name) && !selfClosing) {\n      // EngTag is also called by StartTag for void and self-closing tags (i.e.\n      // <input> or <br />, so we need to check for that here. Otherwise, we would\n      // throw an error for those cases.\n      throw generateSyntaxError(\n        `<${tag.name}> elements do not need end tags. You should remove it`,\n        tag.loc\n      );\n    } else if (element.tag === undefined) {\n      throw generateSyntaxError(`Closing tag </${tag.name}> without an open tag`, tag.loc);\n    } else if (element.tag !== tag.name) {\n      throw generateSyntaxError(\n        `Closing tag </${tag.name}> did not match last open tag <${element.tag}> (on line ${element.loc.startPosition.line})`,\n        tag.loc\n      );\n    }\n  }\n\n  assembleAttributeValue(\n    parts: ASTv1.AttrPart[],\n    isQuoted: boolean,\n    isDynamic: boolean,\n    span: src.SourceSpan\n  ): ASTv1.AttrValue {\n    if (isDynamic) {\n      if (isQuoted) {\n        return this.assembleConcatenatedValue(parts);\n      } else {\n        assertPresentArray(parts);\n\n        const [head, a] = parts;\n        if (a === undefined || (a.type === 'TextNode' && a.chars === '/')) {\n          return head;\n        } else {\n          throw generateSyntaxError(\n            `An unquoted attribute value must be a string or a mustache, ` +\n              `preceded by whitespace or a '=' character, and ` +\n              `followed by whitespace, a '>' character, or '/>'`,\n            span\n          );\n        }\n      }\n    } else if (isPresentArray(parts)) {\n      return parts[0];\n    } else {\n      return b.text({ chars: '', loc: span });\n    }\n  }\n}\n\n/**\n  ASTPlugins can make changes to the Glimmer template AST before\n  compilation begins.\n*/\nexport interface ASTPluginBuilder<TEnv extends ASTPluginEnvironment = ASTPluginEnvironment> {\n  (env: TEnv): ASTPlugin;\n}\n\nexport interface ASTPlugin {\n  name: string;\n  visitor: NodeVisitor;\n}\n\nexport interface ASTPluginEnvironment {\n  meta?: object | undefined;\n  syntax: Syntax;\n}\n\ninterface HandlebarsParseOptions {\n  srcName?: string;\n  ignoreStandalone?: boolean;\n}\n\nexport interface TemplateIdFn {\n  (src: string): Nullable<string>;\n}\n\nexport interface PrecompileOptions extends PreprocessOptions {\n  id?: TemplateIdFn;\n\n  /**\n   * Additional non-native keywords.\n   *\n   * Local variables (block params or lexical scope) always takes precedence,\n   * but otherwise, suitable free variable candidates (e.g. those are not part\n   * of a path) are matched against this list and turned into keywords.\n   *\n   * In strict mode compilation, keywords suppresses the undefined reference\n   * error and will be resolved by the runtime environment.\n   *\n   * In loose mode, keywords are currently ignored and since all free variables\n   * are already resolved by the runtime environment.\n   */\n  keywords?: readonly string[];\n\n  customizeComponentName?: ((input: string) => string) | undefined;\n}\n\nexport interface PrecompileOptionsWithLexicalScope extends PrecompileOptions {\n  lexicalScope: (variable: string) => boolean;\n\n  /**\n   * If `emit.debugSymbols` is set to `true`, the name of lexical local variables\n   * will be included in the wire format.\n   */\n  emit?: {\n    debugSymbols?: boolean;\n  };\n}\n\nexport interface PreprocessOptions {\n  strictMode?: boolean | undefined;\n  locals?: string[] | undefined;\n  meta?:\n    | {\n        moduleName?: string | undefined;\n      }\n    | undefined;\n  plugins?:\n    | {\n        ast?: ASTPluginBuilder[] | undefined;\n      }\n    | undefined;\n  parseOptions?: HandlebarsParseOptions | undefined;\n  customizeComponentName?: ((input: string) => string) | undefined;\n\n  /**\n    Useful for specifying a group of options together.\n\n    When `'codemod'` we disable all whitespace control in handlebars\n    (to preserve as much as possible) and we also avoid any\n    escaping/unescaping of HTML entity codes.\n   */\n  mode?: 'codemod' | 'precompile' | undefined;\n}\n\nexport interface Syntax {\n  parse: typeof preprocess;\n  builders: typeof publicBuilder;\n  print: typeof print;\n  traverse: typeof traverse;\n  Walker: typeof Walker;\n}\n\nconst syntax: Syntax = {\n  parse: preprocess,\n  builders: publicBuilder,\n  print,\n  traverse,\n  Walker,\n};\n\nclass CodemodEntityParser extends EntityParser {\n  // match upstream types, but never match an entity\n  constructor() {\n    super({});\n  }\n\n  override parse(): string | undefined {\n    return undefined;\n  }\n}\n\nexport function preprocess(\n  input: string | src.Source | HBS.Program,\n  options: PreprocessOptions = {}\n): ASTv1.Template {\n  let mode = options.mode || 'precompile';\n\n  let source: src.Source;\n  let ast: HBS.Program;\n  if (typeof input === 'string') {\n    source = new src.Source(input, options.meta?.moduleName);\n\n    if (mode === 'codemod') {\n      ast = parseWithoutProcessing(input, options.parseOptions) as HBS.Program;\n    } else {\n      ast = parse(input, options.parseOptions) as HBS.Program;\n    }\n  } else if (input instanceof src.Source) {\n    source = input;\n\n    if (mode === 'codemod') {\n      ast = parseWithoutProcessing(input.source, options.parseOptions) as HBS.Program;\n    } else {\n      ast = parse(input.source, options.parseOptions) as HBS.Program;\n    }\n  } else {\n    source = new src.Source('', options.meta?.moduleName);\n    ast = input;\n  }\n\n  let entityParser = undefined;\n  if (mode === 'codemod') {\n    entityParser = new CodemodEntityParser();\n  }\n\n  let offsets = src.SourceSpan.forCharPositions(source, 0, source.source.length);\n  ast.loc = {\n    source: '(program)',\n    start: offsets.startPosition,\n    end: offsets.endPosition,\n  };\n\n  let template = new TokenizerEventHandlers(source, entityParser, mode).parse(\n    ast,\n    options.locals ?? []\n  );\n\n  if (options?.plugins?.ast) {\n    for (const transform of options.plugins.ast) {\n      let env: ASTPluginEnvironment = assign({}, options, { syntax }, { plugins: undefined });\n\n      let pluginResult = transform(env);\n\n      traverse(template, pluginResult.visitor);\n    }\n  }\n\n  return template;\n}\n","import type * as ASTv1 from './v1/api';\n\nimport { isKeyword } from './keywords';\nimport { preprocess } from './parser/tokenizer-event-handlers';\nimport traverse from './traversal/traverse';\n\ninterface GetTemplateLocalsOptions {\n  includeKeywords?: boolean;\n  includeHtmlElements?: boolean;\n}\n\n/**\n * Gets the correct Token from the Node based on it's type\n */\nfunction tokensFromType(\n  node: ASTv1.Node,\n  scopedTokens: string[],\n  options: GetTemplateLocalsOptions\n): string | void {\n  if (node.type === 'PathExpression') {\n    if (node.head.type === 'AtHead' || node.head.type === 'ThisHead') {\n      return;\n    }\n\n    const possbleToken = node.head.name;\n\n    if (scopedTokens.indexOf(possbleToken) === -1) {\n      return possbleToken;\n    }\n  } else if (node.type === 'ElementNode') {\n    const { tag } = node;\n\n    const char = tag.charAt(0);\n\n    if (char === ':' || char === '@') {\n      return;\n    }\n\n    if (!options.includeHtmlElements && tag.indexOf('.') === -1 && tag.toLowerCase() === tag) {\n      return;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (tag.substr(0, 5) === 'this.') {\n      return;\n    }\n\n    // the tag may be from a yielded object\n    // example:\n    //   <x.button>\n    // An ElementNode does not parse the \"tag\" in to a PathExpression\n    // so we have to split on `.`, just like how `this` presence is checked.\n    if (tag.includes('.')) {\n      let [potentialLocal] = tag.split('.') as [string, ...string[]];\n\n      if (scopedTokens.includes(potentialLocal)) return;\n    }\n\n    if (scopedTokens.includes(tag)) return;\n\n    return tag;\n  }\n}\n\n/**\n * Adds tokens to the tokensSet based on their node.type\n */\nfunction addTokens(\n  tokensSet: Set<string>,\n  node: ASTv1.Node,\n  scopedTokens: string[],\n  options: GetTemplateLocalsOptions\n) {\n  const maybeTokens = tokensFromType(node, scopedTokens, options);\n\n  (Array.isArray(maybeTokens) ? maybeTokens : [maybeTokens]).forEach((maybeToken) => {\n    if (maybeToken !== undefined && maybeToken[0] !== '@') {\n      const maybeTokenFirstSegment = maybeToken.split('.')[0];\n      if (!scopedTokens.includes(maybeTokenFirstSegment)) {\n        tokensSet.add(maybeToken.split('.')[0]);\n      }\n    }\n  });\n}\n\n/**\n * Parses and traverses a given handlebars html template to extract all template locals\n * referenced that could possible come from the parent scope. Can exclude known keywords\n * optionally.\n */\nexport function getTemplateLocals(\n  html: string,\n  options: GetTemplateLocalsOptions = {\n    includeHtmlElements: false,\n    includeKeywords: false,\n  }\n): string[] {\n  const ast = preprocess(html);\n  const tokensSet = new Set<string>();\n  const scopedTokens: string[] = [];\n\n  traverse(ast, {\n    Block: {\n      enter({ blockParams }) {\n        blockParams.forEach((param) => {\n          scopedTokens.push(param);\n        });\n      },\n\n      exit({ blockParams }) {\n        blockParams.forEach(() => {\n          scopedTokens.pop();\n        });\n      },\n    },\n\n    ElementNode: {\n      enter(node) {\n        node.blockParams.forEach((param) => {\n          scopedTokens.push(param);\n        });\n        addTokens(tokensSet, node, scopedTokens, options);\n      },\n\n      exit({ blockParams }) {\n        blockParams.forEach(() => {\n          scopedTokens.pop();\n        });\n      },\n    },\n\n    PathExpression(node) {\n      addTokens(tokensSet, node, scopedTokens, options);\n    },\n  });\n\n  let tokens: string[] = [];\n\n  tokensSet.forEach((s) => tokens.push(s));\n\n  if (!options?.includeKeywords) {\n    tokens = tokens.filter((token) => !isKeyword(token));\n  }\n\n  return tokens;\n}\n","import { setLocalDebugType } from '@glimmer/debug-util';\nimport { assign } from '@glimmer/util';\n\nimport type { SourceSpan } from '../../source/span';\n\nexport interface BaseNodeFields {\n  loc: SourceSpan;\n}\n\n/**\n * This is a convenience function for creating ASTv2 nodes, with an optional name and the node's\n * options.\n *\n * ```ts\n * export class HtmlText extends node('HtmlText').fields<{ chars: string }>() {}\n * ```\n *\n * This creates a new ASTv2 node with the name `'HtmlText'` and one field `chars: string` (in\n * addition to a `loc: SourceOffsets` field, which all nodes have).\n *\n * ```ts\n * export class Args extends node().fields<{\n *  positional: PositionalArguments;\n *  named: NamedArguments\n * }>() {}\n * ```\n *\n * This creates a new un-named ASTv2 node with two fields (`positional: Positional` and `named:\n * Named`, in addition to the generic `loc: SourceOffsets` field).\n *\n * Once you create a node using `node`, it is instantiated with all of its fields (including `loc`):\n *\n * ```ts\n * new HtmlText({ loc: offsets, chars: someString });\n * ```\n */\nexport function node(): {\n  fields<Fields extends object>(): NodeConstructor<Fields & BaseNodeFields>;\n};\nexport function node<T extends string>(\n  name: T\n): {\n  fields<Fields extends object>(): TypedNodeConstructor<T, Fields & BaseNodeFields>;\n};\n\nexport function node<T extends string>(\n  name?: T\n):\n  | {\n      fields<Fields extends object>(): TypedNodeConstructor<T, Fields & BaseNodeFields>;\n    }\n  | {\n      fields<Fields extends object>(): NodeConstructor<Fields & BaseNodeFields>;\n    } {\n  if (name !== undefined) {\n    const type = name;\n    return {\n      fields<Fields extends object>(): TypedNodeConstructor<T, BaseNodeFields & Fields> {\n        return class {\n          // SAFETY: initialized via `assign` in the constructor.\n          declare readonly loc: SourceSpan;\n          readonly type: T;\n\n          constructor(fields: BaseNodeFields & Fields) {\n            this.type = type;\n            assign(this, fields);\n\n            setLocalDebugType('syntax:mir:node', this);\n          }\n        } as TypedNodeConstructor<T, BaseNodeFields & Fields>;\n      },\n    };\n  } else {\n    return {\n      fields<Fields>(): NodeConstructor<Fields & BaseNodeFields> {\n        return class {\n          // SAFETY: initialized via `assign` in the constructor.\n          declare readonly loc: SourceSpan;\n\n          constructor(fields: BaseNodeFields & Fields) {\n            assign(this, fields);\n          }\n        } as NodeConstructor<BaseNodeFields & Fields>;\n      },\n    };\n  }\n}\n\nexport interface NodeConstructor<Fields> {\n  new (fields: Fields): Readonly<Fields>;\n}\n\ntype TypedNode<T extends string, Fields> = {\n  type: T;\n} & Readonly<Fields>;\n\nexport interface TypedNodeConstructor<T extends string, Fields> {\n  new (options: Fields): TypedNode<T, Fields>;\n}\n","import type { SourceSlice } from '../../source/slice';\nimport type { SourceSpan } from '../../source/span';\nimport type { ExpressionNode } from './expr';\n\nimport { node } from './node';\n\n/**\n * Corresponds to syntaxes with positional and named arguments:\n *\n * - SubExpression\n * - Invoking Append\n * - Invoking attributes\n * - InvokeBlock\n *\n * If `Args` is empty, the `SourceOffsets` for this node should be the collapsed position\n * immediately after the parent call node's `callee`.\n */\nexport class Args extends node().fields<{\n  positional: PositionalArguments;\n  named: NamedArguments;\n}>() {\n  static empty(loc: SourceSpan): Args {\n    return new Args({\n      loc,\n      positional: PositionalArguments.empty(loc),\n      named: NamedArguments.empty(loc),\n    });\n  }\n\n  static named(named: NamedArguments): Args {\n    return new Args({\n      loc: named.loc,\n      positional: PositionalArguments.empty(named.loc.collapse('end')),\n      named,\n    });\n  }\n\n  nth(offset: number): ExpressionNode | null {\n    return this.positional.nth(offset);\n  }\n\n  get(name: string): ExpressionNode | null {\n    return this.named.get(name);\n  }\n\n  isEmpty(): boolean {\n    return this.positional.isEmpty() && this.named.isEmpty();\n  }\n}\n\n/**\n * Corresponds to positional arguments.\n *\n * If `PositionalArguments` is empty, the `SourceOffsets` for this node should be the collapsed\n * position immediately after the parent call node's `callee`.\n */\nexport class PositionalArguments extends node().fields<{\n  exprs: readonly ExpressionNode[];\n}>() {\n  static empty(loc: SourceSpan): PositionalArguments {\n    return new PositionalArguments({\n      loc,\n      exprs: [],\n    });\n  }\n\n  get size(): number {\n    return this.exprs.length;\n  }\n\n  nth(offset: number): ExpressionNode | null {\n    return this.exprs[offset] || null;\n  }\n\n  isEmpty(): boolean {\n    return this.exprs.length === 0;\n  }\n}\n\n/**\n * Corresponds to named arguments.\n *\n * If `PositionalArguments` and `NamedArguments` are empty, the `SourceOffsets` for this node should\n * be the same as the `Args` node that contains this node.\n *\n * If `PositionalArguments` is not empty but `NamedArguments` is empty, the `SourceOffsets` for this\n * node should be the collapsed position immediately after the last positional argument.\n */\nexport class NamedArguments extends node().fields<{\n  entries: readonly NamedArgument[];\n}>() {\n  static empty(loc: SourceSpan): NamedArguments {\n    return new NamedArguments({\n      loc,\n      entries: [],\n    });\n  }\n\n  get size(): number {\n    return this.entries.length;\n  }\n\n  get(name: string): ExpressionNode | null {\n    let entry = this.entries.filter((e) => e.name.chars === name)[0];\n\n    return entry ? entry.value : null;\n  }\n\n  isEmpty(): boolean {\n    return this.entries.length === 0;\n  }\n}\n\n/**\n * Corresponds to a single named argument.\n *\n * ```hbs\n * x=<expr>\n * ```\n */\nexport class NamedArgument {\n  readonly loc: SourceSpan;\n  readonly name: SourceSlice;\n  readonly value: ExpressionNode;\n\n  constructor(options: { name: SourceSlice; value: ExpressionNode }) {\n    this.loc = options.name.loc.extend(options.value.loc);\n    this.name = options.name;\n    this.value = options.value;\n  }\n}\n","import type { SourceSlice } from '../../source/slice';\nimport type { CallFields } from './base';\nimport type { ExpressionNode } from './expr';\n\nimport { NamedArgument } from './args';\nimport { node } from './node';\n\n/**\n * Attr nodes look like HTML attributes, but are classified as:\n *\n * 1. `HtmlAttr`, which means a regular HTML attribute in Glimmer\n * 2. `SplatAttr`, which means `...attributes`\n * 3. `ComponentArg`, which means an attribute whose name begins with `@`, and it is therefore a\n *    component argument.\n */\nexport type AttrNode = HtmlAttr | SplatAttr | ComponentArg;\n\n/**\n * `HtmlAttr` and `SplatAttr` are grouped together because the order of the `SplatAttr` node,\n * relative to other attributes, matters.\n */\nexport type HtmlOrSplatAttr = HtmlAttr | SplatAttr;\n\n/**\n * \"Attr Block\" nodes are allowed inside an open element tag in templates. They interact with the\n * element (or component).\n */\nexport type AttrBlockNode = AttrNode | ElementModifier;\n\n/**\n * `HtmlAttr` nodes are valid HTML attributes, with or without a value.\n *\n * Exceptions:\n *\n * - `...attributes` is `SplatAttr`\n * - `@x=<value>` is `ComponentArg`\n */\nexport class HtmlAttr extends node('HtmlAttr').fields<AttrNodeOptions>() {}\n\nexport class SplatAttr extends node('SplatAttr').fields<{ symbol: number }>() {}\n\n/**\n * Corresponds to an argument passed by a component (`@x=<value>`)\n */\nexport class ComponentArg extends node().fields<AttrNodeOptions>() {\n  /**\n   * Convert the component argument into a named argument node\n   */\n  toNamedArgument(): NamedArgument {\n    return new NamedArgument({\n      name: this.name,\n      value: this.value,\n    });\n  }\n}\n\n/**\n * An `ElementModifier` is just a normal call node in modifier position.\n */\nexport class ElementModifier extends node('ElementModifier').fields<CallFields>() {}\n\nexport interface AttrNodeOptions {\n  name: SourceSlice;\n  value: ExpressionNode;\n  trusting: boolean;\n}\n","import type { SourceSlice } from '../../source/slice';\nimport type { SymbolTable } from '../../symbol-table';\nimport type { ComponentArg, ElementModifier, HtmlOrSplatAttr } from './attr-block';\nimport type { CallFields } from './base';\nimport type { ExpressionNode } from './expr';\nimport type { NamedBlock, NamedBlocks } from './internal-node';\nimport type { BaseNodeFields } from './node';\n\nimport { SpanList } from '../../source/span-list';\nimport { Args, NamedArguments } from './args';\nimport { node } from './node';\n\n/**\n * Content Nodes are allowed in content positions in templates. They correspond to behavior in the\n * [Data][data] tokenization state in HTML.\n *\n * [data]: https://html.spec.whatwg.org/multipage/parsing.html#data-state\n */\nexport type ContentNode =\n  | HtmlText\n  | HtmlComment\n  | AppendContent\n  | InvokeBlock\n  | InvokeComponent\n  | SimpleElement\n  | GlimmerComment;\n\nexport class GlimmerComment extends node('GlimmerComment').fields<{ text: SourceSlice }>() {}\nexport class HtmlText extends node('HtmlText').fields<{ chars: string }>() {}\nexport class HtmlComment extends node('HtmlComment').fields<{ text: SourceSlice }>() {}\n\nexport class AppendContent extends node('AppendContent').fields<{\n  value: ExpressionNode;\n  trusting: boolean;\n  table: SymbolTable;\n}>() {\n  get callee(): ExpressionNode {\n    if (this.value.type === 'Call') {\n      return this.value.callee;\n    } else {\n      return this.value;\n    }\n  }\n\n  get args(): Args {\n    if (this.value.type === 'Call') {\n      return this.value.args;\n    } else {\n      return Args.empty(this.value.loc.collapse('end'));\n    }\n  }\n}\n\nexport class InvokeBlock extends node('InvokeBlock').fields<\n  CallFields & { blocks: NamedBlocks }\n>() {}\n\ninterface InvokeComponentFields {\n  callee: ExpressionNode;\n  blocks: NamedBlocks;\n  attrs: readonly HtmlOrSplatAttr[];\n  componentArgs: readonly ComponentArg[];\n  modifiers: readonly ElementModifier[];\n}\n\n/**\n * Corresponds to a component invocation. When the content of a component invocation contains no\n * named blocks, `blocks` contains a single named block named `\"default\"`. When a component\n * invocation is self-closing, `blocks` is empty.\n */\nexport class InvokeComponent extends node('InvokeComponent').fields<InvokeComponentFields>() {\n  get args(): Args {\n    let entries = this.componentArgs.map((a) => a.toNamedArgument());\n\n    return Args.named(\n      new NamedArguments({\n        loc: SpanList.range(entries, this.callee.loc.collapse('end')),\n        entries,\n      })\n    );\n  }\n}\n\ninterface SimpleElementOptions extends BaseNodeFields {\n  tag: SourceSlice;\n  body: readonly ContentNode[];\n  attrs: readonly HtmlOrSplatAttr[];\n  componentArgs: readonly ComponentArg[];\n  modifiers: readonly ElementModifier[];\n}\n\n/**\n * Corresponds to a simple HTML element. The AST allows component arguments and modifiers to support\n * future extensions.\n */\nexport class SimpleElement extends node('SimpleElement').fields<SimpleElementOptions>() {\n  get args(): Args {\n    let entries = this.componentArgs.map((a) => a.toNamedArgument());\n\n    return Args.named(\n      new NamedArguments({\n        loc: SpanList.range(entries, this.tag.loc.collapse('end')),\n        entries,\n      })\n    );\n  }\n}\n\nexport type ElementNode = NamedBlock | InvokeComponent | SimpleElement;\n","import type { PresentArray } from '@glimmer/interfaces';\n\nimport type { CallFields } from './base';\nimport type { VariableReference } from './refs';\n\nimport { SourceSlice } from '../../source/slice';\nimport { node } from './node';\n\n/**\n * A Handlebars literal.\n *\n * {@link https://handlebarsjs.com/guide/expressions.html#literal-segments}\n */\nexport type LiteralValue = string | boolean | number | undefined | null;\n\nexport interface LiteralTypes {\n  string: string;\n  boolean: boolean;\n  number: number;\n  null: null;\n  undefined: undefined;\n}\n\n/**\n * Corresponds to a Handlebars literal.\n *\n * @see {LiteralValue}\n */\nexport class LiteralExpression extends node('Literal').fields<{ value: LiteralValue }>() {\n  toSlice(this: StringLiteral): SourceSlice {\n    return new SourceSlice({ loc: this.loc, chars: this.value });\n  }\n}\n\nexport type StringLiteral = LiteralExpression & { value: string };\n\n/**\n * Returns true if an input {@see ExpressionNode} is a literal.\n */\nexport function isLiteral<K extends keyof LiteralTypes = keyof LiteralTypes>(\n  node: ExpressionNode,\n  kind?: K\n): node is StringLiteral {\n  if (node.type === 'Literal') {\n    if (kind === undefined) {\n      return true;\n    } else if (kind === 'null') {\n      return node.value === null;\n    } else {\n      return typeof node.value === kind;\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n * Corresponds to a path in expression position.\n *\n * ```hbs\n * this\n * this.x\n * @x\n * @x.y\n * x\n * x.y\n * ```\n */\nexport class PathExpression extends node('Path').fields<{\n  ref: VariableReference;\n  tail: readonly SourceSlice[];\n}>() {}\n\n/**\n * Corresponds to a known strict-mode keyword. It behaves similarly to a\n * PathExpression with a FreeVarReference, but implies StrictResolution and\n * is guaranteed to not have a tail, since `{{outlet.foo}}` would have been\n * illegal.\n */\nexport class KeywordExpression extends node('Keyword').fields<{\n  name: string;\n  symbol: number;\n}>() {}\n\n/**\n * Corresponds to a parenthesized call expression.\n *\n * ```hbs\n * (x)\n * (x.y)\n * (x y)\n * (x.y z)\n * ```\n */\nexport class CallExpression extends node('Call').fields<CallFields>() {}\n\n/**\n * Corresponds to an interpolation in attribute value position.\n *\n * ```hbs\n * <a href=\"{{url}}.html\"\n * ```\n */\nexport class InterpolateExpression extends node('Interpolate').fields<{\n  parts: PresentArray<ExpressionNode>;\n}>() {}\n\nexport type ExpressionNode =\n  | LiteralExpression\n  | PathExpression\n  | KeywordExpression\n  | CallExpression\n  | InterpolateExpression;\n","import type { SourceSlice } from '../../source/slice';\nimport type { BlockSymbolTable, ProgramSymbolTable } from '../../symbol-table';\nimport type { ComponentArg, ElementModifier, HtmlOrSplatAttr } from './attr-block';\nimport type { GlimmerParentNodeOptions } from './base';\nimport type { BaseNodeFields } from './node';\n\nimport { SpanList } from '../../source/span-list';\nimport { Args, NamedArguments } from './args';\nimport { node } from './node';\n\n/**\n * Corresponds to an entire template.\n */\nexport class Template extends node().fields<\n  {\n    table: ProgramSymbolTable;\n  } & GlimmerParentNodeOptions\n>() {}\n\n/**\n * Represents a block. In principle this could be merged with `NamedBlock`, because all cases\n * involving blocks have at least a notional name.\n */\nexport class Block extends node().fields<\n  { scope: BlockSymbolTable } & GlimmerParentNodeOptions\n>() {}\n\n/**\n * Corresponds to a collection of named blocks.\n */\nexport class NamedBlocks extends node().fields<{ blocks: readonly NamedBlock[] }>() {\n  /**\n   * Get the `NamedBlock` for a given name.\n   */\n  get(name: 'default'): NamedBlock;\n  get(name: string): NamedBlock | null;\n  get(name: string): NamedBlock | null {\n    return this.blocks.filter((block) => block.name.chars === name)[0] || null;\n  }\n}\n\nexport interface NamedBlockFields extends BaseNodeFields {\n  name: SourceSlice;\n  block: Block;\n\n  // these are not currently supported, but are here for future expansion\n  attrs: readonly HtmlOrSplatAttr[];\n  componentArgs: readonly ComponentArg[];\n  modifiers: readonly ElementModifier[];\n}\n\n/**\n * Corresponds to a single named block. This is used for anonymous named blocks (`default` and\n * `else`).\n */\nexport class NamedBlock extends node().fields<NamedBlockFields>() {\n  get args(): Args {\n    let entries = this.componentArgs.map((a) => a.toNamedArgument());\n\n    return Args.named(\n      new NamedArguments({\n        loc: SpanList.range(entries, this.name.loc.collapse('end')),\n        entries,\n      })\n    );\n  }\n}\n","import type { SourceSlice } from '../../source/slice';\nimport type { FreeVarResolution } from './resolution';\n\nimport { node } from './node';\n\n/**\n * Corresponds to `this` at the head of an expression.\n */\nexport class ThisReference extends node('This').fields() {}\n\n/**\n * Corresponds to `@<ident>` at the beginning of an expression.\n */\nexport class ArgReference extends node('Arg').fields<{ name: SourceSlice; symbol: number }>() {}\n\n/**\n * Corresponds to `<ident>` at the beginning of an expression, when `<ident>` is in the current\n * block's scope.\n */\nexport class LocalVarReference extends node('Local').fields<{\n  name: string;\n  isTemplateLocal: boolean;\n  symbol: number;\n}>() {}\n\n/**\n * Corresponds to `<ident>` at the beginning of an expression, when `<ident>` is *not* in the\n * current block's scope.\n *\n * The `resolution: FreeVarResolution` field describes how to resolve the free variable.\n *\n * Note: In strict mode, it must always be a variable that is in a concrete JavaScript scope that\n * the template will be installed into.\n */\nexport class FreeVarReference extends node('Free').fields<{\n  name: string;\n  resolution: FreeVarResolution;\n  symbol: number;\n}>() {}\n\nexport type VariableReference = ThisReference | ArgReference | LocalVarReference | FreeVarReference;\n","/// FreeVarNamespace ///\n\nexport type HELPER_VAR_NS = 'Helper';\nexport const HELPER_VAR_NS: HELPER_VAR_NS = 'Helper';\nexport type MODIFIER_VAR_NS = 'Modifier';\nexport const MODIFIER_VAR_NS: MODIFIER_VAR_NS = 'Modifier';\nexport type COMPONENT_VAR_NS = 'Component';\nexport const COMPONENT_VAR_NS: COMPONENT_VAR_NS = 'Component';\n\nexport type FreeVarNamespace = HELPER_VAR_NS | MODIFIER_VAR_NS | COMPONENT_VAR_NS;\n","/**\n * A free variable is resolved according to a resolution rule:\n *\n * 1. Strict resolution\n * 2. Namespaced resolution\n */\n\nimport type { GetContextualFreeOpcode } from '@glimmer/interfaces';\nimport { SexpOpcodes } from '@glimmer/wire-format';\n\nimport type { FreeVarNamespace } from './constants';\n\nimport { COMPONENT_VAR_NS, HELPER_VAR_NS, MODIFIER_VAR_NS } from './constants';\n\n/**\n * Strict resolution is used:\n *\n * 1. in a strict mode template\n * 2. in an local variable invocation with dot paths\n */\nexport const STRICT_RESOLUTION = {\n  resolution: (): GetContextualFreeOpcode => SexpOpcodes.GetStrictKeyword,\n  serialize: (): SerializedResolution => 'Strict',\n  isAngleBracket: false as const,\n};\n\nexport type StrictResolution = typeof STRICT_RESOLUTION;\n\nexport const HTML_RESOLUTION = {\n  ...STRICT_RESOLUTION,\n  isAngleBracket: true as const,\n};\n\nexport type HtmlResolution = typeof HTML_RESOLUTION;\n\nexport function isStrictResolution(value: unknown): value is StrictResolution {\n  return value === STRICT_RESOLUTION;\n}\n\n/**\n * A `LooseModeResolution` includes one or more namespaces to resolve the variable in\n *\n * In practice, there are a limited number of possible combinations of these degrees of freedom,\n * and they are captured by the `Namespaces` union below.\n */\nexport class LooseModeResolution {\n  /**\n   * Namespaced resolution is used in an unambiguous syntax position:\n   *\n   * 1. `(sexp)` (namespace: `Helper`)\n   * 2. `{{#block}}` (namespace: `Component`)\n   * 3. `<a {{modifier}}>` (namespace: `Modifier`)\n   * 4. `<Component />` (namespace: `Component`)\n   */\n  static namespaced(namespace: FreeVarNamespace, isAngleBracket = false): LooseModeResolution {\n    return new LooseModeResolution([namespace], isAngleBracket);\n  }\n\n  /**\n   * Append resolution is used when the variable should be resolved in both the `component` and\n   * `helper` namespaces.\n   *\n   * ```hbs\n   * {{x}}\n   * ```\n   *\n   * ```hbs\n   * {{x y}}\n   * ```\n   *\n   * ^ In either case, `x` should be resolved in the `component` and `helper` namespaces.\n   */\n  static append(): LooseModeResolution {\n    return new LooseModeResolution([COMPONENT_VAR_NS, HELPER_VAR_NS]);\n  }\n\n  /**\n   * Trusting append resolution is used when the variable should be resolved only in the\n   * `helper` namespaces.\n   *\n   * ```hbs\n   * {{{x}}}\n   * ```\n   *\n   * ```hbs\n   * {{{x y}}}\n   * ```\n   *\n   * ^ In either case, `x` should be resolved in the `helper` namespace.\n   */\n  static trustingAppend(): LooseModeResolution {\n    return this.namespaced(HELPER_VAR_NS);\n  }\n\n  constructor(\n    readonly namespaces: Namespaces,\n    readonly isAngleBracket = false\n  ) {}\n\n  resolution(): GetContextualFreeOpcode {\n    if (this.namespaces.length === 1) {\n      switch (this.namespaces[0]) {\n        case HELPER_VAR_NS:\n          return SexpOpcodes.GetFreeAsHelperHead;\n        case MODIFIER_VAR_NS:\n          return SexpOpcodes.GetFreeAsModifierHead;\n        case COMPONENT_VAR_NS:\n          return SexpOpcodes.GetFreeAsComponentHead;\n      }\n    } else {\n      return SexpOpcodes.GetFreeAsComponentOrHelperHead;\n    }\n  }\n\n  serialize(): SerializedResolution {\n    if (this.namespaces.length === 1) {\n      return this.namespaces[0];\n    } else {\n      return 'ComponentOrHelper';\n    }\n  }\n}\n\nexport const HELPER_NAMESPACE = HELPER_VAR_NS;\nexport const MODIFIER_NAMESPACE = MODIFIER_VAR_NS;\nexport const COMPONENT_NAMESPACE = COMPONENT_VAR_NS;\n\n/**\n * A `Namespaced` must be resolved in one or more namespaces.\n *\n * ```hbs\n * <X />\n * ```\n *\n * ^ `X` is resolved in the `component` namespace\n *\n * ```hbs\n * (x)\n * ```\n *\n * ^ `x` is resolved in the `helper` namespace\n *\n * ```hbs\n * <a {{x}} />\n * ```\n *\n * ^ `x` is resolved in the `modifier` namespace\n */\ntype Namespaces =\n  | [HELPER_VAR_NS]\n  | [MODIFIER_VAR_NS]\n  | [COMPONENT_VAR_NS]\n  | [COMPONENT_VAR_NS, HELPER_VAR_NS];\n\nexport type FreeVarResolution = StrictResolution | HtmlResolution | LooseModeResolution;\n\n// Serialization\nexport type SerializedResolution =\n  | 'Strict'\n  | 'Helper'\n  | 'Modifier'\n  | 'Component'\n  | 'ComponentOrHelper';\n\nexport function loadResolution(resolution: SerializedResolution): FreeVarResolution {\n  if (resolution === 'Strict') {\n    return STRICT_RESOLUTION;\n  } else if (resolution === 'ComponentOrHelper') {\n    return LooseModeResolution.append();\n  } else {\n    return LooseModeResolution.namespaced(resolution as FreeVarNamespace);\n  }\n}\n","import type { Core, Dict } from '@glimmer/interfaces';\nimport { setLocalDebugType, unwrap } from '@glimmer/debug-util';\nimport { dict } from '@glimmer/util';\nimport { SexpOpcodes } from '@glimmer/wire-format';\n\nimport * as ASTv2 from './v2/api';\n\nexport interface Upvar {\n  readonly name: string;\n  readonly resolution: ASTv2.FreeVarResolution;\n}\n\ninterface SymbolTableOptions {\n  customizeComponentName: (input: string) => string;\n  lexicalScope: (variable: string) => boolean;\n}\n\nexport abstract class SymbolTable {\n  static top(\n    locals: readonly string[],\n    keywords: readonly string[],\n    options: SymbolTableOptions\n  ): ProgramSymbolTable {\n    return new ProgramSymbolTable(locals, keywords, options);\n  }\n\n  abstract root(): ProgramSymbolTable;\n\n  abstract has(name: string): boolean;\n  abstract get(name: string): [symbol: number, isRoot: boolean];\n\n  abstract hasKeyword(name: string): boolean;\n  abstract getKeyword(name: string): number;\n\n  abstract hasLexical(name: string): boolean;\n\n  abstract getLocalsMap(): Dict<number>;\n  abstract getDebugInfo(): Core.DebugSymbols;\n\n  abstract allocateFree(name: string, resolution: ASTv2.FreeVarResolution): number;\n  abstract allocateNamed(name: string): number;\n  abstract allocateBlock(name: string): number;\n  abstract allocate(identifier: string): number;\n\n  child(locals: string[]): BlockSymbolTable {\n    let symbols = locals.map((name) => this.allocate(name));\n    return new BlockSymbolTable(this, locals, symbols);\n  }\n}\n\nexport class ProgramSymbolTable extends SymbolTable {\n  constructor(\n    private templateLocals: readonly string[],\n    private keywords: readonly string[],\n    private options: SymbolTableOptions\n  ) {\n    super();\n\n    setLocalDebugType('syntax:symbol-table:program', this, {\n      debug: () => ({\n        templateLocals: this.templateLocals,\n        keywords: this.keywords,\n        symbols: this.symbols,\n        upvars: this.upvars,\n        named: this.named,\n        blocks: this.blocks,\n      }),\n    });\n  }\n\n  readonly symbols: string[] = [];\n  readonly upvars: string[] = [];\n\n  private size = 1;\n  readonly named = dict<number>();\n  readonly blocks = dict<number>();\n  readonly usedTemplateLocals: string[] = [];\n\n  root(): ProgramSymbolTable {\n    return this;\n  }\n\n  hasLexical(name: string): boolean {\n    return this.options.lexicalScope(name);\n  }\n\n  hasKeyword(name: string): boolean {\n    return this.keywords.includes(name);\n  }\n\n  getKeyword(name: string): number {\n    return this.allocateFree(name, ASTv2.STRICT_RESOLUTION);\n  }\n\n  getUsedTemplateLocals(): string[] {\n    return this.usedTemplateLocals;\n  }\n\n  has(name: string): boolean {\n    return this.templateLocals.includes(name);\n  }\n\n  get(name: string): [number, boolean] {\n    let index = this.usedTemplateLocals.indexOf(name);\n\n    if (index !== -1) {\n      return [index, true];\n    }\n\n    index = this.usedTemplateLocals.length;\n    this.usedTemplateLocals.push(name);\n    return [index, true];\n  }\n\n  getLocalsMap(): Dict<number> {\n    return dict();\n  }\n\n  getDebugInfo(): Core.DebugSymbols {\n    return [this.getLocalsMap(), this.named];\n  }\n\n  allocateFree(name: string, resolution: ASTv2.FreeVarResolution): number {\n    // If the name in question is an uppercase (i.e. angle-bracket) component invocation, run\n    // the optional `customizeComponentName` function provided to the precompiler.\n    if (\n      resolution.resolution() === SexpOpcodes.GetFreeAsComponentHead &&\n      resolution.isAngleBracket\n    ) {\n      name = this.options.customizeComponentName(name);\n    }\n\n    let index = this.upvars.indexOf(name);\n\n    if (index !== -1) {\n      return index;\n    }\n\n    index = this.upvars.length;\n    this.upvars.push(name);\n    return index;\n  }\n\n  allocateNamed(name: string): number {\n    let named = this.named[name];\n\n    if (!named) {\n      named = this.named[name] = this.allocate(name);\n    }\n\n    return named;\n  }\n\n  allocateBlock(name: string): number {\n    if (name === 'inverse') {\n      name = 'else';\n    }\n\n    let block = this.blocks[name];\n\n    if (!block) {\n      block = this.blocks[name] = this.allocate(`&${name}`);\n    }\n\n    return block;\n  }\n\n  allocate(identifier: string): number {\n    this.symbols.push(identifier);\n    return this.size++;\n  }\n}\n\nexport class BlockSymbolTable extends SymbolTable {\n  constructor(\n    private parent: SymbolTable,\n    public symbols: string[],\n    public slots: number[]\n  ) {\n    super();\n  }\n\n  root(): ProgramSymbolTable {\n    return this.parent.root();\n  }\n\n  get locals(): string[] {\n    return this.symbols;\n  }\n\n  hasLexical(name: string): boolean {\n    return this.parent.hasLexical(name);\n  }\n\n  getKeyword(name: string): number {\n    return this.parent.getKeyword(name);\n  }\n\n  hasKeyword(name: string): boolean {\n    return this.parent.hasKeyword(name);\n  }\n\n  has(name: string): boolean {\n    return this.symbols.indexOf(name) !== -1 || this.parent.has(name);\n  }\n\n  get(name: string): [number, boolean] {\n    let local = this.#get(name);\n    return local ? [local, false] : this.parent.get(name);\n  }\n\n  #get(name: string): number | null {\n    let slot = this.symbols.indexOf(name);\n    return slot === -1 ? null : unwrap(this.slots[slot]);\n  }\n\n  getLocalsMap(): Dict<number> {\n    let dict = this.parent.getLocalsMap();\n    this.symbols.forEach((symbol) => (dict[symbol] = this.get(symbol)[0]));\n    return dict;\n  }\n\n  getDebugInfo(): [locals: Record<string, number>, upvars: Record<string, number>] {\n    const locals = this.getLocalsMap();\n    const root = this.root();\n    const named = root.named;\n\n    return [{ ...locals, ...named }, Object.fromEntries(root.upvars.map((s, i) => [s, i]))];\n  }\n\n  allocateFree(name: string, resolution: ASTv2.FreeVarResolution): number {\n    return this.parent.allocateFree(name, resolution);\n  }\n\n  allocateNamed(name: string): number {\n    return this.parent.allocateNamed(name);\n  }\n\n  allocateBlock(name: string): number {\n    return this.parent.allocateBlock(name);\n  }\n\n  allocate(identifier: string): number {\n    return this.parent.allocate(identifier);\n  }\n}\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { assert, assertPresentArray } from '@glimmer/debug-util';\nimport { assign } from '@glimmer/util';\n\nimport type { SourceSpan } from '../source/span';\nimport type { BlockSymbolTable, ProgramSymbolTable, SymbolTable } from '../symbol-table';\n\nimport { SourceSlice } from '../source/slice';\nimport { SpanList } from '../source/span-list';\nimport * as ASTv2 from './api';\n\nexport interface CallParts {\n  callee: ASTv2.CalleeNode;\n  args: ASTv2.Args;\n}\n\nexport class Builder {\n  // TEMPLATE //\n\n  template(\n    symbols: ProgramSymbolTable,\n    body: ASTv2.ContentNode[],\n    loc: SourceSpan\n  ): ASTv2.Template {\n    return new ASTv2.Template({\n      table: symbols,\n      body,\n      loc,\n    });\n  }\n\n  // INTERNAL (these nodes cannot be reached when doing general-purpose visiting) //\n\n  block(symbols: BlockSymbolTable, body: ASTv2.ContentNode[], loc: SourceSpan): ASTv2.Block {\n    return new ASTv2.Block({\n      scope: symbols,\n      body,\n      loc,\n    });\n  }\n\n  namedBlock(name: SourceSlice, block: ASTv2.Block, loc: SourceSpan): ASTv2.NamedBlock {\n    return new ASTv2.NamedBlock({\n      name,\n      block,\n      attrs: [],\n      componentArgs: [],\n      modifiers: [],\n      loc,\n    });\n  }\n\n  simpleNamedBlock(name: SourceSlice, block: ASTv2.Block, loc: SourceSpan): ASTv2.NamedBlock {\n    return new BuildElement({\n      selfClosing: false,\n      attrs: [],\n      componentArgs: [],\n      modifiers: [],\n      comments: [],\n    }).named(name, block, loc);\n  }\n\n  slice(chars: string, loc: SourceSpan): SourceSlice {\n    return new SourceSlice({\n      loc,\n      chars,\n    });\n  }\n\n  args(\n    positional: ASTv2.PositionalArguments,\n    named: ASTv2.NamedArguments,\n    loc: SourceSpan\n  ): ASTv2.Args {\n    return new ASTv2.Args({\n      loc,\n      positional,\n      named,\n    });\n  }\n\n  positional(exprs: ASTv2.ExpressionNode[], loc: SourceSpan): ASTv2.PositionalArguments {\n    return new ASTv2.PositionalArguments({\n      loc,\n      exprs,\n    });\n  }\n\n  namedArgument(key: SourceSlice, value: ASTv2.ExpressionNode): ASTv2.NamedArgument {\n    return new ASTv2.NamedArgument({\n      name: key,\n      value,\n    });\n  }\n\n  named(entries: ASTv2.NamedArgument[], loc: SourceSpan): ASTv2.NamedArguments {\n    return new ASTv2.NamedArguments({\n      loc,\n      entries,\n    });\n  }\n\n  attr(\n    {\n      name,\n      value,\n      trusting,\n    }: { name: SourceSlice; value: ASTv2.ExpressionNode; trusting: boolean },\n    loc: SourceSpan\n  ): ASTv2.HtmlAttr {\n    return new ASTv2.HtmlAttr({\n      loc,\n      name,\n      value,\n      trusting,\n    });\n  }\n\n  splatAttr(symbol: number, loc: SourceSpan): ASTv2.SplatAttr {\n    return new ASTv2.SplatAttr({\n      symbol,\n      loc,\n    });\n  }\n\n  arg(\n    {\n      name,\n      value,\n      trusting,\n    }: { name: SourceSlice; value: ASTv2.ExpressionNode; trusting: boolean },\n    loc: SourceSpan\n  ): ASTv2.ComponentArg {\n    return new ASTv2.ComponentArg({\n      name,\n      value,\n      trusting,\n      loc,\n    });\n  }\n\n  // EXPRESSIONS //\n\n  path(head: ASTv2.VariableReference, tail: SourceSlice[], loc: SourceSpan): ASTv2.PathExpression {\n    return new ASTv2.PathExpression({\n      loc,\n      ref: head,\n      tail,\n    });\n  }\n\n  keyword(name: string, symbol: number, loc: SourceSpan): ASTv2.KeywordExpression {\n    return new ASTv2.KeywordExpression({\n      loc,\n      name,\n      symbol,\n    });\n  }\n\n  self(loc: SourceSpan): ASTv2.VariableReference {\n    return new ASTv2.ThisReference({\n      loc,\n    });\n  }\n\n  at(name: string, symbol: number, loc: SourceSpan): ASTv2.VariableReference {\n    // the `@` should be included so we have a complete source range\n    assert(name[0] === '@', `call builders.at() with a string that starts with '@'`);\n\n    return new ASTv2.ArgReference({\n      loc,\n      name: new SourceSlice({ loc, chars: name }),\n      symbol,\n    });\n  }\n\n  freeVar({\n    name,\n    context,\n    symbol,\n    loc,\n  }: {\n    name: string;\n    context: ASTv2.FreeVarResolution;\n    symbol: number;\n    loc: SourceSpan;\n  }): ASTv2.FreeVarReference {\n    assert(\n      name !== 'this',\n      `You called builders.freeVar() with 'this'. Call builders.this instead`\n    );\n    assert(\n      name[0] !== '@',\n      `You called builders.freeVar() with '${name}'. Call builders.at('${name}') instead`\n    );\n\n    return new ASTv2.FreeVarReference({\n      name,\n      resolution: context,\n      symbol,\n      loc,\n    });\n  }\n\n  localVar(\n    name: string,\n    symbol: number,\n    isTemplateLocal: boolean,\n    loc: SourceSpan\n  ): ASTv2.VariableReference {\n    assert(name !== 'this', `You called builders.var() with 'this'. Call builders.this instead`);\n    assert(\n      name[0] !== '@',\n      `You called builders.var() with '${name}'. Call builders.at('${name}') instead`\n    );\n\n    return new ASTv2.LocalVarReference({\n      loc,\n      name,\n      isTemplateLocal,\n      symbol,\n    });\n  }\n\n  sexp(parts: CallParts, loc: SourceSpan): ASTv2.CallExpression {\n    return new ASTv2.CallExpression({\n      loc,\n      callee: parts.callee,\n      args: parts.args,\n    });\n  }\n\n  interpolate(parts: ASTv2.ExpressionNode[], loc: SourceSpan): ASTv2.InterpolateExpression {\n    assertPresentArray(parts);\n\n    return new ASTv2.InterpolateExpression({\n      loc,\n      parts,\n    });\n  }\n\n  literal(value: string, loc: SourceSpan): ASTv2.LiteralExpression & { value: string };\n  literal(value: number, loc: SourceSpan): ASTv2.LiteralExpression & { value: number };\n  literal(value: boolean, loc: SourceSpan): ASTv2.LiteralExpression & { value: boolean };\n  literal(value: null, loc: SourceSpan): ASTv2.LiteralExpression & { value: null };\n  literal(value: undefined, loc: SourceSpan): ASTv2.LiteralExpression & { value: undefined };\n  literal(\n    value: string | number | boolean | null | undefined,\n    loc: SourceSpan\n  ): ASTv2.LiteralExpression;\n  literal(\n    value: string | number | boolean | null | undefined,\n    loc: SourceSpan\n  ): ASTv2.LiteralExpression {\n    return new ASTv2.LiteralExpression({\n      loc,\n      value,\n    });\n  }\n\n  // STATEMENTS //\n\n  append(\n    {\n      table,\n      trusting,\n      value,\n    }: { table: SymbolTable; trusting: boolean; value: ASTv2.ExpressionNode },\n    loc: SourceSpan\n  ): ASTv2.AppendContent {\n    return new ASTv2.AppendContent({\n      table,\n      trusting,\n      value,\n      loc,\n    });\n  }\n\n  modifier({ callee, args }: CallParts, loc: SourceSpan): ASTv2.ElementModifier {\n    return new ASTv2.ElementModifier({\n      loc,\n      callee,\n      args,\n    });\n  }\n\n  namedBlocks(blocks: ASTv2.NamedBlock[], loc: SourceSpan): ASTv2.NamedBlocks {\n    return new ASTv2.NamedBlocks({\n      loc,\n      blocks,\n    });\n  }\n\n  blockStatement(\n    {\n      program,\n      inverse = null,\n      ...call\n    }: {\n      symbols: SymbolTable;\n      program: ASTv2.Block;\n      inverse?: ASTv2.Block | null;\n    } & CallParts,\n    loc: SourceSpan\n  ): ASTv2.InvokeBlock {\n    let blocksLoc = program.loc;\n    let blocks: PresentArray<ASTv2.NamedBlock> = [\n      this.namedBlock(SourceSlice.synthetic('default'), program, program.loc),\n    ];\n    if (inverse) {\n      blocksLoc = blocksLoc.extend(inverse.loc);\n      blocks.push(this.namedBlock(SourceSlice.synthetic('else'), inverse, inverse.loc));\n    }\n\n    return new ASTv2.InvokeBlock({\n      loc,\n      blocks: this.namedBlocks(blocks, blocksLoc),\n      callee: call.callee,\n      args: call.args,\n    });\n  }\n\n  element(options: BuildBaseElement): BuildElement {\n    return new BuildElement(options);\n  }\n}\n\nexport interface BuildBaseElement {\n  selfClosing: boolean;\n  attrs: ASTv2.HtmlOrSplatAttr[];\n  componentArgs: ASTv2.ComponentArg[];\n  modifiers: ASTv2.ElementModifier[];\n  comments: ASTv2.GlimmerComment[];\n}\n\nexport class BuildElement {\n  readonly builder: Builder;\n  constructor(readonly base: BuildBaseElement) {\n    this.builder = new Builder();\n  }\n\n  simple(tag: SourceSlice, body: ASTv2.ContentNode[], loc: SourceSpan): ASTv2.SimpleElement {\n    return new ASTv2.SimpleElement(\n      assign(\n        {\n          tag,\n          body,\n          componentArgs: [],\n          loc,\n        },\n        this.base\n      )\n    );\n  }\n\n  named(name: SourceSlice, block: ASTv2.Block, loc: SourceSpan): ASTv2.NamedBlock {\n    return new ASTv2.NamedBlock(\n      assign(\n        {\n          name,\n          block,\n          componentArgs: [],\n          loc,\n        },\n        this.base\n      )\n    );\n  }\n\n  selfClosingComponent(callee: ASTv2.ExpressionNode, loc: SourceSpan): ASTv2.InvokeComponent {\n    return new ASTv2.InvokeComponent(\n      assign(\n        {\n          loc,\n          callee,\n          // point the empty named blocks at the `/` self-closing tag\n          blocks: new ASTv2.NamedBlocks({\n            blocks: [],\n            loc: loc.sliceEndChars({ skipEnd: 1, chars: 1 }),\n          }),\n        },\n        this.base\n      )\n    );\n  }\n\n  componentWithDefaultBlock(\n    callee: ASTv2.ExpressionNode,\n    children: ASTv2.ContentNode[],\n    symbols: BlockSymbolTable,\n    loc: SourceSpan\n  ): ASTv2.InvokeComponent {\n    let block = this.builder.block(symbols, children, loc);\n    let namedBlock = this.builder.namedBlock(SourceSlice.synthetic('default'), block, loc); // BUILDER.simpleNamedBlock('default', children, symbols, loc);\n\n    return new ASTv2.InvokeComponent(\n      assign(\n        {\n          loc,\n          callee,\n          blocks: this.builder.namedBlocks([namedBlock], namedBlock.loc),\n        },\n        this.base\n      )\n    );\n  }\n\n  componentWithNamedBlocks(\n    callee: ASTv2.ExpressionNode,\n    blocks: PresentArray<ASTv2.NamedBlock>,\n    loc: SourceSpan\n  ): ASTv2.InvokeComponent {\n    return new ASTv2.InvokeComponent(\n      assign(\n        {\n          loc,\n          callee,\n          blocks: this.builder.namedBlocks(blocks, SpanList.range(blocks)),\n        },\n        this.base\n      )\n    );\n  }\n}\n","import type * as ASTv1 from '../v1/api';\n\nimport * as ASTv2 from './api';\n\nexport interface AstCallParts {\n  path: ASTv1.Expression;\n  params: ASTv1.Expression[];\n  hash: ASTv1.Hash;\n}\n\nexport interface VarPath extends ASTv1.PathExpression {\n  head: ASTv1.VarHead;\n}\n\nexport function SexpSyntaxContext(node: ASTv1.SubExpression): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.HELPER_NAMESPACE);\n  } else {\n    return null;\n  }\n}\n\nexport function ModifierSyntaxContext(\n  node: ASTv1.ElementModifierStatement\n): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.MODIFIER_NAMESPACE);\n  } else {\n    return null;\n  }\n}\n\nexport function BlockSyntaxContext(node: ASTv1.BlockStatement): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.COMPONENT_NAMESPACE);\n  } else {\n    return null;\n  }\n}\n\nexport function ComponentSyntaxContext(node: ASTv1.PathExpression): ASTv2.FreeVarResolution | null {\n  if (isSimplePath(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.COMPONENT_NAMESPACE, true);\n  } else {\n    return null;\n  }\n}\n\n/**\n * This corresponds to attribute curlies (<Foo bar={{...}}>).\n * In strict mode, this also corresponds to arg curlies.\n */\nexport function AttrValueSyntaxContext(\n  node: ASTv1.MustacheStatement\n): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.HELPER_NAMESPACE);\n  } else {\n    return null;\n  }\n}\n\n/**\n * This corresponds to append positions text curlies.\n */\nexport function AppendSyntaxContext(node: ASTv1.MustacheStatement): ASTv2.FreeVarResolution | null {\n  let isSimple = isSimpleCallee(node);\n  let trusting = node.trusting;\n\n  if (isSimple) {\n    return trusting\n      ? ASTv2.LooseModeResolution.trustingAppend()\n      : ASTv2.LooseModeResolution.append();\n  } else {\n    return null;\n  }\n}\n\nexport type Resolution<P extends AstCallParts | ASTv1.PathExpression> = (\n  call: P\n) => ASTv2.FreeVarResolution | null;\n\n// UTILITIES\n\n/**\n * A call node has a simple callee if its head is:\n *\n * - a `PathExpression`\n * - the `PathExpression`'s head is a `VarHead`\n * - it has no tail\n *\n * Simple heads:\n *\n * ```\n * {{x}}\n * {{x y}}\n * ```\n *\n * Not simple heads:\n *\n * ```\n * {{x.y}}\n * {{x.y z}}\n * {{@x}}\n * {{@x a}}\n * {{this}}\n * {{this a}}\n * ```\n */\nfunction isSimpleCallee(node: AstCallParts): boolean {\n  return isSimplePath(node.path);\n}\n\ntype SimplePath = ASTv1.PathExpression & { head: ASTv1.VarHead };\n\nfunction isSimplePath(node: ASTv1.Expression): node is SimplePath {\n  if (node.type === 'PathExpression' && node.head.type === 'VarHead') {\n    return node.tail.length === 0;\n  } else {\n    return false;\n  }\n}\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { asPresentArray, assert, isPresentArray } from '@glimmer/debug-util';\nimport { assign } from '@glimmer/util';\n\nimport type {\n  PrecompileOptions,\n  PrecompileOptionsWithLexicalScope,\n} from '../parser/tokenizer-event-handlers';\nimport type { SourceLocation } from '../source/location';\nimport type { Source } from '../source/source';\nimport type { SourceSpan } from '../source/span';\nimport type { BlockSymbolTable, ProgramSymbolTable } from '../symbol-table';\nimport type * as ASTv1 from '../v1/api';\nimport type { BuildElement, CallParts } from './builders';\nimport type { Resolution } from './loose-resolution';\n\nimport Printer from '../generation/printer';\nimport { preprocess } from '../parser/tokenizer-event-handlers';\nimport { SourceSlice } from '../source/slice';\nimport { SpanList } from '../source/span-list';\nimport { SymbolTable } from '../symbol-table';\nimport { generateSyntaxError } from '../syntax-error';\nimport { isLowerCase, isUpperCase } from '../utils';\nimport b from '../v1/parser-builders';\nimport * as ASTv2 from './api';\nimport { Builder } from './builders';\nimport {\n  AppendSyntaxContext,\n  AttrValueSyntaxContext,\n  BlockSyntaxContext,\n  ComponentSyntaxContext,\n  ModifierSyntaxContext,\n  SexpSyntaxContext,\n} from './loose-resolution';\n\nexport function normalize(\n  source: Source,\n  options: PrecompileOptionsWithLexicalScope = { lexicalScope: () => false }\n): [ast: ASTv2.Template, locals: string[]] {\n  let ast = preprocess(source, options);\n\n  let normalizeOptions = {\n    strictMode: false,\n    ...options,\n    locals: ast.blockParams,\n    keywords: options.keywords ?? [],\n  };\n\n  let top = SymbolTable.top(normalizeOptions.locals, normalizeOptions.keywords, {\n    customizeComponentName: options.customizeComponentName ?? ((name) => name),\n    lexicalScope: options.lexicalScope,\n  });\n  let block = new BlockContext(source, normalizeOptions, top);\n  let normalizer = new StatementNormalizer(block);\n\n  let astV2 = new TemplateChildren(\n    block.loc(ast.loc),\n    ast.body.map((b) => normalizer.normalize(b)),\n    block\n  ).assertTemplate(top);\n\n  let locals = top.getUsedTemplateLocals();\n\n  return [astV2, locals];\n}\n\n/**\n * A `BlockContext` represents the block that a particular AST node is contained inside of.\n *\n * `BlockContext` is aware of template-wide options (such as strict mode), as well as the bindings\n * that are in-scope within that block.\n *\n * Concretely, it has the `PrecompileOptions` and current `SymbolTable`, and provides\n * facilities for working with those options.\n *\n * `BlockContext` is stateless.\n */\nexport class BlockContext<Table extends SymbolTable = SymbolTable> {\n  readonly builder: Builder;\n\n  constructor(\n    readonly source: Source,\n    private readonly options: PrecompileOptions,\n    readonly table: Table\n  ) {\n    this.builder = new Builder();\n  }\n\n  get strict(): boolean {\n    return this.options.strictMode || false;\n  }\n\n  loc(loc: SourceLocation): SourceSpan {\n    return this.source.spanFor(loc);\n  }\n\n  resolutionFor<N extends ASTv1.CallNode | ASTv1.PathExpression>(\n    node: N,\n    resolution: Resolution<N>\n  ): { result: ASTv2.FreeVarResolution } | { result: 'error'; path: string; head: string } {\n    if (this.strict) {\n      return { result: ASTv2.STRICT_RESOLUTION };\n    }\n\n    if (this.isFreeVar(node)) {\n      let r = resolution(node);\n\n      if (r === null) {\n        return {\n          result: 'error',\n          path: printPath(node),\n          head: printHead(node),\n        };\n      }\n\n      return { result: r };\n    } else {\n      return { result: ASTv2.STRICT_RESOLUTION };\n    }\n  }\n\n  isLexicalVar(variable: string): boolean {\n    return this.table.hasLexical(variable);\n  }\n\n  isKeyword(name: string): boolean {\n    return this.strict && !this.table.hasLexical(name) && this.table.hasKeyword(name);\n  }\n\n  private isFreeVar(callee: ASTv1.CallNode | ASTv1.PathExpression): boolean {\n    if (callee.type === 'PathExpression') {\n      if (callee.head.type !== 'VarHead') {\n        return false;\n      }\n\n      return !this.table.has(callee.head.name);\n    } else if (callee.path.type === 'PathExpression') {\n      return this.isFreeVar(callee.path);\n    } else {\n      return false;\n    }\n  }\n\n  hasBinding(name: string): boolean {\n    return this.table.has(name) || this.table.hasLexical(name);\n  }\n\n  child(blockParams: string[]): BlockContext<BlockSymbolTable> {\n    return new BlockContext(this.source, this.options, this.table.child(blockParams));\n  }\n\n  customizeComponentName(input: string): string {\n    if (this.options.customizeComponentName) {\n      return this.options.customizeComponentName(input);\n    } else {\n      return input;\n    }\n  }\n}\n\n/**\n * An `ExpressionNormalizer` normalizes expressions within a block.\n *\n * `ExpressionNormalizer` is stateless.\n */\nclass ExpressionNormalizer {\n  constructor(private block: BlockContext) {}\n\n  /**\n   * The `normalize` method takes an arbitrary expression and its original syntax context and\n   * normalizes it to an ASTv2 expression.\n   *\n   * @see {SyntaxContext}\n   */\n  normalize(expr: ASTv1.Literal): ASTv2.LiteralExpression;\n  normalize(expr: ASTv1.SubExpression): ASTv2.CallExpression;\n  normalize(\n    expr: ASTv1.MinimalPathExpression,\n    resolution: ASTv2.FreeVarResolution\n  ): ASTv2.PathExpression;\n  normalize(expr: ASTv1.Expression, resolution: ASTv2.FreeVarResolution): ASTv2.ExpressionNode;\n  normalize(\n    expr: ASTv1.Expression | ASTv1.MinimalPathExpression,\n    resolution?: ASTv2.FreeVarResolution\n  ): ASTv2.ExpressionNode {\n    switch (expr.type) {\n      case 'NullLiteral':\n      case 'BooleanLiteral':\n      case 'NumberLiteral':\n      case 'StringLiteral':\n      case 'UndefinedLiteral':\n        return this.block.builder.literal(expr.value, this.block.loc(expr.loc));\n      case 'PathExpression':\n        assert(resolution, '[BUG] resolution is required');\n        return this.path(expr, resolution);\n      case 'SubExpression': {\n        // expr.path used to incorrectly have the type ASTv1.Expression\n        if (isLiteral(expr.path)) {\n          assertIllegalLiteral(expr.path, expr.loc);\n        }\n\n        let resolution = this.block.resolutionFor(expr, SexpSyntaxContext);\n\n        if (resolution.result === 'error') {\n          throw generateSyntaxError(\n            `You attempted to invoke a path (\\`${resolution.path}\\`) but ${resolution.head} was not in scope`,\n            expr.loc\n          );\n        }\n\n        return this.block.builder.sexp(\n          this.callParts(expr, resolution.result),\n          this.block.loc(expr.loc)\n        );\n      }\n    }\n  }\n\n  private path(\n    expr: ASTv1.MinimalPathExpression,\n    resolution: ASTv2.FreeVarResolution\n  ): ASTv2.KeywordExpression | ASTv2.PathExpression {\n    let loc = this.block.loc(expr.loc);\n\n    if (\n      expr.head.type === 'VarHead' &&\n      expr.tail.length === 0 &&\n      this.block.isKeyword(expr.head.name)\n    ) {\n      return this.block.builder.keyword(\n        expr.head.name,\n        this.block.table.getKeyword(expr.head.name),\n        loc\n      );\n    }\n\n    let headOffsets = this.block.loc(expr.head.loc);\n\n    let tail = [];\n\n    // start with the head\n    let offset = headOffsets;\n\n    for (let part of expr.tail) {\n      offset = offset.sliceStartChars({ chars: part.length, skipStart: 1 });\n      tail.push(\n        new SourceSlice({\n          loc: offset,\n          chars: part,\n        })\n      );\n    }\n\n    return this.block.builder.path(this.ref(expr.head, resolution), tail, loc);\n  }\n\n  /**\n   * The `callParts` method takes ASTv1.CallParts as well as a syntax context and normalizes\n   * it to an ASTv2 CallParts.\n   */\n  callParts(parts: ASTv1.CallParts, context: ASTv2.FreeVarResolution): CallParts {\n    let { path, params, hash, loc } = parts;\n\n    let callee = this.normalize(path, context);\n    let paramList = params.map((p) => this.normalize(p, ASTv2.STRICT_RESOLUTION));\n    let paramLoc = SpanList.range(paramList, callee.loc.collapse('end'));\n    let namedLoc = this.block.loc(hash.loc);\n    let argsLoc = SpanList.range([paramLoc, namedLoc]);\n\n    let positional = this.block.builder.positional(\n      params.map((p) => this.normalize(p, ASTv2.STRICT_RESOLUTION)),\n      paramLoc\n    );\n\n    let named = this.block.builder.named(\n      hash.pairs.map((p) => this.namedArgument(p)),\n      this.block.loc(hash.loc)\n    );\n\n    switch (callee.type) {\n      case 'Literal':\n        throw generateSyntaxError(\n          `Invalid invocation of a literal value (\\`${callee.value}\\`)`,\n          loc\n        );\n\n      // This really shouldn't be possible, something has gone pretty wrong\n      case 'Interpolate':\n        throw generateSyntaxError(`Invalid invocation of a interpolated string`, loc);\n    }\n\n    return {\n      callee,\n      args: this.block.builder.args(positional, named, argsLoc),\n    };\n  }\n\n  private namedArgument(pair: ASTv1.HashPair): ASTv2.NamedArgument {\n    let offsets = this.block.loc(pair.loc);\n\n    let keyOffsets = offsets.sliceStartChars({ chars: pair.key.length });\n\n    return this.block.builder.namedArgument(\n      new SourceSlice({ chars: pair.key, loc: keyOffsets }),\n      this.normalize(pair.value, ASTv2.STRICT_RESOLUTION)\n    );\n  }\n\n  /**\n   * The `ref` method normalizes an `ASTv1.PathHead` into an `ASTv2.VariableReference`.\n   * This method is extremely important, because it is responsible for normalizing free\n   * variables into an an ASTv2.PathHead *with appropriate context*.\n   *\n   * The syntax context is originally determined by the syntactic position that this `PathHead`\n   * came from, and is ultimately attached to the `ASTv2.VariableReference` here. In ASTv2,\n   * the `VariableReference` node bears full responsibility for loose mode rules that control\n   * the behavior of free variables.\n   */\n  private ref(head: ASTv1.PathHead, resolution: ASTv2.FreeVarResolution): ASTv2.VariableReference {\n    let { block } = this;\n    let { builder, table } = block;\n    let offsets = block.loc(head.loc);\n\n    switch (head.type) {\n      case 'ThisHead':\n        return builder.self(offsets);\n      case 'AtHead': {\n        let symbol = table.allocateNamed(head.name);\n        return builder.at(head.name, symbol, offsets);\n      }\n      case 'VarHead': {\n        if (block.hasBinding(head.name)) {\n          let [symbol, isRoot] = table.get(head.name);\n\n          return block.builder.localVar(head.name, symbol, isRoot, offsets);\n        } else {\n          let context = block.strict ? ASTv2.STRICT_RESOLUTION : resolution;\n          let symbol = block.table.allocateFree(head.name, context);\n\n          return block.builder.freeVar({\n            name: head.name,\n            context,\n            symbol,\n            loc: offsets,\n          });\n        }\n      }\n    }\n  }\n}\n\n/**\n * `TemplateNormalizer` normalizes top-level ASTv1 statements to ASTv2.\n */\nclass StatementNormalizer {\n  constructor(private readonly block: BlockContext) {}\n\n  normalize(node: ASTv1.Statement): ASTv2.ContentNode | ASTv2.NamedBlock {\n    switch (node.type) {\n      case 'BlockStatement':\n        return this.BlockStatement(node);\n      case 'ElementNode':\n        return new ElementNormalizer(this.block).ElementNode(node);\n      case 'MustacheStatement':\n        return this.MustacheStatement(node);\n\n      // These are the same in ASTv2\n      case 'MustacheCommentStatement':\n        return this.MustacheCommentStatement(node);\n\n      case 'CommentStatement': {\n        let loc = this.block.loc(node.loc);\n        return new ASTv2.HtmlComment({\n          loc,\n          text: loc.slice({ skipStart: 4, skipEnd: 3 }).toSlice(node.value),\n        });\n      }\n\n      case 'TextNode':\n        return new ASTv2.HtmlText({\n          loc: this.block.loc(node.loc),\n          chars: node.chars,\n        });\n    }\n  }\n\n  MustacheCommentStatement(node: ASTv1.MustacheCommentStatement): ASTv2.GlimmerComment {\n    let loc = this.block.loc(node.loc);\n    let textLoc: SourceSpan;\n\n    if (loc.asString().slice(0, 5) === '{{!--') {\n      textLoc = loc.slice({ skipStart: 5, skipEnd: 4 });\n    } else {\n      textLoc = loc.slice({ skipStart: 3, skipEnd: 2 });\n    }\n\n    return new ASTv2.GlimmerComment({\n      loc,\n      text: textLoc.toSlice(node.value),\n    });\n  }\n\n  /**\n   * Normalizes an ASTv1.MustacheStatement to an ASTv2.AppendStatement\n   */\n  MustacheStatement(mustache: ASTv1.MustacheStatement): ASTv2.AppendContent {\n    let { path, params, hash, trusting } = mustache;\n    let loc = this.block.loc(mustache.loc);\n    let value: ASTv2.ExpressionNode;\n\n    if (isLiteral(path)) {\n      if (params.length === 0 && hash.pairs.length === 0) {\n        value = this.expr.normalize(path);\n      } else {\n        assertIllegalLiteral(path, loc);\n      }\n    } else {\n      let resolution = this.block.resolutionFor(mustache, AppendSyntaxContext);\n\n      if (resolution.result === 'error') {\n        throw generateSyntaxError(\n          `You attempted to render a path (\\`{{${resolution.path}}}\\`), but ${resolution.head} was not in scope`,\n          loc\n        );\n      }\n\n      // Normalize the call parts in AppendSyntaxContext\n      let callParts = this.expr.callParts(\n        {\n          path,\n          params,\n          hash,\n          loc,\n        },\n        resolution.result\n      );\n\n      value = callParts.args.isEmpty() ? callParts.callee : this.block.builder.sexp(callParts, loc);\n    }\n\n    return this.block.builder.append(\n      {\n        table: this.block.table,\n        trusting,\n        value,\n      },\n      loc\n    );\n  }\n\n  /**\n   * Normalizes a ASTv1.BlockStatement to an ASTv2.BlockStatement\n   */\n  BlockStatement(block: ASTv1.BlockStatement): ASTv2.InvokeBlock {\n    let { program, inverse } = block;\n    let loc = this.block.loc(block.loc);\n\n    // block.path used to incorrectly have the type ASTv1.Expression\n    if (isLiteral(block.path)) {\n      assertIllegalLiteral(block.path, loc);\n    }\n\n    let resolution = this.block.resolutionFor(block, BlockSyntaxContext);\n\n    if (resolution.result === 'error') {\n      throw generateSyntaxError(\n        `You attempted to invoke a path (\\`{{#${resolution.path}}}\\`) but ${resolution.head} was not in scope`,\n        loc\n      );\n    }\n\n    let callParts = this.expr.callParts(block, resolution.result);\n\n    return this.block.builder.blockStatement(\n      assign(\n        {\n          symbols: this.block.table,\n          program: this.Block(program),\n          inverse: inverse ? this.Block(inverse) : null,\n        },\n        callParts\n      ),\n      loc\n    );\n  }\n\n  Block({ body, loc, blockParams }: ASTv1.Block): ASTv2.Block {\n    let child = this.block.child(blockParams);\n    let normalizer = new StatementNormalizer(child);\n    return new BlockChildren(\n      this.block.loc(loc),\n      body.map((b) => normalizer.normalize(b)),\n      this.block\n    ).assertBlock(child.table);\n  }\n\n  private get expr(): ExpressionNormalizer {\n    return new ExpressionNormalizer(this.block);\n  }\n}\n\nclass ElementNormalizer {\n  constructor(private readonly ctx: BlockContext) {}\n\n  /**\n   * Normalizes an ASTv1.ElementNode to:\n   *\n   * - ASTv2.NamedBlock if the tag name begins with `:`\n   * - ASTv2.Component if the tag name matches the component heuristics\n   * - ASTv2.SimpleElement if the tag name doesn't match the component heuristics\n   *\n   * A tag name represents a component if:\n   *\n   * - it begins with `@`\n   * - it is exactly `this` or begins with `this.`\n   * - the part before the first `.` is a reference to an in-scope variable binding\n   * - it begins with an uppercase character\n   */\n  ElementNode(element: ASTv1.ElementNode): ASTv2.ElementNode {\n    let { tag, selfClosing, comments } = element;\n    let loc = this.ctx.loc(element.loc);\n\n    let [tagHead, ...rest] = asPresentArray(tag.split('.'));\n\n    // the head, attributes and modifiers are in the current scope\n    let path = this.classifyTag(tagHead, rest, element.loc);\n\n    let attrs = element.attributes.filter((a) => a.name[0] !== '@').map((a) => this.attr(a));\n    let args = element.attributes.filter((a) => a.name[0] === '@').map((a) => this.arg(a));\n\n    let modifiers = element.modifiers.map((m) => this.modifier(m));\n\n    // the element's block params are in scope for the children\n    let child = this.ctx.child(element.blockParams);\n    let normalizer = new StatementNormalizer(child);\n\n    let childNodes = element.children.map((s) => normalizer.normalize(s));\n\n    let el = this.ctx.builder.element({\n      selfClosing,\n      attrs,\n      componentArgs: args,\n      modifiers,\n      comments: comments.map((c) => new StatementNormalizer(this.ctx).MustacheCommentStatement(c)),\n    });\n\n    let children = new ElementChildren(el, loc, childNodes, this.ctx);\n\n    let offsets = this.ctx.loc(element.loc);\n    let tagOffsets = offsets.sliceStartChars({ chars: tag.length, skipStart: 1 });\n\n    if (path === 'ElementHead') {\n      if (tag[0] === ':') {\n        return children.assertNamedBlock(\n          tagOffsets.slice({ skipStart: 1 }).toSlice(tag.slice(1)),\n          child.table\n        );\n      } else {\n        return children.assertElement(tagOffsets.toSlice(tag), element.blockParams.length > 0);\n      }\n    }\n\n    if (element.selfClosing) {\n      return el.selfClosingComponent(path, loc);\n    } else {\n      let blocks = children.assertComponent(tag, child.table, element.blockParams.length > 0);\n      return el.componentWithNamedBlocks(path, blocks, loc);\n    }\n  }\n\n  private modifier(m: ASTv1.ElementModifierStatement): ASTv2.ElementModifier {\n    // modifier.path used to incorrectly have the type ASTv1.Expression\n    if (isLiteral(m.path)) {\n      assertIllegalLiteral(m.path, m.loc);\n    }\n\n    let resolution = this.ctx.resolutionFor(m, ModifierSyntaxContext);\n\n    if (resolution.result === 'error') {\n      throw generateSyntaxError(\n        `You attempted to invoke a path (\\`{{${resolution.path}}}\\`) as a modifier, but ${resolution.head} was not in scope`,\n        m.loc\n      );\n    }\n\n    let callParts = this.expr.callParts(m, resolution.result);\n    return this.ctx.builder.modifier(callParts, this.ctx.loc(m.loc));\n  }\n\n  /**\n   * This method handles attribute values that are curlies, as well as curlies nested inside of\n   * interpolations:\n   *\n   * ```hbs\n   * <a href={{url}} />\n   * <a href=\"{{url}}.html\" />\n   * ```\n   */\n  private mustacheAttr(mustache: ASTv1.MustacheStatement): ASTv2.ExpressionNode {\n    let { path, params, hash, loc } = mustache;\n\n    if (isLiteral(path)) {\n      if (params.length === 0 && hash.pairs.length === 0) {\n        return this.expr.normalize(path);\n      } else {\n        assertIllegalLiteral(path, loc);\n      }\n    }\n\n    // Normalize the call parts in AttrValueSyntaxContext\n    let resolution = this.ctx.resolutionFor(mustache, AttrValueSyntaxContext);\n\n    if (resolution.result === 'error') {\n      throw generateSyntaxError(\n        `You attempted to render a path (\\`{{${resolution.path}}}\\`), but ${resolution.head} was not in scope`,\n        mustache.loc\n      );\n    }\n\n    let sexp = this.ctx.builder.sexp(\n      this.expr.callParts(mustache as ASTv1.CallParts, resolution.result),\n      this.ctx.loc(mustache.loc)\n    );\n\n    // If there are no params or hash, just return the function part as its own expression\n    if (sexp.args.isEmpty()) {\n      return sexp.callee;\n    } else {\n      return sexp;\n    }\n  }\n\n  /**\n   * attrPart is the narrowed down list of valid attribute values that are also\n   * allowed as a concat part (you can't nest concats).\n   */\n  private attrPart(part: ASTv1.MustacheStatement | ASTv1.TextNode): {\n    expr: ASTv2.ExpressionNode;\n    trusting: boolean;\n  } {\n    switch (part.type) {\n      case 'MustacheStatement':\n        return { expr: this.mustacheAttr(part), trusting: part.trusting };\n      case 'TextNode':\n        return {\n          expr: this.ctx.builder.literal(part.chars, this.ctx.loc(part.loc)),\n          trusting: true,\n        };\n    }\n  }\n\n  private attrValue(part: ASTv1.MustacheStatement | ASTv1.TextNode | ASTv1.ConcatStatement): {\n    expr: ASTv2.ExpressionNode;\n    trusting: boolean;\n  } {\n    switch (part.type) {\n      case 'ConcatStatement': {\n        let parts = part.parts.map((p) => this.attrPart(p).expr);\n        return {\n          expr: this.ctx.builder.interpolate(parts, this.ctx.loc(part.loc)),\n          trusting: false,\n        };\n      }\n      default:\n        return this.attrPart(part);\n    }\n  }\n\n  private attr(m: ASTv1.AttrNode): ASTv2.HtmlOrSplatAttr {\n    assert(m.name[0] !== '@', 'An attr name must not start with `@`');\n\n    if (m.name === '...attributes') {\n      return this.ctx.builder.splatAttr(this.ctx.table.allocateBlock('attrs'), this.ctx.loc(m.loc));\n    }\n\n    let offsets = this.ctx.loc(m.loc);\n    let nameSlice = offsets.sliceStartChars({ chars: m.name.length }).toSlice(m.name);\n    let value = this.attrValue(m.value);\n\n    return this.ctx.builder.attr(\n      { name: nameSlice, value: value.expr, trusting: value.trusting },\n      offsets\n    );\n  }\n\n  // An arg curly <Foo @bar={{...}} /> is the same as an attribute curly for\n  // our purposes, except that in loose mode <Foo @bar={{baz}} /> is an error:\n  private checkArgCall(arg: ASTv1.AttrNode): void {\n    let { value } = arg;\n\n    if (value.type !== 'MustacheStatement') {\n      return;\n    }\n\n    if (value.params.length !== 0 || value.hash.pairs.length !== 0) {\n      return;\n    }\n\n    let { path } = value;\n\n    if (path.type !== 'PathExpression') {\n      return;\n    }\n\n    if (path.tail.length > 0) {\n      return;\n    }\n\n    let resolution = this.ctx.resolutionFor(path, () => {\n      // We deliberately don't want this to resolve anything. The purpose of\n      // calling `resolutionFor` here is to check for strict mode, in-scope\n      // local variables, etc.\n      return null;\n    });\n\n    if (resolution.result === 'error' && resolution.path !== 'has-block') {\n      throw generateSyntaxError(\n        `You attempted to pass a path as argument (\\`${arg.name}={{${resolution.path}}}\\`) but ${resolution.head} was not in scope. Try:\\n` +\n          `* \\`${arg.name}={{this.${resolution.path}}}\\` if this is meant to be a property lookup, or\\n` +\n          `* \\`${arg.name}={{(${resolution.path})}}\\` if this is meant to invoke the resolved helper, or\\n` +\n          `* \\`${arg.name}={{helper \"${resolution.path}\"}}\\` if this is meant to pass the resolved helper by value`,\n        arg.loc\n      );\n    }\n  }\n\n  private arg(arg: ASTv1.AttrNode): ASTv2.ComponentArg {\n    assert(arg.name[0] === '@', 'An arg name must start with `@`');\n    this.checkArgCall(arg);\n\n    let offsets = this.ctx.loc(arg.loc);\n    let nameSlice = offsets.sliceStartChars({ chars: arg.name.length }).toSlice(arg.name);\n    let value = this.attrValue(arg.value);\n\n    return this.ctx.builder.arg(\n      { name: nameSlice, value: value.expr, trusting: value.trusting },\n      offsets\n    );\n  }\n\n  /**\n   * This function classifies the head of an ASTv1.Element into an ASTv2.PathHead (if the\n   * element is a component) or `'ElementHead'` (if the element is a simple element).\n   *\n   * Rules:\n   *\n   * 1. If the variable is an `@arg`, return an `AtHead`\n   * 2. If the variable is `this`, return a `ThisHead`\n   * 3. If the variable is in the current scope:\n   *   a. If the scope is the root scope, then return a Free `LocalVarHead`\n   *   b. Else, return a standard `LocalVarHead`\n   * 4. If the tag name is a path and the variable is not in the current scope, Syntax Error\n   * 5. If the variable is uppercase return a FreeVar(ResolveAsComponentHead)\n   * 6. Otherwise, return `'ElementHead'`\n   */\n  private classifyTag(\n    variable: string,\n    tail: string[],\n    loc: SourceSpan\n  ): ASTv2.ExpressionNode | 'ElementHead' {\n    let uppercase = isUpperCase(variable);\n    let inScope = variable[0] === '@' || variable === 'this' || this.ctx.hasBinding(variable);\n\n    if (this.ctx.strict && !inScope) {\n      if (uppercase) {\n        throw generateSyntaxError(\n          `Attempted to invoke a component that was not in scope in a strict mode template, \\`<${variable}>\\`. If you wanted to create an element with that name, convert it to lowercase - \\`<${variable.toLowerCase()}>\\``,\n          loc\n        );\n      }\n\n      // In strict mode, values are always elements unless they are in scope\n      return 'ElementHead';\n    }\n\n    // Since the parser handed us the HTML element name as a string, we need\n    // to convert it into an ASTv1 path so it can be processed using the\n    // expression normalizer.\n    let isComponent = inScope || uppercase;\n\n    let variableLoc = loc.sliceStartChars({ skipStart: 1, chars: variable.length });\n\n    let tailLength = tail.reduce((accum, part) => accum + 1 + part.length, 0);\n    let pathEnd = variableLoc.getEnd().move(tailLength);\n    let pathLoc = variableLoc.withEnd(pathEnd);\n\n    if (isComponent) {\n      let path = b.path({\n        head: b.head({ original: variable, loc: variableLoc }),\n        tail,\n        loc: pathLoc,\n      });\n\n      let resolution = this.ctx.isLexicalVar(variable)\n        ? { result: ASTv2.STRICT_RESOLUTION }\n        : this.ctx.resolutionFor(path, ComponentSyntaxContext);\n\n      if (resolution.result === 'error') {\n        throw generateSyntaxError(\n          `You attempted to invoke a path (\\`<${resolution.path}>\\`) but ${resolution.head} was not in scope`,\n          loc\n        );\n      }\n\n      return new ExpressionNormalizer(this.ctx).normalize(path, resolution.result);\n    } else {\n      this.ctx.table.allocateFree(variable, ASTv2.STRICT_RESOLUTION);\n    }\n\n    // If the tag name wasn't a valid component but contained a `.`, it's\n    // a syntax error.\n    if (tail.length > 0) {\n      throw generateSyntaxError(\n        `You used ${variable}.${tail.join('.')} as a tag name, but ${variable} is not in scope`,\n        loc\n      );\n    }\n\n    return 'ElementHead';\n  }\n\n  private get expr(): ExpressionNormalizer {\n    return new ExpressionNormalizer(this.ctx);\n  }\n}\n\nclass Children {\n  readonly namedBlocks: ASTv2.NamedBlock[];\n  readonly hasSemanticContent: boolean;\n  readonly nonBlockChildren: ASTv2.ContentNode[];\n\n  constructor(\n    readonly loc: SourceSpan,\n    readonly children: (ASTv2.ContentNode | ASTv2.NamedBlock)[],\n    readonly block: BlockContext\n  ) {\n    this.namedBlocks = children.filter((c): c is ASTv2.NamedBlock => c instanceof ASTv2.NamedBlock);\n    this.hasSemanticContent = Boolean(\n      children.filter((c): c is ASTv2.ContentNode => {\n        if (c instanceof ASTv2.NamedBlock) {\n          return false;\n        }\n        switch (c.type) {\n          case 'GlimmerComment':\n          case 'HtmlComment':\n            return false;\n          case 'HtmlText':\n            return !/^\\s*$/u.test(c.chars);\n          default:\n            return true;\n        }\n      }).length\n    );\n    this.nonBlockChildren = children.filter(\n      (c): c is ASTv2.ContentNode => !(c instanceof ASTv2.NamedBlock)\n    );\n  }\n}\n\nclass TemplateChildren extends Children {\n  assertTemplate(table: ProgramSymbolTable): ASTv2.Template {\n    if (isPresentArray(this.namedBlocks)) {\n      throw generateSyntaxError(`Unexpected named block at the top-level of a template`, this.loc);\n    }\n\n    return this.block.builder.template(table, this.nonBlockChildren, this.block.loc(this.loc));\n  }\n}\n\nclass BlockChildren extends Children {\n  assertBlock(table: BlockSymbolTable): ASTv2.Block {\n    if (isPresentArray(this.namedBlocks)) {\n      throw generateSyntaxError(`Unexpected named block nested in a normal block`, this.loc);\n    }\n\n    return this.block.builder.block(table, this.nonBlockChildren, this.loc);\n  }\n}\n\nclass ElementChildren extends Children {\n  constructor(\n    private el: BuildElement,\n    loc: SourceSpan,\n    children: (ASTv2.ContentNode | ASTv2.NamedBlock)[],\n    block: BlockContext\n  ) {\n    super(loc, children, block);\n  }\n\n  assertNamedBlock(name: SourceSlice, table: BlockSymbolTable): ASTv2.NamedBlock {\n    if (this.el.base.selfClosing) {\n      throw generateSyntaxError(\n        `<:${name.chars}/> is not a valid named block: named blocks cannot be self-closing`,\n        this.loc\n      );\n    }\n\n    if (isPresentArray(this.namedBlocks)) {\n      throw generateSyntaxError(\n        `Unexpected named block inside <:${name.chars}> named block: named blocks cannot contain nested named blocks`,\n        this.loc\n      );\n    }\n\n    if (!isLowerCase(name.chars)) {\n      throw generateSyntaxError(\n        `<:${name.chars}> is not a valid named block, and named blocks must begin with a lowercase letter`,\n        this.loc\n      );\n    }\n\n    if (\n      this.el.base.attrs.length > 0 ||\n      this.el.base.componentArgs.length > 0 ||\n      this.el.base.modifiers.length > 0\n    ) {\n      throw generateSyntaxError(\n        `named block <:${name.chars}> cannot have attributes, arguments, or modifiers`,\n        this.loc\n      );\n    }\n\n    let offsets = SpanList.range(this.nonBlockChildren, this.loc);\n\n    return this.block.builder.namedBlock(\n      name,\n      this.block.builder.block(table, this.nonBlockChildren, offsets),\n      this.loc\n    );\n  }\n\n  assertElement(name: SourceSlice, hasBlockParams: boolean): ASTv2.SimpleElement {\n    if (hasBlockParams) {\n      throw generateSyntaxError(\n        `Unexpected block params in <${name.chars}>: simple elements cannot have block params`,\n        this.loc\n      );\n    }\n\n    if (isPresentArray(this.namedBlocks)) {\n      let names = this.namedBlocks.map((b) => b.name);\n\n      if (names.length === 1) {\n        throw generateSyntaxError(\n          `Unexpected named block <:foo> inside <${name.chars}> HTML element`,\n          this.loc\n        );\n      } else {\n        let printedNames = names.map((n) => `<:${n.chars}>`).join(', ');\n        throw generateSyntaxError(\n          `Unexpected named blocks inside <${name.chars}> HTML element (${printedNames})`,\n          this.loc\n        );\n      }\n    }\n\n    return this.el.simple(name, this.nonBlockChildren, this.loc);\n  }\n\n  assertComponent(\n    name: string,\n    table: BlockSymbolTable,\n    hasBlockParams: boolean\n  ): PresentArray<ASTv2.NamedBlock> {\n    if (isPresentArray(this.namedBlocks) && this.hasSemanticContent) {\n      throw generateSyntaxError(\n        `Unexpected content inside <${name}> component invocation: when using named blocks, the tag cannot contain other content`,\n        this.loc\n      );\n    }\n\n    if (isPresentArray(this.namedBlocks)) {\n      if (hasBlockParams) {\n        throw generateSyntaxError(\n          `Unexpected block params list on <${name}> component invocation: when passing named blocks, the invocation tag cannot take block params`,\n          this.loc\n        );\n      }\n\n      let seenNames = new Set<string>();\n\n      for (let block of this.namedBlocks) {\n        let name = block.name.chars;\n\n        if (seenNames.has(name)) {\n          throw generateSyntaxError(\n            `Component had two named blocks with the same name, \\`<:${name}>\\`. Only one block with a given name may be passed`,\n            this.loc\n          );\n        }\n\n        if (\n          (name === 'inverse' && seenNames.has('else')) ||\n          (name === 'else' && seenNames.has('inverse'))\n        ) {\n          throw generateSyntaxError(\n            `Component has both <:else> and <:inverse> block. <:inverse> is an alias for <:else>`,\n            this.loc\n          );\n        }\n\n        seenNames.add(name);\n      }\n\n      return this.namedBlocks;\n    } else {\n      return [\n        this.block.builder.namedBlock(\n          SourceSlice.synthetic('default'),\n          this.block.builder.block(table, this.nonBlockChildren, this.loc),\n          this.loc\n        ),\n      ];\n    }\n  }\n}\n\nfunction isLiteral(node: ASTv1.Expression): node is ASTv1.Literal {\n  switch (node.type) {\n    case 'StringLiteral':\n    case 'BooleanLiteral':\n    case 'NumberLiteral':\n    case 'UndefinedLiteral':\n    case 'NullLiteral':\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction assertIllegalLiteral(node: ASTv1.Literal, loc: SourceSpan): never {\n  let value = node.type === 'StringLiteral' ? JSON.stringify(node.value) : String(node.value);\n  throw generateSyntaxError(`Unexpected literal \\`${value}\\``, loc);\n}\n\nfunction printPath(node: ASTv1.PathExpression | ASTv1.CallNode): string {\n  if (node.type !== 'PathExpression' && node.path.type === 'PathExpression') {\n    return printPath(node.path);\n  } else {\n    return new Printer({ entityEncoding: 'raw' }).print(node);\n  }\n}\n\nfunction printHead(node: ASTv1.PathExpression | ASTv1.CallNode): string {\n  if (node.type === 'PathExpression') {\n    return node.head.original;\n  } else if (node.path.type === 'PathExpression') {\n    return printHead(node.path);\n  } else {\n    return new Printer({ entityEncoding: 'raw' }).print(node);\n  }\n}\n"],"names":["ATTR_VALUE_REGEX_TEST","ATTR_VALUE_REGEX_REPLACE","RegExp","source","TEXT_REGEX_TEST","TEXT_REGEX_REPLACE","attrValueReplacer","char","charCodeAt","textReplacer","sortByLoc","a","b","loc","isInvisible","startPosition","line","column","voidMap","Set","getVoidTags","NON_WHITESPACE","isVoidTag","tag","has","toLowerCase","Printer","buffer","options","constructor","this","handledByOverride","node","ensureLeadingWhitespace","undefined","override","result","test","Node","type","TopLevelStatement","Expression","ConcatStatement","Hash","HashPair","ElementModifierStatement","expression","Literal","PathExpression","SubExpression","literal","StringLiteral","BooleanLiteral","NumberLiteral","UndefinedLiteral","NullLiteral","statement","MustacheStatement","BlockStatement","MustacheCommentStatement","CommentStatement","TextNode","ElementNode","Block","Template","AttrNode","template","TopLevelStatements","body","block","chained","statements","forEach","el","OpenElementNode","children","CloseElementNode","parts","attributes","modifiers","comments","sort","part","blockParams","length","BlockParams","selfClosing","attr","name","value","chars","AttrNodeValue","text","isAttr","attrValue","entityEncoding","replace","escapeText","mustache","trusting","strip","open","path","Params","params","hash","close","inverseStrip","openStrip","program","inverse","closeStrip","join","concat","comment","mod","original","sexp","param","pairs","pair","key","str","JSON","stringify","bool","number","print","build","ast","isKeyword","word","KEYWORDS_TYPES","includes","action","component","debugger","each","helper","if","let","log","modifier","mount","mut","outlet","readonly","unbound","unless","yield","isPresentArray","list","asPresentArray","message","getLast","getFirst","UNKNOWN_POSITION","Object","freeze","SYNTHETIC_LOCATION","start","end","NON_EXISTENT_LOCATION","BROKEN_LOCATION","CHAR_OFFSET_KIND","HBS_POSITION_KIND","INTERNAL_SYNTHETIC_KIND","NON_EXISTENT_KIND","BROKEN_KIND","MatchAny","IsInvisible","WhenList","_whens","whens","first","kind","when","match","When","_map","Map","get","pattern","or","set","add","out","patternFor","exact","fallback","push","callback","Matcher","validate","left","right","matchFor","nesteds","SourceSlice","synthetic","offsets","src","load","slice","getString","serialize","SourceSpan","NON_EXISTENT","InvisibleSpan","wrap","serialized","forCharPositions","Array","isArray","broken","assertNever","forHbsLoc","HbsPosition","HbsSpan","startPos","endPos","CharPosition","CharPositionSpan","pos","data","getStart","getEnd","span","toHbsSpan","toHbsLoc","module","getModule","endPosition","toJSON","withStart","other","withEnd","asString","toSlice","expected","position","locDidUpdate","collapse","where","collapsed","extend","skipStart","skipEnd","move","sliceStartChars","sliceEndChars","locPosSpan","charPositions","charPos","toHbsPos","BROKEN","toCharPosSpan","charPosSpan","providedHbsLoc","hbsPositions","updateProvided","edge","hbsPos","toCharPos","string","InvisiblePosition","m","rightCharPos","leftCharPos","_","SourceOffset","forHbsPos","offset","eql","until","by","_locPos","hbs","locPos","hbsPosFor","_charPos","charPosNumber","charPosFor","Source","from","meta","moduleName","offsetFor","spanFor","seenLines","seenChars","nextLine","indexOf","sourceLength","SpanList","range","map","getRangeOffset","_span","last","hasSpan","maybeLoc","location","generateSyntaxError","code","quotedCode","split","error","Error","visitorKeys","TraversalError","parent","call","stack","prototype","create","cannotRemoveNode","cannotReplaceNode","cannotReplaceOrRemoveInKeyHandlerYet","WalkerPath","parentKey","parentNode","parents","Symbol","iterator","PathParentsIterator","next","done","getEnterFunction","handler","enter","getExitFunction","exit","visitNode","visitor","nodeType","Program","All","getNodeHandler","visitArray","keys","i","visitKey","keyEnter","keyExit","keyHandler","keyVisitor","getKeyHandler","assignKey","array","spliceArray","index","splice","traverse","Walker","order","visit","pop","walkBody","walker","child","appendChild","childrenFor","isHBSLiteral","_SOURCE","SOURCE","buildVar","var","buildLoc","buildPath","head","tail","headNode","buildHead","buildLiteral","buildHash","buildBlockParams","p","buildBlockItself","blockItself","buildTemplate","args","startLine","startColumn","endLine","endColumn","_source","publicBuilder","_defaultBlock","_elseBlock","defaultBlock","elseBlock","mustacheComment","element","attrs","openTag","closeTag","_closeTag","endsWith","elementModifier","sexpr","fullPath","at","atName","boolean","null","DEFAULT_STRIP","defineProperty","enumerable","buildLegacyMustache","_selfClosing","shift","startsWith","values","unshift","buildLegacyPath","_name","buildLegacyLiteral","Parser","elementStack","lines","currentAttribute","currentNode","tokenizer","entityParser","EntityParser","namedCharRefs","mode","EventedTokenizer","finish","assign","currentAttr","currentTag","currentStartTag","currentEndTag","currentComment","currentData","acceptNode","currentElement","sourceForNode","endNode","lastLine","lastColumn","firstLine","currentLine","firstColumn","BEFORE_ATTRIBUTE_NAME","HandlebarsNodeVisitors","pendingError","parse","parseProgram","eof","poppedNode","state","appendToCommentData","acceptCallNodes","content","limit","nameStart","rawMustache","escaped","addElementModifier","beginAttributeValue","finishAttributeValue","transitionTo","appendDynamicAttributeValuePart","finalizeTextPart","isDynamic","currentPart","startTextPart","ContentStatement","columns","difference","lineCount","calculateRightStrippedOffsets","updateTokenizerLocation","tokenizePart","flushData","rawComment","PartialStatement","partial","PartialBlockStatement","partialBlock","Decorator","decorator","DecoratorBlock","decoratorBlock","pathHead","thisHead","undef","nul","compiler","toString","e","printLiteral","isSpace","TokenizerEventHandlers","tagOpenLine","tagOpenColumn","reset","beginComment","finishComment","beginData","appendToData","finishData","tagOpen","beginStartTag","nameEnd","beginEndTag","finishTag","finishStartTag","finishEndTag","nameLoc","isVoid","closeTagStart","validateEndTag","markTagAsSelfClosing","appendToTagName","beginAttribute","isQuoted","valueSpan","appendToAttributeName","parsePossibleBlockParams","appendToAttributeValue","lastPart","current","tokenizerPos","assembleAttributeValue","attribute","ID_INVERSE_PATTERN","as","handlers","PossibleAs","consume","BeforeStartPipe","BeforeBlockParamName","BlockParamName","AfterEndPipe","Done","peek","reportSyntaxError","assembleConcatenatedValue","syntax","preprocess","builders","CodemodEntityParser","super","input","parseWithoutProcessing","parseOptions","locals","plugins","transform","addTokens","tokensSet","scopedTokens","maybeTokens","possbleToken","charAt","includeHtmlElements","substr","potentialLocal","tokensFromType","maybeToken","maybeTokenFirstSegment","getTemplateLocals","html","includeKeywords","tokens","s","filter","token","fields","Args","empty","positional","PositionalArguments","named","NamedArguments","nth","isEmpty","exprs","size","entries","entry","NamedArgument","HtmlAttr","SplatAttr","ComponentArg","toNamedArgument","ElementModifier","GlimmerComment","HtmlText","HtmlComment","AppendContent","callee","InvokeBlock","InvokeComponent","componentArgs","SimpleElement","LiteralExpression","KeywordExpression","CallExpression","InterpolateExpression","NamedBlocks","blocks","NamedBlock","ThisReference","ArgReference","LocalVarReference","FreeVarReference","HELPER_VAR_NS","MODIFIER_VAR_NS","COMPONENT_VAR_NS","STRICT_RESOLUTION","resolution","SexpOpcodes","GetStrictKeyword","isAngleBracket","HTML_RESOLUTION","LooseModeResolution","namespaced","namespace","append","trustingAppend","namespaces","GetFreeAsComponentOrHelperHead","GetFreeAsHelperHead","GetFreeAsModifierHead","GetFreeAsComponentHead","HELPER_NAMESPACE","MODIFIER_NAMESPACE","COMPONENT_NAMESPACE","SymbolTable","top","keywords","ProgramSymbolTable","symbols","allocate","BlockSymbolTable","templateLocals","upvars","dict","usedTemplateLocals","root","hasLexical","lexicalScope","hasKeyword","getKeyword","allocateFree","ASTv2","getUsedTemplateLocals","getLocalsMap","getDebugInfo","customizeComponentName","allocateNamed","allocateBlock","identifier","slots","local","slot","symbol","fromEntries","Builder","table","scope","namedBlock","simpleNamedBlock","BuildElement","namedArgument","splatAttr","arg","ref","keyword","self","freeVar","context","localVar","isTemplateLocal","interpolate","namedBlocks","blockStatement","blocksLoc","builder","base","simple","selfClosingComponent","componentWithDefaultBlock","componentWithNamedBlocks","SexpSyntaxContext","isSimpleCallee","ModifierSyntaxContext","BlockSyntaxContext","ComponentSyntaxContext","isSimplePath","AttrValueSyntaxContext","AppendSyntaxContext","isSimple","normalize","normalizeOptions","strictMode","BlockContext","normalizer","StatementNormalizer","astV2","TemplateChildren","assertTemplate","strict","resolutionFor","isFreeVar","r","printPath","printHead","isLexicalVar","variable","hasBinding","ExpressionNormalizer","expr","isLiteral","assertIllegalLiteral","callParts","paramList","paramLoc","namedLoc","argsLoc","keyOffsets","isRoot","ElementNormalizer","textLoc","BlockChildren","assertBlock","ctx","tagHead","rest","classifyTag","childNodes","c","ElementChildren","tagOffsets","assertNamedBlock","assertElement","assertComponent","mustacheAttr","attrPart","nameSlice","checkArgCall","uppercase","toUpperCase","inScope","isComponent","variableLoc","tailLength","reduce","accum","pathEnd","pathLoc","Children","hasSemanticContent","nonBlockChildren","Boolean","hasBlockParams","names","printedNames","n","seenNames","String"],"mappings":"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"}