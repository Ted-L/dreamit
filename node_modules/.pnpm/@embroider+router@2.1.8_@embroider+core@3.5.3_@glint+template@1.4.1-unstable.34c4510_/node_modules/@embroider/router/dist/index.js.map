{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable ember/no-private-routing-service */\n/*\n  This code is adapted from ember-engines/addon/-private/router-ext.js.\n*/\nimport EmberRouter from '@ember/routing/router';\nimport { buildWaiter } from '@ember/test-waiters';\nimport { macroCondition, getGlobalConfig } from '@embroider/macros';\n\ninterface GlobalConfig {\n  '@embroider/core'?: { active: boolean };\n}\n\nlet Router: typeof EmberRouter;\n\ninterface GetRoute {\n  (name: string): unknown;\n  isEmbroiderRouterHandler?: true;\n}\n\ninterface Internals {\n  _engineInfoByRoute: Record<string, { name: string }>;\n  _routerMicrolib: {\n    getRoute: GetRoute;\n  };\n}\n\ninterface EmbroiderBundle {\n  names: string[];\n  loaded?: true;\n  load: () => Promise<void>;\n}\n\nif (macroCondition(getGlobalConfig<GlobalConfig>()['@embroider/core']?.active ?? false)) {\n  const waiter = buildWaiter('@embroider/router:lazy-route-waiter');\n\n  function embroiderBundles(): {\n    _embroiderEngineBundles_?: EmbroiderBundle[];\n    _embroiderRouteBundles_?: EmbroiderBundle[];\n  } {\n    return window as ReturnType<typeof embroiderBundles>;\n  }\n\n  class EmbroiderRouter extends EmberRouter {\n    private seenByRoute = new Set<string>();\n\n    private lazyRoute(this: this & Internals, routeName: string): EmbroiderBundle | undefined {\n      let bundles = embroiderBundles();\n      if (bundles._embroiderRouteBundles_) {\n        return bundles._embroiderRouteBundles_.find(bundle => bundle.names.indexOf(routeName) !== -1);\n      }\n      return undefined;\n    }\n\n    private lazyEngine(this: this & Internals, routeName: string): EmbroiderBundle | undefined {\n      // Here we map engine names to route names. We need to do this because\n      // engines can be specified with \"as\" such as:\n      //\n      // this.mount('lazy-engine', { path: '/use-lazy-engine', as: 'use-lazy-engine' });\n      //\n      // This presents a problem at build time since we cant get this \"mount point\" name. This is because the\n      // router is dynamic and the string could be defined as anything. Luckly, this._engineInfoByRoute contains\n      // mappings from routeName to the engines \"original name\" (which we know at build time).\n      let bundles = embroiderBundles();\n      let engine = this._engineInfoByRoute[routeName];\n      if (engine && bundles._embroiderEngineBundles_) {\n        let engineName = engine.name;\n        return bundles._embroiderEngineBundles_.find(bundle => bundle.names.indexOf(engineName) !== -1);\n      }\n      return undefined;\n    }\n\n    private isEngine(this: this & Internals, name: string): boolean {\n      return Boolean(this._engineInfoByRoute[name]);\n    }\n\n    // This is necessary in order to prevent the premature loading of lazy routes\n    // when we are merely trying to render a link-to that points at them.\n    // Unfortunately the stock query parameter behavior pulls on routes just to\n    // check what their previous QP values were.\n    _getQPMeta(this: this & Internals, handlerInfo: { name: string }, ...rest: unknown[]) {\n      let bundle = this.lazyRoute(handlerInfo.name);\n      if (bundle && !bundle.loaded) {\n        // unloaded split routes\n        return undefined;\n      }\n\n      if (this.isEngine(handlerInfo.name) && !this.seenByRoute.has(handlerInfo.name)) {\n        // unvisited engines, whether loaded or not, because the same bundle\n        // could by mounted multiple places and engines expect to only run the\n        // super._getQPMeta after they've been visited.\n        return undefined;\n      }\n\n      bundle = this.lazyEngine(handlerInfo.name);\n      if (bundle && !bundle.loaded) {\n        // unloaded lazy engines\n        return undefined;\n      }\n\n      // @ts-expect-error extending private method\n      return super._getQPMeta(handlerInfo, ...rest);\n    }\n\n    // This is the framework method that we're overriding to provide our own\n    // handlerResolver.\n    setupRouter(this: this & Internals, ...args: unknown[]) {\n      // @ts-expect-error extending private method\n      let isSetup = super.setupRouter(...args);\n      let microLib = this._routerMicrolib;\n      if (!microLib.getRoute.isEmbroiderRouterHandler) {\n        microLib.getRoute = this._handlerResolver(microLib.getRoute.bind(microLib));\n      }\n      return isSetup;\n    }\n\n    private _handlerResolver(this: this & Internals, original: (name: string) => unknown) {\n      let handler = ((name: string) => {\n        const bundle = this.lazyRoute(name) ?? this.lazyEngine(name);\n        this.seenByRoute.add(name);\n        if (!bundle || bundle.loaded) {\n          return original(name);\n        }\n\n        let token = waiter.beginAsync();\n\n        return bundle.load().then(\n          () => {\n            waiter.endAsync(token);\n            bundle.loaded = true;\n            return original(name);\n          },\n          err => {\n            waiter.endAsync(token);\n            throw err;\n          }\n        );\n      }) as GetRoute;\n      handler.isEmbroiderRouterHandler = true;\n      return handler;\n    }\n  }\n\n  Router = EmbroiderRouter;\n} else {\n  Router = EmberRouter;\n}\n\nexport default Router;\n"],"names":["Router","macroCondition","getGlobalConfig","active","waiter","buildWaiter","embroiderBundles","window","EmbroiderRouter","EmberRouter","seenByRoute","Set","lazyRoute","routeName","bundles","_embroiderRouteBundles_","find","bundle","names","indexOf","undefined","lazyEngine","engine","_engineInfoByRoute","_embroiderEngineBundles_","engineName","name","isEngine","Boolean","_getQPMeta","handlerInfo","rest","loaded","has","setupRouter","args","isSetup","microLib","_routerMicrolib","getRoute","isEmbroiderRouterHandler","_handlerResolver","bind","original","handler","add","token","beginAsync","load","then","endAsync","err"],"mappings":"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"}